///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.3.3983 for 8051               10/Dec/2016  08:27:28
// Copyright 2004-2016 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    Command line       =  
//        -f "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
//        -f "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c"
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        xHOLD_AUTO_START -D ZTOOL_P1 -D xLCD_SUPPORTED=DEBUG -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D
//        xZCL_EZMODE -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES
//        -D ZCL_GROUPS -D xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D
//        FEATURE_SYSTEM_STATS -lC "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
//        -lA "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
//        "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\Admin\Desktop\zigbee with
//        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List\zcl_samplelight.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_samplelight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclSampleLight_BasicResetCB::?relay`,0203H
        FUNCTION `??zclSampleLight_HandleKeys::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyCB::?relay`,0203H
        FUNCTION `??zclSampleLight_IdentifyQueryRspCB::?relay`,0203H
        PUBLIC `??zclSampleLight_Init::?relay`
        FUNCTION `??zclSampleLight_Init::?relay`,0203H
        FUNCTION `??zclSampleLight_LcdDisplayUpdate::?relay`,0203H
        FUNCTION `??zclSampleLight_OnOffCB::?relay`,0203H
        FUNCTION `??zclSampleLight_ProcessIdentifyTimeChange::?re`,0203H
        PUBLIC `??zclSampleLight_event_loop::?relay`
        FUNCTION `??zclSampleLight_event_loop::?relay`,0203H
        PUBWEAK __Constant_3e8
        PUBLIC bindingInClusters
        PUBLIC gPermitDuration
        PUBLIC giLightScreenMode
        PUBLIC zclSampleLightSeqNum
        FUNCTION zclSampleLight_BasicResetCB,021603H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 5, STACK
        PUBLIC zclSampleLight_DstAddr
        FUNCTION zclSampleLight_HandleKeys,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 28, STACK
        FUNCTION zclSampleLight_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclSampleLight_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclSampleLight_Init
        FUNCTION zclSampleLight_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclSampleLight_LcdDisplayUpdate,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclSampleLight_NwkState
        FUNCTION zclSampleLight_OnOffCB,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclSampleLight_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC zclSampleLight_TaskID
        PUBLIC zclSampleLight_event_loop
        FUNCTION zclSampleLight_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_SendNetworkStatus SYMBOL "NLME_SendNetworkStatus"
`??NLME_SendNetworkStatus::?relay` SYMBOL "?relay", NLME_SendNetworkStatus
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zclDiagnostic_InitStats SYMBOL "zclDiagnostic_InitStats"
`??zclDiagnostic_InitStats::?relay` SYMBOL "?relay", zclDiagnostic_InitStats
`?<Name zclDiagnostic_ReadWr 34>` SYMBOL "zclDiagnostic_ReadWriteAttrCB"
`??zclDiagnostic_ReadWriteAttrCB::?relay` SYMBOL "?relay", `?<Name zclDiagnostic_ReadWr 34>`
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclHA_Init          SYMBOL "zclHA_Init"
`??zclHA_Init::?relay` SYMBOL "?relay", zclHA_Init
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
zclSampleLight_Init SYMBOL "zclSampleLight_Init"
`??zclSampleLight_Init::?relay` SYMBOL "?relay", zclSampleLight_Init
zclSampleLight_event_loop SYMBOL "zclSampleLight_event_loop"
`??zclSampleLight_event_loop::?relay` SYMBOL "?relay", zclSampleLight_event_loop

        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_SendNetworkStatus::?relay`
        FUNCTION `??NLME_SendNetworkStatus::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,00H
        EXTERN `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zclDiagnostic_InitStats::?relay`
        FUNCTION `??zclDiagnostic_InitStats::?relay`,00H
        EXTERN `??zclDiagnostic_ReadWriteAttrCB::?relay`
        FUNCTION `??zclDiagnostic_ReadWriteAttrCB::?relay`,00H
        EXTERN `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,00H
        EXTERN `??zclHA_Init::?relay`
        FUNCTION `??zclHA_Init::?relay`,00H
        EXTERN `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,00H
        EXTERN `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,00H
        EXTERN `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,00H
        EXTERN `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SendNetworkStatus
        FUNCTION NLME_SendNetworkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDiagnostic_InitStats
        FUNCTION zclDiagnostic_InitStats,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSampleLight_Attrs
        EXTERN zclSampleLight_IdentifyTime
        EXTERN zclSampleLight_NumAttributes
        EXTERN zclSampleLight_OnOff
        EXTERN zclSampleLight_SimpleDesc
        EXTERN zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\Admin\Desktop\zigbee with smartThings\Projects\zstack\HomeAutomation\SampleLight\Source\zcl_samplelight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2014-10-24 16:04:46 -0700 (Fri, 24 Oct 2014) $
//    4   Revision:       $Revision: 40796 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This application implements a ZigBee HA 1.2 Light. It can be configured as an
//   43   On/Off light, or as a dimmable light. The following flags must be defined in
//   44   the compiler's pre-defined symbols.
//   45 
//   46   ZCL_ON_OFF
//   47   ZCL_LEVEL_CTRL    (only if dimming functionality desired)
//   48   HOLD_AUTO_START
//   49   ZCL_EZMODE
//   50 
//   51   This device supports all mandatory and optional commands/attributes for the
//   52   OnOff (0x0006) and LevelControl (0x0008) clusters.
//   53 
//   54   SCREEN MODES
//   55   ----------------------------------------
//   56   Main:
//   57     - SW1: Toggle local light
//   58     - SW2: Invoke EZMode
//   59     - SW4: Enable/Disable local permit join
//   60     - SW5: Go to Help screen
//   61   ----------------------------------------
//   62 *********************************************************************/
//   63 
//   64 /*********************************************************************
//   65  * INCLUDES
//   66  */
//   67 #include "ZComDef.h"
//   68 #include "OSAL.h"
//   69 #include "AF.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDObject.h"
//   72 #include "MT_SYS.h"
//   73 
//   74 #include "nwk_util.h"
//   75 
//   76 #include "zcl.h"
//   77 #include "zcl_general.h"
//   78 #include "zcl_ha.h"
//   79 #include "zcl_ezmode.h"
//   80 #include "zcl_diagnostic.h"
//   81 
//   82 #include "zcl_samplelight.h"
//   83 
//   84 #include "onboard.h"
//   85 
//   86 /* HAL */
//   87 #include "hal_lcd.h"
//   88 #include "hal_led.h"
//   89 #include "hal_key.h"
//   90 
//   91 #if ( defined (ZGP_DEVICE_TARGET) || defined (ZGP_DEVICE_TARGETPLUS) \ 
//   92       || defined (ZGP_DEVICE_COMBO) || defined (ZGP_DEVICE_COMBO_MIN) )
//   93 #include "zgp_translationtable.h"
//   94   #if (SUPPORTED_S_FEATURE(SUPP_ZGP_FEATURE_TRANSLATION_TABLE))
//   95     #define ZGP_AUTO_TT
//   96   #endif
//   97 #endif
//   98 
//   99 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  100 #include "math.h"
//  101 #include "hal_timer.h"
//  102 #endif
//  103 
//  104 #include "NLMEDE.h"
//  105 
//  106 /*********************************************************************
//  107  * MACROS
//  108  */
//  109 
//  110 /*********************************************************************
//  111  * CONSTANTS
//  112  */
//  113 #if (defined HAL_BOARD_ZLIGHT)
//  114 #define LEVEL_MAX                 0xFE
//  115 #define LEVEL_MIN                 0x0
//  116 #define GAMMA_VALUE               2
//  117 #define PWM_FULL_DUTY_CYCLE       1000
//  118 #elif (defined HAL_PWM)
//  119 #define LEVEL_MAX                 0xFE
//  120 #define LEVEL_MIN                 0x0
//  121 #define GAMMA_VALUE               2
//  122 #define PWM_FULL_DUTY_CYCLE       100
//  123 #endif
//  124 
//  125 /*********************************************************************
//  126  * TYPEDEFS
//  127  */
//  128 
//  129 /*********************************************************************
//  130  * GLOBAL VARIABLES
//  131  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 byte zclSampleLight_TaskID;
zclSampleLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133 uint8 zclSampleLightSeqNum;
zclSampleLightSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  134 
//  135 
//  136 /*********************************************************************
//  137  * GLOBAL FUNCTIONS
//  138  */
//  139 
//  140 /*********************************************************************
//  141  * LOCAL VARIABLES
//  142  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 afAddrType_t zclSampleLight_DstAddr;
zclSampleLight_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  144 
//  145 #ifdef ZCL_EZMODE
//  146 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg );
//  147 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData );
//  148 
//  149 
//  150 // register EZ-Mode with task information (timeout events, callback, etc...)
//  151 static const zclEZMode_RegisterData_t zclSampleLight_RegisterEZModeData =
//  152 {
//  153   &zclSampleLight_TaskID,
//  154   SAMPLELIGHT_EZMODE_NEXTSTATE_EVT,
//  155   SAMPLELIGHT_EZMODE_TIMEOUT_EVT,
//  156   &zclSampleLightSeqNum,
//  157   zclSampleLight_EZModeCB
//  158 };
//  159 
//  160 #else

        RSEG XDATA_I:XDATA:NOROOT(0)
//  161 uint16 bindingInClusters[] =
bindingInClusters:
        DATA16
        DS 2
        REQUIRE `?<Initializer for bindingInClusters>`
        REQUIRE __INIT_XDATA_I
//  162 {
//  163   ZCL_CLUSTER_ID_GEN_ON_OFF
//  164 #ifdef ZCL_LEVEL_CTRL
//  165   , ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
//  166 #endif
//  167 };
//  168 #define ZCLSAMPLELIGHT_BINDINGLIST (sizeof(bindingInClusters) / sizeof(bindingInClusters[0]))
//  169 
//  170 #endif  // ZCL_EZMODE
//  171 
//  172 // Test Endpoint to allow SYS_APP_MSGs

        RSEG XDATA_I:XDATA:NOROOT(0)
//  173 static endPointDesc_t sampleLight_TestEp =
sampleLight_TestEp:
        DATA8
        DS 6
        REQUIRE `?<Initializer for sampleLight_TestEp>`
        REQUIRE __INIT_XDATA_I
//  174 {
//  175   SAMPLELIGHT_ENDPOINT,
//  176   &zclSampleLight_TaskID,
//  177   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
//  178   (afNetworkLatencyReq_t)0            // No Network Latency req
//  179 };
//  180 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  181 uint8 giLightScreenMode = LIGHT_MAINMODE;   // display the main screen mode first
giLightScreenMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  182 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  183 uint8 gPermitDuration = 0;    // permit joining default to disabled
gPermitDuration:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  184 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  185 devStates_t zclSampleLight_NwkState = DEV_INIT;
zclSampleLight_NwkState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclSampleLight_NwkState>`
        REQUIRE __INIT_XDATA_I
//  186 
//  187 #if ZCL_LEVEL_CTRL
//  188 uint8 zclSampleLight_WithOnOff;       // set to TRUE if state machine should set light on/off
//  189 uint8 zclSampleLight_NewLevel;        // new level when done moving
//  190 bool  zclSampleLight_NewLevelUp;      // is direction to new level up or down?
//  191 int32 zclSampleLight_CurrentLevel32;  // current level, fixed point (e.g. 192.456)
//  192 int32 zclSampleLight_Rate32;          // rate in units, fixed point (e.g. 16.123)
//  193 uint8 zclSampleLight_LevelLastLevel;  // to save the Current Level before the light was turned OFF
//  194 #endif
//  195 
//  196 /*********************************************************************
//  197  * LOCAL FUNCTIONS
//  198  */
//  199 static void zclSampleLight_HandleKeys( byte shift, byte keys );
//  200 static void zclSampleLight_BasicResetCB( void );
//  201 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd );
//  202 static void zclSampleLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  203 static void zclSampleLight_OnOffCB( uint8 cmd );
//  204 static void zclSampleLight_ProcessIdentifyTimeChange( void );
//  205 #ifdef ZCL_LEVEL_CTRL
//  206 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd );
//  207 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd );
//  208 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd );
//  209 static void zclSampleLight_LevelControlStopCB( void );
//  210 static void zclSampleLight_DefaultMove( void );
//  211 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel );
//  212 static uint16 zclSampleLight_GetTime ( uint8 level, uint16 time );
//  213 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate );
//  214 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time );
//  215 static void zclSampleLight_AdjustLightLevel( void );
//  216 #endif
//  217 
//  218 // app display functions
//  219 static void zclSampleLight_LcdDisplayUpdate( void );
//  220 #ifdef LCD_SUPPORTED
//  221 static void zclSampleLight_LcdDisplayMainMode( void );
//  222 static void zclSampleLight_LcdDisplayHelpMode( void );
//  223 #endif
//  224 static void zclSampleLight_DisplayLight( void );
//  225 
//  226 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  227 void zclSampleLight_UpdateLampLevel( uint8 level );
//  228 #endif
//  229 
//  230 // Functions to process ZCL Foundation incoming Command/Response messages
//  231 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  232 #ifdef ZCL_READ
//  233 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  234 #endif
//  235 #ifdef ZCL_WRITE
//  236 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  237 #endif
//  238 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  239 #ifdef ZCL_DISCOVER
//  240 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
//  241 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
//  242 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
//  243 #endif
//  244 
//  245 /*********************************************************************
//  246  * STATUS STRINGS
//  247  */
//  248 #ifdef LCD_SUPPORTED
//  249 const char sDeviceName[]   = "  Sample Light";
//  250 const char sClearLine[]    = " ";
//  251 const char sSwLight[]      = "SW1: ToggleLight";  // 16 chars max
//  252 const char sSwEZMode[]     = "SW2: EZ-Mode";
//  253 char sSwHelp[]             = "SW5: Help       ";  // last character is * if NWK open
//  254 const char sLightOn[]      = "    LIGHT ON ";
//  255 const char sLightOff[]     = "    LIGHT OFF";
//  256  #if ZCL_LEVEL_CTRL
//  257  char sLightLevel[]        = "    LEVEL ###"; // displays level 1-254
//  258  #endif
//  259 #endif
//  260 
//  261 /*********************************************************************
//  262  * ZCL General Profile Callback table
//  263  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  264 static zclGeneral_AppCallbacks_t zclSampleLight_CmdCallbacks =
zclSampleLight_CmdCallbacks:
        DATA8
        DS 28
        REQUIRE `?<Initializer for zclSampleLight_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  265 {
//  266   zclSampleLight_BasicResetCB,            // Basic Cluster Reset command
//  267   zclSampleLight_IdentifyCB,              // Identify command
//  268 #ifdef ZCL_EZMODE
//  269   NULL,                                   // Identify EZ-Mode Invoke command
//  270   NULL,                                   // Identify Update Commission State command
//  271 #endif
//  272   NULL,                                   // Identify Trigger Effect command
//  273   zclSampleLight_IdentifyQueryRspCB,      // Identify Query Response command
//  274   zclSampleLight_OnOffCB,                 // On/Off cluster commands
//  275   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  276   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  277   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  278 #ifdef ZCL_LEVEL_CTRL
//  279   zclSampleLight_LevelControlMoveToLevelCB, // Level Control Move to Level command
//  280   zclSampleLight_LevelControlMoveCB,        // Level Control Move command
//  281   zclSampleLight_LevelControlStepCB,        // Level Control Step command
//  282   zclSampleLight_LevelControlStopCB,        // Level Control Stop command
//  283 #endif
//  284 #ifdef ZCL_GROUPS
//  285   NULL,                                   // Group Response commands
//  286 #endif
//  287 #ifdef ZCL_SCENES
//  288   NULL,                                  // Scene Store Request command
//  289   NULL,                                  // Scene Recall Request command
//  290   NULL,                                  // Scene Response command
//  291 #endif
//  292 #ifdef ZCL_ALARMS
//  293   NULL,                                  // Alarm (Response) commands
//  294 #endif
//  295 #ifdef SE_UK_EXT
//  296   NULL,                                  // Get Event Log command
//  297   NULL,                                  // Publish Event Log command
//  298 #endif
//  299   NULL,                                  // RSSI Location command
//  300   NULL                                   // RSSI Location Response command
//  301 };
//  302 
//  303 /*********************************************************************
//  304  * @fn          zclSampleLight_Init
//  305  *
//  306  * @brief       Initialization function for the zclGeneral layer.
//  307  *
//  308  * @param       none
//  309  *
//  310  * @return      none
//  311  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  312 void zclSampleLight_Init( byte task_id )
zclSampleLight_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclSampleLight_Init
        CODE
//  313 {
        FUNCALL zclSampleLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zcl_registerReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_Init, zclDiagnostic_InitStats
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  314   zclSampleLight_TaskID = task_id;
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    @DPTR,A
//  315 
//  316   // Set destination address to indirect
//  317   zclSampleLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zclSampleLight_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  318   zclSampleLight_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  319   zclSampleLight_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  320 
//  321   // This app is part of the Home Automation Profile
//  322   zclHA_Init( &zclSampleLight_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclSampleLight_SimpleDesc & 0xff
        MOV     R3,#(zclSampleLight_SimpleDesc >> 8) & 0xff
        LCALL   `??zclHA_Init::?relay`; Banked call to: zclHA_Init
//  323 
//  324   // Register the ZCL General Cluster Library callback functions
//  325   zclGeneral_RegisterCmdCallbacks( SAMPLELIGHT_ENDPOINT, &zclSampleLight_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclSampleLight_CmdCallbacks & 0xff
        MOV     R3,#(zclSampleLight_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
//  326 
//  327   // Register the application's attribute list
//  328   zcl_registerAttrList( SAMPLELIGHT_ENDPOINT, zclSampleLight_NumAttributes, zclSampleLight_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclSampleLight_Attrs & 0xff
        MOV     R5,#(zclSampleLight_Attrs >> 8) & 0xff
        MOV     DPTR,#zclSampleLight_NumAttributes
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
//  329 
//  330   // Register the Application to receive the unprocessed Foundation command/response messages
//  331   zcl_registerForMsg( zclSampleLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
//  332 
//  333 #ifdef ZCL_DISCOVER
//  334   // Register the application's command list
//  335   zcl_registerCmdList( SAMPLELIGHT_ENDPOINT, zclCmdsArraySize, zclSampleLight_Cmds );
//  336 #endif
//  337 
//  338   // Register for all key events - This app will handle all key events
//  339   RegisterForKeys( zclSampleLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  340 
//  341   // Register for a test endpoint
//  342   afRegister( &sampleLight_TestEp );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sampleLight_TestEp & 0xff
        MOV     R3,#(sampleLight_TestEp >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  343 
//  344 #ifdef ZCL_EZMODE
//  345   // Register EZ-Mode
//  346   zcl_RegisterEZMode( &zclSampleLight_RegisterEZModeData );
//  347 
//  348   // Register with the ZDO to receive Match Descriptor Responses
//  349   ZDO_RegisterForZDOMsg(task_id, Match_Desc_rsp);
//  350 #endif
//  351 
//  352 
//  353 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  354   HalTimer1Init( 0 );
//  355   halTimer1SetChannelDuty( WHITE_LED, 0 );
//  356   halTimer1SetChannelDuty( RED_LED, 0 );
//  357   halTimer1SetChannelDuty( BLUE_LED, 0 );
//  358   halTimer1SetChannelDuty( GREEN_LED, 0 );
//  359 
//  360   // find if we are already on a network from NV_RESTORE
//  361   uint8 state;
//  362   NLME_GetRequest( nwkNwkState, 0, &state );
//  363 
//  364   if ( state < NWK_ENDDEVICE )
//  365   {
//  366     // Start EZMode on Start up to avoid button press
//  367     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_START_EZMODE_EVT, 500 );
//  368   }
//  369 #if ZCL_LEVEL_CTRL
//  370   zclSampleLight_DefaultMove();
//  371 #endif
//  372 #endif // #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  373 
//  374 #ifdef ZCL_DIAGNOSTIC
//  375   // Register the application's callback function to read/write attribute data.
//  376   // This is only required when the attribute data format is unknown to ZCL.
//  377   zcl_registerReadWriteCB( SAMPLELIGHT_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
        ; Setup parameters for call to function zcl_registerReadWriteCB
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
        MOV     R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
        MOV     R1,#0x8
        LCALL   `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
//  378 
//  379   if ( zclDiagnostic_InitStats() == ZSuccess )
        ; Setup parameters for call to function zclDiagnostic_InitStats
        LCALL   `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
//  380   {
//  381     // Here the user could start the timer to save Diagnostics to NV
//  382   }
//  383 #endif
//  384 
//  385 #ifdef LCD_SUPPORTED
//  386   HalLcdWriteString ( (char *)sDeviceName, HAL_LCD_LINE_3 );
//  387 #endif  // LCD_SUPPORTED
//  388 
//  389 #ifdef ZGP_AUTO_TT
//  390   zgpTranslationTable_RegisterEP ( &zclSampleLight_SimpleDesc );
//  391 #endif
//  392 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  393 
//  394 /*********************************************************************
//  395  * @fn          zclSample_event_loop
//  396  *
//  397  * @brief       Event Loop Processor for zclGeneral.
//  398  *
//  399  * @param       none
//  400  *
//  401  * @return      none
//  402  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  403 uint16 zclSampleLight_event_loop( uint8 task_id, uint16 events )
zclSampleLight_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
        CODE
//  404 {
        FUNCALL zclSampleLight_event_loop, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_event_loop, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  405   afIncomingMSGPacket_t *MSGpkt;
//  406 
//  407   (void)task_id;  // Intentionally unreferenced parameter
//  408 
//  409   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??zclSampleLight_event_loop_0
//  410   {
//  411     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleLight_TaskID )) )
//  412     {
//  413       switch ( MSGpkt->hdr.event )
//  414       {
//  415 #ifdef ZCL_EZMODE
//  416         case ZDO_CB_MSG:
//  417           zclSampleLight_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  418           break;
//  419 #endif
//  420         case ZCL_INCOMING_MSG:
//  421           // Incoming ZCL Foundation command/response messages
//  422           zclSampleLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  423           break;
//  424 
//  425         case KEY_CHANGE:
//  426           zclSampleLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  427           break;
//  428 
//  429         case ZDO_STATE_CHANGE:
//  430           zclSampleLight_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  431 
//  432           // now on the network
//  433           if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  434                (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  435                (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  436           {
//  437             giLightScreenMode = LIGHT_MAINMODE;
//  438             zclSampleLight_LcdDisplayUpdate();
//  439 #ifdef ZCL_EZMODE
//  440             zcl_EZModeAction( EZMODE_ACTION_NETWORK_STARTED, NULL );
//  441 #endif // ZCL_EZMODE
//  442           }
//  443           break;
//  444 
//  445         default:
//  446           break;
//  447       }
//  448 
//  449       // Release the memory
//  450       osal_msg_deallocate( (uint8 *)MSGpkt );
//  451     }
//  452 
//  453     // return unprocessed events
//  454     return (events ^ SYS_EVENT_MSG);
//  455   }
//  456 
//  457   if ( events & SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclSampleLight_event_loop_1 & 0xFFFF
//  458   {
//  459     if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_event_loop_2
//  460       zclSampleLight_IdentifyTime--;
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  461     zclSampleLight_ProcessIdentifyTimeChange();
??zclSampleLight_event_loop_2:
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  462 
//  463     return ( events ^ SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??zclSampleLight_event_loop_3 & 0xFFFF
//  464   }
??zclSampleLight_event_loop_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??zclSampleLight_event_loop_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_5:
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
??zclSampleLight_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??zclSampleLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??zclSampleLight_event_loop_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x34
        JZ      ??zclSampleLight_event_loop_8
        ADD     A,#0x74
        JZ      ??zclSampleLight_event_loop_9
        ADD     A,#-0x11
        JZ      ??zclSampleLight_event_loop_4
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_8:
        MOV     A,R2
        ADD     A,#0x17
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclSampleLight_event_loop_10
        ADD     A,#-0x3
        JNZ     ??zclSampleLight_event_loop_11
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclSampleLight_event_loop_11
        INC     R0
        SJMP    ??CrossCallReturnLabel_0
??zclSampleLight_event_loop_10:
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        SJMP    ??zclSampleLight_event_loop_12
??zclSampleLight_event_loop_13:
        INC     R0
??zclSampleLight_event_loop_12:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclSampleLight_event_loop_13
??zclSampleLight_event_loop_11:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclSampleLight_event_loop_6
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zclSampleLight_event_loop_6
??zclSampleLight_event_loop_9:
        ; Setup parameters for call to function zclSampleLight_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??zclSampleLight_HandleKeys::?relay`; Banked call to: zclSampleLight_HandleKeys
        LJMP    ??zclSampleLight_event_loop_6 & 0xFFFF
??zclSampleLight_event_loop_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??zclSampleLight_event_loop_14
//  465 
//  466   if ( events & SAMPLELIGHT_MAIN_SCREEN_EVT )
??zclSampleLight_event_loop_1:
        ANL     A,#0x10
        JZ      ??zclSampleLight_event_loop_15
//  467   {
//  468     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  469     zclSampleLight_LcdDisplayUpdate();
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  470 
//  471     return ( events ^ SAMPLELIGHT_MAIN_SCREEN_EVT );
        MOV     A,R6
        XRL     A,#0x10
??zclSampleLight_event_loop_3:
        MOV     R2,A
        MOV     A,R7
??zclSampleLight_event_loop_14:
        MOV     R3,A
        SJMP    ??zclSampleLight_event_loop_16
//  472   }
//  473 
//  474 #ifdef ZCL_EZMODE
//  475 #if (defined HAL_BOARD_ZLIGHT)
//  476   // event to start EZMode on startup with a delay
//  477   if ( events & SAMPLELIGHT_START_EZMODE_EVT )
//  478   {
//  479     // Invoke EZ-Mode
//  480     zclEZMode_InvokeData_t ezModeData;
//  481 
//  482     // Invoke EZ-Mode
//  483     ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  484     if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  485          (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  486          (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  487     {
//  488       ezModeData.onNetwork = TRUE;      // node is already on the network
//  489     }
//  490     else
//  491     {
//  492       ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  493     }
//  494     ezModeData.initiator = FALSE;          // OnOffLight is a target
//  495     ezModeData.numActiveOutClusters = 0;
//  496     ezModeData.pActiveOutClusterIDs = NULL;
//  497     ezModeData.numActiveInClusters = 0;
//  498     ezModeData.pActiveOutClusterIDs = NULL;
//  499     zcl_InvokeEZMode( &ezModeData );
//  500 
//  501     return ( events ^ SAMPLELIGHT_START_EZMODE_EVT );
//  502   }
//  503 #endif // #if (defined HAL_BOARD_ZLIGHT)
//  504 
//  505   // going on to next state
//  506   if ( events & SAMPLELIGHT_EZMODE_NEXTSTATE_EVT )
//  507   {
//  508     zcl_EZModeAction ( EZMODE_ACTION_PROCESS, NULL );   // going on to next state
//  509     return ( events ^ SAMPLELIGHT_EZMODE_NEXTSTATE_EVT );
//  510   }
//  511 
//  512   // the overall EZMode timer expired, so we timed out
//  513   if ( events & SAMPLELIGHT_EZMODE_TIMEOUT_EVT )
//  514   {
//  515     zcl_EZModeAction ( EZMODE_ACTION_TIMED_OUT, NULL ); // EZ-Mode timed out
//  516     return ( events ^ SAMPLELIGHT_EZMODE_TIMEOUT_EVT );
//  517   }
//  518 #endif // ZLC_EZMODE
//  519 
//  520 #ifdef ZCL_LEVEL_CTRL
//  521   if ( events & SAMPLELIGHT_LEVEL_CTRL_EVT )
//  522   {
//  523     zclSampleLight_AdjustLightLevel();
//  524     return ( events ^ SAMPLELIGHT_LEVEL_CTRL_EVT );
//  525   }
//  526 #endif
//  527 
//  528   // Discard unknown events
//  529   return 0;
??zclSampleLight_event_loop_15:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclSampleLight_event_loop_16:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  530 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond3) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond3) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond3) CFA_SP SP+-7
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     DPTR,#zclSampleLight_IdentifyTime
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine4_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
          CFI Conditional ??CrossCallReturnLabel_2
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zclSampleLight_OnOffCB
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function zclSampleLight_event_loop
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function zclSampleLight_ProcessIdentifyTimeChange
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond8) CFA_SP SP+-7
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zclSampleLight_event_loop
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zclSampleLight_event_loop
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
//  531 
//  532 /*********************************************************************
//  533  * @fn      zclSampleLight_HandleKeys
//  534  *
//  535  * @brief   Handles all key events for this device.
//  536  *
//  537  * @param   shift - true if in shift/alt.
//  538  * @param   keys - bit field for key events. Valid entries:
//  539  *                 HAL_KEY_SW_5
//  540  *                 HAL_KEY_SW_4
//  541  *                 HAL_KEY_SW_2
//  542  *                 HAL_KEY_SW_1
//  543  *
//  544  * @return  none
//  545  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  546 static void zclSampleLight_HandleKeys( byte shift, byte keys )
zclSampleLight_HandleKeys:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function zclSampleLight_HandleKeys
        CODE
//  547 {
        FUNCALL zclSampleLight_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_SendNetworkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, zclSampleLight_BasicResetCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_HandleKeys, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  548   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclSampleLight_HandleKeys_0
//  549   {
//  550     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  551 
//  552     // toggle local light immediately
//  553     zclSampleLight_OnOff = zclSampleLight_OnOff ? LIGHT_OFF : LIGHT_ON;
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_1
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_2
??zclSampleLight_HandleKeys_1:
        MOV     A,#0x1
??zclSampleLight_HandleKeys_2:
        MOVX    @DPTR,A
//  554 #ifdef ZCL_LEVEL_CTRL
//  555     zclSampleLight_LevelCurrentLevel = zclSampleLight_OnOff ? zclSampleLight_LevelOnLevel : ATTR_LEVEL_MIN_LEVEL;
//  556 #endif
//  557   }
//  558 
//  559   if ( keys & HAL_KEY_SW_2 )
??zclSampleLight_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclSampleLight_HandleKeys_3
//  560   {
//  561 #if (defined HAL_BOARD_ZLIGHT)
//  562 
//  563     zclSampleLight_BasicResetCB();
//  564 
//  565 #else
//  566 
//  567     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  568 
//  569 #ifdef ZCL_EZMODE
//  570     {
//  571       // Invoke EZ-Mode
//  572       zclEZMode_InvokeData_t ezModeData;
//  573 
//  574       // Invoke EZ-Mode
//  575       ezModeData.endpoint = SAMPLELIGHT_ENDPOINT; // endpoint on which to invoke EZ-Mode
//  576       if ( (zclSampleLight_NwkState == DEV_ZB_COORD) ||
//  577           (zclSampleLight_NwkState == DEV_ROUTER)   ||
//  578             (zclSampleLight_NwkState == DEV_END_DEVICE) )
//  579       {
//  580         ezModeData.onNetwork = TRUE;      // node is already on the network
//  581       }
//  582       else
//  583       {
//  584         ezModeData.onNetwork = FALSE;     // node is not yet on the network
//  585       }
//  586       ezModeData.initiator = FALSE;          // OnOffLight is a target
//  587       ezModeData.numActiveOutClusters = 0;
//  588       ezModeData.pActiveOutClusterIDs = NULL;
//  589       ezModeData.numActiveInClusters = 0;
//  590       ezModeData.pActiveOutClusterIDs = NULL;
//  591       zcl_InvokeEZMode( &ezModeData );
//  592     }
//  593 
//  594 #else // NOT EZ-Mode
//  595     {
//  596       zAddrType_t dstAddr;
//  597       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  598 
//  599       // Initiate an End Device Bind Request, this bind request will
//  600       // only use a cluster list that is important to binding.
//  601       dstAddr.addrMode = afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  602       dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  603       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
//  604                            SAMPLELIGHT_ENDPOINT,
//  605                            ZCL_HA_PROFILE_ID,
//  606                            ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
//  607                            0, NULL,   // No Outgoing clusters to bind
//  608                            TRUE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0,#bindingInClusters & 0xff
        MOV     ?V1,#(bindingInClusters >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0,#0x4
        MOV     ?V1,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R1,#0x8
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  609     }
//  610 #endif // ZCL_EZMODE
//  611 #endif // HAL_BOARD_ZLIGHT
//  612   }
//  613 
//  614   if ( keys & HAL_KEY_SW_3 )
??zclSampleLight_HandleKeys_3:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??zclSampleLight_HandleKeys_4
//  615   {
//  616     NLME_SendNetworkStatus( zclSampleLight_DstAddr.addr.shortAddr,
//  617                        NLME_GetShortAddr(), NWKSTAT_NONTREE_LINK_FAILURE, FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function NLME_SendNetworkStatus
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        MOV     DPTR,#zclSampleLight_DstAddr
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  618   }
//  619 
//  620   if ( keys & HAL_KEY_SW_4 )
??zclSampleLight_HandleKeys_4:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??zclSampleLight_HandleKeys_5
//  621   {
//  622     giLightScreenMode = LIGHT_MAINMODE;
        MOV     DPTR,#giLightScreenMode
        CLR     A
        MOVX    @DPTR,A
//  623 
//  624     if ( ( zclSampleLight_NwkState == DEV_ZB_COORD ) ||
//  625           ( zclSampleLight_NwkState == DEV_ROUTER ) )
        MOV     DPTR,#zclSampleLight_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??zclSampleLight_HandleKeys_6
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??zclSampleLight_HandleKeys_5
//  626     {
//  627       zAddrType_t tmpAddr;
//  628 
//  629       tmpAddr.addrMode = Addr16Bit;
??zclSampleLight_HandleKeys_6:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  630       tmpAddr.addr.shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  631 
//  632       // toggle permit join
//  633       gPermitDuration = gPermitDuration ? 0 : 0xff;
        MOV     DPTR,#gPermitDuration
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_7
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_8
??zclSampleLight_HandleKeys_7:
        MOV     A,#-0x1
??zclSampleLight_HandleKeys_8:
        MOVX    @DPTR,A
//  634 
//  635       // Trust Center significance is always true
//  636       ZDP_MgmtPermitJoinReq( &tmpAddr, gPermitDuration, TRUE, FALSE );
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV     R5,#0x0
        MOV     R4,#0x1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
//  637     }
//  638   }
//  639 
//  640   // Shift F5 does a Basic Reset (factory defaults)
//  641   if ( shift && ( keys & HAL_KEY_SW_5 ) )
??zclSampleLight_HandleKeys_5:
        MOV     A,R6
        JZ      ??zclSampleLight_HandleKeys_9
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleLight_HandleKeys_10
//  642   {
//  643     zclSampleLight_BasicResetCB();
        ; Setup parameters for call to function zclSampleLight_BasicResetCB
        LCALL   `??zclSampleLight_BasicResetCB::?relay`; Banked call to: zclSampleLight_BasicResetCB
        SJMP    ??zclSampleLight_HandleKeys_10
//  644   }
//  645   else if ( keys & HAL_KEY_SW_5 )
??zclSampleLight_HandleKeys_9:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclSampleLight_HandleKeys_10
//  646   {
//  647     giLightScreenMode = giLightScreenMode ? LIGHT_MAINMODE : LIGHT_HELPMODE;
        MOV     DPTR,#giLightScreenMode
        MOVX    A,@DPTR
        JZ      ??zclSampleLight_HandleKeys_11
        CLR     A
        SJMP    ??zclSampleLight_HandleKeys_12
??zclSampleLight_HandleKeys_11:
        MOV     A,#0x1
??zclSampleLight_HandleKeys_12:
        MOVX    @DPTR,A
//  648   }
//  649 
//  650   // update the display, including the light
//  651   zclSampleLight_LcdDisplayUpdate();
??zclSampleLight_HandleKeys_10:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  652 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock13
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock14
//  653 
//  654 /*********************************************************************
//  655  * @fn      zclSampleLight_LcdDisplayUpdate
//  656  *
//  657  * @brief   Called to update the LCD display.
//  658  *
//  659  * @param   none
//  660  *
//  661  * @return  none
//  662  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  663 void zclSampleLight_LcdDisplayUpdate( void )
zclSampleLight_LcdDisplayUpdate:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function zclSampleLight_LcdDisplayUpdate
        CODE
//  664 {
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_LcdDisplayUpdate, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  665 #ifdef LCD_SUPPORTED
//  666   if ( giLightScreenMode == LIGHT_HELPMODE )
//  667   {
//  668     zclSampleLight_LcdDisplayHelpMode();
//  669   }
//  670   else
//  671   {
//  672     zclSampleLight_LcdDisplayMainMode();
//  673   }
//  674 #endif
//  675 
//  676   zclSampleLight_DisplayLight();
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclSampleLight_LcdDisplayUpdate_0
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??zclSampleLight_LcdDisplayUpdate_1
??zclSampleLight_LcdDisplayUpdate_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??zclSampleLight_LcdDisplayUpdate_1:
        MOV     R1,#0x1
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
//  677 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock15
//  678 
//  679 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
//  680 /*********************************************************************
//  681  * @fn      zclSampleLight_UpdateLampLevel
//  682  *
//  683  * @brief   Update lamp level output with gamma compensation
//  684  *
//  685  * @param   level
//  686  *
//  687  * @return  none
//  688  */
//  689 void zclSampleLight_UpdateLampLevel( uint8 level )
//  690 
//  691 {
//  692   uint16 gammaCorrectedLevel;
//  693 
//  694   // gamma correct the level
//  695   gammaCorrectedLevel = (uint16) ( pow( ( (float)level / LEVEL_MAX ), (float)GAMMA_VALUE ) * (float)LEVEL_MAX);
//  696 
//  697   halTimer1SetChannelDuty(WHITE_LED, (uint16)(((uint32)gammaCorrectedLevel*PWM_FULL_DUTY_CYCLE)/LEVEL_MAX) );
//  698 }
//  699 #endif
//  700 
//  701 /*********************************************************************
//  702  * @fn      zclSampleLight_DisplayLight
//  703  *
//  704  * @brief   Displays current state of light on LED and also on main display if supported.
//  705  *
//  706  * @param   none
//  707  *
//  708  * @return  none
//  709  */
//  710 static void zclSampleLight_DisplayLight( void )
//  711 {
//  712   // set the LED1 based on light (on or off)
//  713   if ( zclSampleLight_OnOff == LIGHT_ON )
//  714   {
//  715     HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  716   }
//  717   else
//  718   {
//  719     HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  720   }
//  721 
//  722 #ifdef LCD_SUPPORTED
//  723   if (giLightScreenMode == LIGHT_MAINMODE)
//  724   {
//  725 #ifdef ZCL_LEVEL_CTRL
//  726     // display current light level
//  727     if ( ( zclSampleLight_LevelCurrentLevel == ATTR_LEVEL_MIN_LEVEL ) &&
//  728          ( zclSampleLight_OnOff == LIGHT_OFF ) )
//  729     {
//  730       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  731     }
//  732     else if ( ( zclSampleLight_LevelCurrentLevel >= ATTR_LEVEL_MAX_LEVEL ) ||
//  733               ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelOnLevel ) ||
//  734                ( ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT ) &&
//  735                  ( zclSampleLight_LevelCurrentLevel == zclSampleLight_LevelLastLevel ) ) )
//  736     {
//  737       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  738     }
//  739     else    // "    LEVEL ###"
//  740     {
//  741       zclHA_uint8toa( zclSampleLight_LevelCurrentLevel, &sLightLevel[10] );
//  742       HalLcdWriteString( (char *)sLightLevel, HAL_LCD_LINE_2 );
//  743     }
//  744 #else
//  745     if ( zclSampleLight_OnOff )
//  746     {
//  747       HalLcdWriteString( (char *)sLightOn, HAL_LCD_LINE_2 );
//  748     }
//  749     else
//  750     {
//  751       HalLcdWriteString( (char *)sLightOff, HAL_LCD_LINE_2 );
//  752     }
//  753 #endif // ZCL_LEVEL_CTRL
//  754   }
//  755 #endif // LCD_SUPPORTED
//  756 }
//  757 
//  758 #ifdef LCD_SUPPORTED
//  759 /*********************************************************************
//  760  * @fn      zclSampleLight_LcdDisplayMainMode
//  761  *
//  762  * @brief   Called to display the main screen on the LCD.
//  763  *
//  764  * @param   none
//  765  *
//  766  * @return  none
//  767  */
//  768 static void zclSampleLight_LcdDisplayMainMode( void )
//  769 {
//  770   // display line 1 to indicate NWK status
//  771   if ( zclSampleLight_NwkState == DEV_ZB_COORD )
//  772   {
//  773     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZC );
//  774   }
//  775   else if ( zclSampleLight_NwkState == DEV_ROUTER )
//  776   {
//  777     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZR );
//  778   }
//  779   else if ( zclSampleLight_NwkState == DEV_END_DEVICE )
//  780   {
//  781     zclHA_LcdStatusLine1( ZCL_HA_STATUSLINE_ZED );
//  782   }
//  783 
//  784   // end of line 3 displays permit join status (*)
//  785   if ( gPermitDuration )
//  786   {
//  787     sSwHelp[15] = '*';
//  788   }
//  789   else
//  790   {
//  791     sSwHelp[15] = ' ';
//  792   }
//  793   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  794 }
//  795 
//  796 /*********************************************************************
//  797  * @fn      zclSampleLight_LcdDisplayHelpMode
//  798  *
//  799  * @brief   Called to display the SW options on the LCD.
//  800  *
//  801  * @param   none
//  802  *
//  803  * @return  none
//  804  */
//  805 static void zclSampleLight_LcdDisplayHelpMode( void )
//  806 {
//  807   HalLcdWriteString( (char *)sSwLight, HAL_LCD_LINE_1 );
//  808   HalLcdWriteString( (char *)sSwEZMode, HAL_LCD_LINE_2 );
//  809   HalLcdWriteString( (char *)sSwHelp, HAL_LCD_LINE_3 );
//  810 }
//  811 #endif  // LCD_SUPPORTED
//  812 
//  813 /*********************************************************************
//  814  * @fn      zclSampleLight_ProcessIdentifyTimeChange
//  815  *
//  816  * @brief   Called to process any change to the IdentifyTime attribute.
//  817  *
//  818  * @param   none
//  819  *
//  820  * @return  none
//  821  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  822 static void zclSampleLight_ProcessIdentifyTimeChange( void )
zclSampleLight_ProcessIdentifyTimeChange:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function zclSampleLight_ProcessIdentifyTimeChange
        CODE
//  823 {
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  824   if ( zclSampleLight_IdentifyTime > 0 )
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSampleLight_ProcessIdentifyTimeChange_0
//  825   {
//  826     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  827     HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x8
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
        SJMP    ??zclSampleLight_ProcessIdentifyTimeChange_1
//  828   }
//  829   else
//  830   {
//  831 #ifdef ZCL_EZMODE
//  832     if ( zclSampleLight_IdentifyCommissionState & EZMODE_COMMISSION_OPERATIONAL )
//  833     {
//  834       HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
//  835     }
//  836     else
//  837     {
//  838       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  839     }
//  840 #endif
//  841 
//  842     osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT );
??zclSampleLight_ProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclSampleLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
//  843   }
//  844 }
??zclSampleLight_ProcessIdentifyTimeChange_1:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock16
//  845 
//  846 /*********************************************************************
//  847  * @fn      zclSampleLight_BasicResetCB
//  848  *
//  849  * @brief   Callback from the ZCL General Cluster Library
//  850  *          to set all the Basic Cluster attributes to default values.
//  851  *
//  852  * @param   none
//  853  *
//  854  * @return  none
//  855  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  856 static void zclSampleLight_BasicResetCB( void )
zclSampleLight_BasicResetCB:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function zclSampleLight_BasicResetCB
        CODE
//  857 {
        FUNCALL zclSampleLight_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, zgWriteStartupOptions
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, NLME_LeaveReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_BasicResetCB, ZDApp_LeaveReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 5, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 5, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 5)
//  858   NLME_LeaveReq_t leaveReq;
//  859   // Set every field to 0
//  860   osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  861 
//  862   // This will enable the device to rejoin the network after reset.
//  863   leaveReq.rejoin = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  864 
//  865   // Set the NV startup option to force a "new" join.
//  866   zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  867 
//  868   // Leave the network, and reset afterwards
//  869   if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        JZ      ??zclSampleLight_BasicResetCB_0
//  870   {
//  871     // Couldn't send out leave; prepare to reset anyway
//  872     ZDApp_LeaveReset( FALSE );
        ; Setup parameters for call to function ZDApp_LeaveReset
        MOV     R1,#0x0
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
//  873   }
//  874 }
??zclSampleLight_BasicResetCB_0:
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock17
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock18
//  875 
//  876 /*********************************************************************
//  877  * @fn      zclSampleLight_IdentifyCB
//  878  *
//  879  * @brief   Callback from the ZCL General Cluster Library when
//  880  *          it received an Identity Command for this application.
//  881  *
//  882  * @param   srcAddr - source address and endpoint of the response message
//  883  * @param   identifyTime - the number of seconds to identify yourself
//  884  *
//  885  * @return  none
//  886  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  887 static void zclSampleLight_IdentifyCB( zclIdentify_t *pCmd )
zclSampleLight_IdentifyCB:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyCB
        CODE
//  888 {
        FUNCALL zclSampleLight_IdentifyCB, zclSampleLight_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  889   zclSampleLight_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     DPTR,#zclSampleLight_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  890   zclSampleLight_ProcessIdentifyTimeChange();
        ; Setup parameters for call to function zclSampleLight_ProcessIdentifyTimeChange
        LCALL   `??zclSampleLight_ProcessIdentifyTimeChange::?re`; Banked call to: zclSampleLight_ProcessIdentifyTimeChange
//  891 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock19
//  892 
//  893 /*********************************************************************
//  894  * @fn      zclSampleLight_IdentifyQueryRspCB
//  895  *
//  896  * @brief   Callback from the ZCL General Cluster Library when
//  897  *          it received an Identity Query Response Command for this application.
//  898  *
//  899  * @param   srcAddr - requestor's address
//  900  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  901  *
//  902  * @return  none
//  903  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  904 static void zclSampleLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclSampleLight_IdentifyQueryRspCB:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclSampleLight_IdentifyQueryRspCB
        CODE
//  905 {
        ; Saved register size: 0
        ; Auto size: 0
//  906   (void)pRsp;
//  907 #ifdef ZCL_EZMODE
//  908   {
//  909     zclEZMode_ActionData_t data;
//  910     data.pIdentifyQueryRsp = pRsp;
//  911     zcl_EZModeAction ( EZMODE_ACTION_IDENTIFY_QUERY_RSP, &data );
//  912   }
//  913 #endif
//  914 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock20
//  915 
//  916 /*********************************************************************
//  917  * @fn      zclSampleLight_OnOffCB
//  918  *
//  919  * @brief   Callback from the ZCL General Cluster Library when
//  920  *          it received an On/Off Command for this application.
//  921  *
//  922  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  923  *
//  924  * @return  none
//  925  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  926 static void zclSampleLight_OnOffCB( uint8 cmd )
zclSampleLight_OnOffCB:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function zclSampleLight_OnOffCB
        CODE
//  927 {
        FUNCALL zclSampleLight_OnOffCB, zcl_getRawAFMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSampleLight_OnOffCB, zclSampleLight_LcdDisplayUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  928   afIncomingMSGPacket_t *pPtr = zcl_getRawAFMsg();
        ; Setup parameters for call to function zcl_getRawAFMsg
        LCALL   `??zcl_getRawAFMsg::?relay`; Banked call to: zcl_getRawAFMsg
        MOV     DPL,R2
        MOV     DPH,R3
//  929 
//  930   zclSampleLight_DstAddr.addr.shortAddr = pPtr->srcAddr.addr.shortAddr;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine4_0 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     DPTR,#zclSampleLight_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  931 
//  932   zclReportCmd_t rptcmd; //update 9/12/2016
//  933   
//  934   // Turn on the light
//  935   if ( cmd == COMMAND_ON )
        MOV     A,#0x1
        XRL     A,R6
        JZ      ??zclSampleLight_OnOffCB_0
//  936   {
//  937     zclSampleLight_OnOff = LIGHT_ON;
//  938   }
//  939   // Turn off the light
//  940   else if ( cmd == COMMAND_OFF )
        MOV     A,R6
        JZ      ??zclSampleLight_OnOffCB_1
//  941   {
//  942     zclSampleLight_OnOff = LIGHT_OFF;
//  943   }
//  944   // Toggle the light
//  945   else if ( cmd == COMMAND_TOGGLE )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclSampleLight_OnOffCB_2
//  946   {
//  947     if ( zclSampleLight_OnOff == LIGHT_OFF )
        MOV     DPTR,#zclSampleLight_OnOff
        MOVX    A,@DPTR
        JNZ     ??zclSampleLight_OnOffCB_1
//  948     {
//  949       zclSampleLight_OnOff = LIGHT_ON;
??zclSampleLight_OnOffCB_0:
        MOV     DPTR,#zclSampleLight_OnOff
        MOV     A,#0x1
        SJMP    ??zclSampleLight_OnOffCB_3
//  950     }
//  951     else
//  952     {
//  953       zclSampleLight_OnOff = LIGHT_OFF;
??zclSampleLight_OnOffCB_1:
        MOV     DPTR,#zclSampleLight_OnOff
        CLR     A
??zclSampleLight_OnOffCB_3:
        MOVX    @DPTR,A
//  954     }
//  955   }
//  956 
//  957 #if ZCL_LEVEL_CTRL
//  958   zclSampleLight_DefaultMove( );
//  959 #endif
//  960   
//  961   //upate 9/12/2016
//  962 //  rptcmd.numAttr = 1;
//  963 //  rptcmd.attrList[0].attrID = ATTRID_ON_OFF;
//  964 //  rptcmd.attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
//  965 //  rptcmd.attrList[0].attrData = (uint8*)&zclSampleLight_OnOff;
//  966 //
//  967 //  // Set destination address to indirect
//  968 //  zclSampleLight_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  969 //  zclSampleLight_DstAddr.addr.shortAddr = 0;
//  970 //  zcl_SendReportCmd(SAMPLELIGHT_ENDPOINT,&zclSampleLight_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, &rptcmd, ZCL_FRAME_CLIENT_SERVER_DIR, false, 0 );
//  971   //end update
//  972   
//  973   // update the display
//  974   zclSampleLight_LcdDisplayUpdate( );
??zclSampleLight_OnOffCB_2:
        ; Setup parameters for call to function zclSampleLight_LcdDisplayUpdate
        LCALL   `??zclSampleLight_LcdDisplayUpdate::?relay`; Banked call to: zclSampleLight_LcdDisplayUpdate
//  975 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock21

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for bindingInClusters>`:
        DATA16
        DW 6

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sampleLight_TestEp>`:
        DATA8
        DB 8
        DATA16
        DW zclSampleLight_TaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_NwkState>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclSampleLight_CmdCallbacks>`:
        DATA16
        DW `??zclSampleLight_BasicResetCB::?relay`
        DW `??zclSampleLight_IdentifyCB::?relay`
        DW 0H
        DW `??zclSampleLight_IdentifyQueryRspCB::?relay`
        DW `??zclSampleLight_OnOffCB::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_LcdDisplayUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_LcdDisplayUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_ProcessIdentifyTimeChange::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_BasicResetCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_IdentifyQueryRspCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSampleLight_OnOffCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSampleLight_OnOffCB

        END
//  976 
//  977 #ifdef ZCL_LEVEL_CTRL
//  978 /*********************************************************************
//  979  * @fn      zclSampleLight_TimeRateHelper
//  980  *
//  981  * @brief   Calculate time based on rate, and startup level state machine
//  982  *
//  983  * @param   newLevel - new level for current level
//  984  *
//  985  * @return  diff (directly), zclSampleLight_CurrentLevel32 and zclSampleLight_NewLevel, zclSampleLight_NewLevelUp
//  986  */
//  987 static uint32 zclSampleLight_TimeRateHelper( uint8 newLevel )
//  988 {
//  989   uint32 diff;
//  990   uint32 newLevel32;
//  991 
//  992   // remember current and new level
//  993   zclSampleLight_NewLevel = newLevel;
//  994   zclSampleLight_CurrentLevel32 = (uint32)1000 * zclSampleLight_LevelCurrentLevel;
//  995 
//  996   // calculate diff
//  997   newLevel32 = (uint32)1000 * newLevel;
//  998   if ( zclSampleLight_LevelCurrentLevel > newLevel )
//  999   {
// 1000     diff = zclSampleLight_CurrentLevel32 - newLevel32;
// 1001     zclSampleLight_NewLevelUp = FALSE;  // moving down
// 1002   }
// 1003   else
// 1004   {
// 1005     diff = newLevel32 - zclSampleLight_CurrentLevel32;
// 1006     zclSampleLight_NewLevelUp = TRUE;   // moving up
// 1007   }
// 1008 
// 1009   return ( diff );
// 1010 }
// 1011 
// 1012 /*********************************************************************
// 1013  * @fn      zclSampleLight_MoveBasedOnRate
// 1014  *
// 1015  * @brief   Calculate time based on rate, and startup level state machine
// 1016  *
// 1017  * @param   newLevel - new level for current level
// 1018  * @param   rate16   - fixed point rate (e.g. 16.123)
// 1019  *
// 1020  * @return  none
// 1021  */
// 1022 static void zclSampleLight_MoveBasedOnRate( uint8 newLevel, uint32 rate )
// 1023 {
// 1024   uint32 diff;
// 1025 
// 1026   // determine how much time (in 10ths of seconds) based on the difference and rate
// 1027   zclSampleLight_Rate32 = rate;
// 1028   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1029   zclSampleLight_LevelRemainingTime = diff / rate;
// 1030   if ( !zclSampleLight_LevelRemainingTime )
// 1031   {
// 1032     zclSampleLight_LevelRemainingTime = 1;
// 1033   }
// 1034 
// 1035   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1036 }
// 1037 
// 1038 /*********************************************************************
// 1039  * @fn      zclSampleLight_MoveBasedOnTime
// 1040  *
// 1041  * @brief   Calculate rate based on time, and startup level state machine
// 1042  *
// 1043  * @param   newLevel  - new level for current level
// 1044  * @param   time      - in 10ths of seconds
// 1045  *
// 1046  * @return  none
// 1047  */
// 1048 static void zclSampleLight_MoveBasedOnTime( uint8 newLevel, uint16 time )
// 1049 {
// 1050   uint16 diff;
// 1051 
// 1052   // determine rate (in units) based on difference and time
// 1053   diff = zclSampleLight_TimeRateHelper( newLevel );
// 1054   zclSampleLight_LevelRemainingTime = zclSampleLight_GetTime( newLevel, time );
// 1055   zclSampleLight_Rate32 = diff / time;
// 1056 
// 1057   osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1058 }
// 1059 
// 1060 /*********************************************************************
// 1061  * @fn      zclSampleLight_GetTime
// 1062  *
// 1063  * @brief   Determine amount of time that MoveXXX will take to complete.
// 1064  *
// 1065  * @param   level = new level to move to
// 1066  *          time  = 0xffff=default, or 0x0000-n amount of time in tenths of seconds.
// 1067  *
// 1068  * @return  none
// 1069  */
// 1070 static uint16 zclSampleLight_GetTime( uint8 level, uint16 time )
// 1071 {
// 1072   // there is a hiearchy of the amount of time to use for transistioning
// 1073   // check each one in turn. If none of defaults are set, then use fastest
// 1074   // time possible.
// 1075   if ( time == 0xFFFF )
// 1076   {
// 1077     // use On or Off Transition Time if set (not 0xffff)
// 1078     if ( zclSampleLight_OnOff == LIGHT_ON )
// 1079     {
// 1080       time = zclSampleLight_LevelOffTransitionTime;
// 1081     }
// 1082     else
// 1083     {
// 1084       time = zclSampleLight_LevelOnTransitionTime;
// 1085     }
// 1086 
// 1087     // else use OnOffTransitionTime if set (not 0xffff)
// 1088     if ( time == 0xFFFF )
// 1089     {
// 1090       time = zclSampleLight_LevelOnOffTransitionTime;
// 1091     }
// 1092 
// 1093     // else as fast as possible
// 1094     if ( time == 0xFFFF )
// 1095     {
// 1096       time = 1;
// 1097     }
// 1098   }
// 1099 
// 1100   if ( !time )
// 1101   {
// 1102     time = 1; // as fast as possible
// 1103   }
// 1104 
// 1105   return ( time );
// 1106 }
// 1107 
// 1108 /*********************************************************************
// 1109  * @fn      zclSampleLight_DefaultMove
// 1110  *
// 1111  * @brief   We were turned on/off. Use default time to move to on or off.
// 1112  *
// 1113  * @param   zclSampleLight_OnOff - must be set prior to calling this function.
// 1114  *
// 1115  * @return  none
// 1116  */
// 1117 static void zclSampleLight_DefaultMove( void )
// 1118 {
// 1119   uint8  newLevel;
// 1120   uint32 rate;      // fixed point decimal (3 places, eg. 16.345)
// 1121   uint16 time;
// 1122 
// 1123   // if moving to on position, move to on level
// 1124   if ( zclSampleLight_OnOff )
// 1125   {
// 1126     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1127     {
// 1128       // The last Level (before going OFF) should be used)
// 1129       newLevel = zclSampleLight_LevelLastLevel;
// 1130     }
// 1131     else
// 1132     {
// 1133       newLevel = zclSampleLight_LevelOnLevel;
// 1134     }
// 1135 
// 1136     time = zclSampleLight_LevelOnTransitionTime;
// 1137   }
// 1138   else
// 1139   {
// 1140     newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1141 
// 1142     if ( zclSampleLight_LevelOnLevel == ATTR_LEVEL_ON_LEVEL_NO_EFFECT )
// 1143     {
// 1144       // Save the current Level before going OFF to use it when the light turns ON
// 1145       // it should be back to this level
// 1146       zclSampleLight_LevelLastLevel = zclSampleLight_LevelCurrentLevel;
// 1147     }
// 1148 
// 1149     time = zclSampleLight_LevelOffTransitionTime;
// 1150   }
// 1151 
// 1152   // else use OnOffTransitionTime if set (not 0xffff)
// 1153   if ( time == 0xFFFF )
// 1154   {
// 1155     time = zclSampleLight_LevelOnOffTransitionTime;
// 1156   }
// 1157 
// 1158   // else as fast as possible
// 1159   if ( time == 0xFFFF )
// 1160   {
// 1161     time = 1;
// 1162   }
// 1163 
// 1164   // calculate rate based on time (int 10ths) for full transition (1-254)
// 1165   rate = 255000 / time;    // units per tick, fixed point, 3 decimal places (e.g. 8500 = 8.5 units per tick)
// 1166 
// 1167   // start up state machine.
// 1168   zclSampleLight_WithOnOff = TRUE;
// 1169   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1170 }
// 1171 
// 1172 /*********************************************************************
// 1173  * @fn      zclSampleLight_AdjustLightLevel
// 1174  *
// 1175  * @brief   Called each 10th of a second while state machine running
// 1176  *
// 1177  * @param   none
// 1178  *
// 1179  * @return  none
// 1180  */
// 1181 static void zclSampleLight_AdjustLightLevel( void )
// 1182 {
// 1183   // one tick (10th of a second) less
// 1184   if ( zclSampleLight_LevelRemainingTime )
// 1185   {
// 1186     --zclSampleLight_LevelRemainingTime;
// 1187   }
// 1188 
// 1189   // no time left, done
// 1190   if ( zclSampleLight_LevelRemainingTime == 0)
// 1191   {
// 1192     zclSampleLight_LevelCurrentLevel = zclSampleLight_NewLevel;
// 1193   }
// 1194 
// 1195   // still time left, keep increment/decrementing
// 1196   else
// 1197   {
// 1198     if ( zclSampleLight_NewLevelUp )
// 1199     {
// 1200       zclSampleLight_CurrentLevel32 += zclSampleLight_Rate32;
// 1201     }
// 1202     else
// 1203     {
// 1204       zclSampleLight_CurrentLevel32 -= zclSampleLight_Rate32;
// 1205     }
// 1206     zclSampleLight_LevelCurrentLevel = (uint8)( zclSampleLight_CurrentLevel32 / 1000 );
// 1207   }
// 1208 
// 1209 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1210   zclSampleLight_UpdateLampLevel(zclSampleLight_LevelCurrentLevel);
// 1211 #endif
// 1212 
// 1213   // also affect on/off
// 1214   if ( zclSampleLight_WithOnOff )
// 1215   {
// 1216     if ( zclSampleLight_LevelCurrentLevel > ATTR_LEVEL_MIN_LEVEL )
// 1217     {
// 1218       zclSampleLight_OnOff = LIGHT_ON;
// 1219 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1220       ENABLE_LAMP;
// 1221 #endif
// 1222     }
// 1223     else
// 1224     {
// 1225       zclSampleLight_OnOff = LIGHT_OFF;
// 1226 #if (defined HAL_BOARD_ZLIGHT) || (defined HAL_PWM)
// 1227       DISABLE_LAMP;
// 1228 #endif
// 1229     }
// 1230   }
// 1231 
// 1232   // display light level as we go
// 1233   zclSampleLight_DisplayLight( );
// 1234 
// 1235   // keep ticking away
// 1236   if ( zclSampleLight_LevelRemainingTime )
// 1237   {
// 1238     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT, 100 );
// 1239   }
// 1240 }
// 1241 
// 1242 /*********************************************************************
// 1243  * @fn      zclSampleLight_LevelControlMoveToLevelCB
// 1244  *
// 1245  * @brief   Callback from the ZCL General Cluster Library when
// 1246  *          it received a LevelControlMoveToLevel Command for this application.
// 1247  *
// 1248  * @param   pCmd - ZigBee command parameters
// 1249  *
// 1250  * @return  none
// 1251  */
// 1252 static void zclSampleLight_LevelControlMoveToLevelCB( zclLCMoveToLevel_t *pCmd )
// 1253 {
// 1254   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1255   zclSampleLight_MoveBasedOnTime( pCmd->level, pCmd->transitionTime );
// 1256 }
// 1257 
// 1258 /*********************************************************************
// 1259  * @fn      zclSampleLight_LevelControlMoveCB
// 1260  *
// 1261  * @brief   Callback from the ZCL General Cluster Library when
// 1262  *          it received a LevelControlMove Command for this application.
// 1263  *
// 1264  * @param   pCmd - ZigBee command parameters
// 1265  *
// 1266  * @return  none
// 1267  */
// 1268 static void zclSampleLight_LevelControlMoveCB( zclLCMove_t *pCmd )
// 1269 {
// 1270   uint8 newLevel;
// 1271   uint32 rate;
// 1272 
// 1273   // convert rate from units per second to units per tick (10ths of seconds)
// 1274   // and move at that right up or down
// 1275   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1276 
// 1277   if ( pCmd->moveMode == LEVEL_MOVE_UP )
// 1278   {
// 1279     newLevel = ATTR_LEVEL_MAX_LEVEL;  // fully on
// 1280   }
// 1281   else
// 1282   {
// 1283     newLevel = ATTR_LEVEL_MIN_LEVEL; // fully off
// 1284   }
// 1285 
// 1286   rate = (uint32)100 * pCmd->rate;
// 1287   zclSampleLight_MoveBasedOnRate( newLevel, rate );
// 1288 }
// 1289 
// 1290 /*********************************************************************
// 1291  * @fn      zclSampleLight_LevelControlStepCB
// 1292  *
// 1293  * @brief   Callback from the ZCL General Cluster Library when
// 1294  *          it received an On/Off Command for this application.
// 1295  *
// 1296  * @param   pCmd - ZigBee command parameters
// 1297  *
// 1298  * @return  none
// 1299  */
// 1300 static void zclSampleLight_LevelControlStepCB( zclLCStep_t *pCmd )
// 1301 {
// 1302   uint8 newLevel;
// 1303 
// 1304   // determine new level, but don't exceed boundaries
// 1305   if ( pCmd->stepMode == LEVEL_MOVE_UP )
// 1306   {
// 1307     if ( (uint16)zclSampleLight_LevelCurrentLevel + pCmd->amount > ATTR_LEVEL_MAX_LEVEL )
// 1308     {
// 1309       newLevel = ATTR_LEVEL_MAX_LEVEL;
// 1310     }
// 1311     else
// 1312     {
// 1313       newLevel = zclSampleLight_LevelCurrentLevel + pCmd->amount;
// 1314     }
// 1315   }
// 1316   else
// 1317   {
// 1318     if ( pCmd->amount >= zclSampleLight_LevelCurrentLevel )
// 1319     {
// 1320       newLevel = ATTR_LEVEL_MIN_LEVEL;
// 1321     }
// 1322     else
// 1323     {
// 1324       newLevel = zclSampleLight_LevelCurrentLevel - pCmd->amount;
// 1325     }
// 1326   }
// 1327 
// 1328   // move to the new level
// 1329   zclSampleLight_WithOnOff = pCmd->withOnOff;
// 1330   zclSampleLight_MoveBasedOnTime( newLevel, pCmd->transitionTime );
// 1331 }
// 1332 
// 1333 /*********************************************************************
// 1334  * @fn      zclSampleLight_LevelControlStopCB
// 1335  *
// 1336  * @brief   Callback from the ZCL General Cluster Library when
// 1337  *          it received an Level Control Stop Command for this application.
// 1338  *
// 1339  * @param   pCmd - ZigBee command parameters
// 1340  *
// 1341  * @return  none
// 1342  */
// 1343 static void zclSampleLight_LevelControlStopCB( void )
// 1344 {
// 1345   // stop immediately
// 1346   osal_stop_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_LEVEL_CTRL_EVT );
// 1347   zclSampleLight_LevelRemainingTime = 0;
// 1348 }
// 1349 #endif
// 1350 
// 1351 /******************************************************************************
// 1352  *
// 1353  *  Functions for processing ZCL Foundation incoming Command/Response messages
// 1354  *
// 1355  *****************************************************************************/
// 1356 
// 1357 /*********************************************************************
// 1358  * @fn      zclSampleLight_ProcessIncomingMsg
// 1359  *
// 1360  * @brief   Process ZCL Foundation incoming message
// 1361  *
// 1362  * @param   pInMsg - pointer to the received message
// 1363  *
// 1364  * @return  none
// 1365  */
// 1366 static void zclSampleLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
// 1367 {
// 1368   switch ( pInMsg->zclHdr.commandID )
// 1369   {
// 1370 #ifdef ZCL_READ
// 1371     case ZCL_CMD_READ_RSP:
// 1372       zclSampleLight_ProcessInReadRspCmd( pInMsg );
// 1373       break;
// 1374 #endif
// 1375 #ifdef ZCL_WRITE
// 1376     case ZCL_CMD_WRITE_RSP:
// 1377       zclSampleLight_ProcessInWriteRspCmd( pInMsg );
// 1378       break;
// 1379 #endif
// 1380 #ifdef ZCL_REPORT
// 1381     // Attribute Reporting implementation should be added here
// 1382     case ZCL_CMD_CONFIG_REPORT:
// 1383       // zclSampleLight_ProcessInConfigReportCmd( pInMsg );
// 1384       break;
// 1385 
// 1386     case ZCL_CMD_CONFIG_REPORT_RSP:
// 1387       // zclSampleLight_ProcessInConfigReportRspCmd( pInMsg );
// 1388       break;
// 1389 
// 1390     case ZCL_CMD_READ_REPORT_CFG:
// 1391       // zclSampleLight_ProcessInReadReportCfgCmd( pInMsg );
// 1392       break;
// 1393 
// 1394     case ZCL_CMD_READ_REPORT_CFG_RSP:
// 1395       // zclSampleLight_ProcessInReadReportCfgRspCmd( pInMsg );
// 1396       break;
// 1397 
// 1398     case ZCL_CMD_REPORT:
// 1399       // zclSampleLight_ProcessInReportCmd( pInMsg );
// 1400       break;
// 1401 #endif
// 1402     case ZCL_CMD_DEFAULT_RSP:
// 1403       zclSampleLight_ProcessInDefaultRspCmd( pInMsg );
// 1404       break;
// 1405 #ifdef ZCL_DISCOVER
// 1406     case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
// 1407       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1408       break;
// 1409 
// 1410     case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
// 1411       zclSampleLight_ProcessInDiscCmdsRspCmd( pInMsg );
// 1412       break;
// 1413 
// 1414     case ZCL_CMD_DISCOVER_ATTRS_RSP:
// 1415       zclSampleLight_ProcessInDiscAttrsRspCmd( pInMsg );
// 1416       break;
// 1417 
// 1418     case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
// 1419       zclSampleLight_ProcessInDiscAttrsExtRspCmd( pInMsg );
// 1420       break;
// 1421 #endif
// 1422     default:
// 1423       break;
// 1424   }
// 1425 
// 1426   if ( pInMsg->attrCmd )
// 1427     osal_mem_free( pInMsg->attrCmd );
// 1428 }
// 1429 
// 1430 #ifdef ZCL_READ
// 1431 /*********************************************************************
// 1432  * @fn      zclSampleLight_ProcessInReadRspCmd
// 1433  *
// 1434  * @brief   Process the "Profile" Read Response Command
// 1435  *
// 1436  * @param   pInMsg - incoming message to process
// 1437  *
// 1438  * @return  none
// 1439  */
// 1440 static uint8 zclSampleLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
// 1441 {
// 1442   zclReadRspCmd_t *readRspCmd;
// 1443   uint8 i;
// 1444 
// 1445   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
// 1446   for (i = 0; i < readRspCmd->numAttr; i++)
// 1447   {
// 1448     // Notify the originator of the results of the original read attributes
// 1449     // attempt and, for each successfull request, the value of the requested
// 1450     // attribute
// 1451     
// 1452   }
// 1453 
// 1454   return ( TRUE );
// 1455 }
// 1456 #endif // ZCL_READ
// 1457 
// 1458 #ifdef ZCL_WRITE
// 1459 /*********************************************************************
// 1460  * @fn      zclSampleLight_ProcessInWriteRspCmd
// 1461  *
// 1462  * @brief   Process the "Profile" Write Response Command
// 1463  *
// 1464  * @param   pInMsg - incoming message to process
// 1465  *
// 1466  * @return  none
// 1467  */
// 1468 static uint8 zclSampleLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
// 1469 {
// 1470   zclWriteRspCmd_t *writeRspCmd;
// 1471   uint8 i;
// 1472 
// 1473   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
// 1474   for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1475   {
// 1476     // Notify the device of the results of the its original write attributes
// 1477     // command.
// 1478   }
// 1479 
// 1480   return ( TRUE );
// 1481 }
// 1482 #endif // ZCL_WRITE
// 1483 
// 1484 /*********************************************************************
// 1485  * @fn      zclSampleLight_ProcessInDefaultRspCmd
// 1486  *
// 1487  * @brief   Process the "Profile" Default Response Command
// 1488  *
// 1489  * @param   pInMsg - incoming message to process
// 1490  *
// 1491  * @return  none
// 1492  */
// 1493 static uint8 zclSampleLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
// 1494 {
// 1495   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
// 1496 
// 1497   // Device is notified of the Default Response command.
// 1498   (void)pInMsg;
// 1499 
// 1500   return ( TRUE );
// 1501 }
// 1502 
// 1503 #ifdef ZCL_DISCOVER
// 1504 /*********************************************************************
// 1505  * @fn      zclSampleLight_ProcessInDiscCmdsRspCmd
// 1506  *
// 1507  * @brief   Process the Discover Commands Response Command
// 1508  *
// 1509  * @param   pInMsg - incoming message to process
// 1510  *
// 1511  * @return  none
// 1512  */
// 1513 static uint8 zclSampleLight_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
// 1514 {
// 1515   zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
// 1516   uint8 i;
// 1517 
// 1518   discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
// 1519   for ( i = 0; i < discoverRspCmd->numCmd; i++ )
// 1520   {
// 1521     // Device is notified of the result of its attribute discovery command.
// 1522   }
// 1523 
// 1524   return ( TRUE );
// 1525 }
// 1526 
// 1527 /*********************************************************************
// 1528  * @fn      zclSampleLight_ProcessInDiscAttrsRspCmd
// 1529  *
// 1530  * @brief   Process the "Profile" Discover Attributes Response Command
// 1531  *
// 1532  * @param   pInMsg - incoming message to process
// 1533  *
// 1534  * @return  none
// 1535  */
// 1536 static uint8 zclSampleLight_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
// 1537 {
// 1538   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
// 1539   uint8 i;
// 1540 
// 1541   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
// 1542   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1543   {
// 1544     // Device is notified of the result of its attribute discovery command.
// 1545   }
// 1546 
// 1547   return ( TRUE );
// 1548 }
// 1549 
// 1550 /*********************************************************************
// 1551  * @fn      zclSampleLight_ProcessInDiscAttrsExtRspCmd
// 1552  *
// 1553  * @brief   Process the "Profile" Discover Attributes Extended Response Command
// 1554  *
// 1555  * @param   pInMsg - incoming message to process
// 1556  *
// 1557  * @return  none
// 1558  */
// 1559 static uint8 zclSampleLight_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
// 1560 {
// 1561   zclDiscoverAttrsExtRsp_t *discoverRspCmd;
// 1562   uint8 i;
// 1563 
// 1564   discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
// 1565   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
// 1566   {
// 1567     // Device is notified of the result of its attribute discovery command.
// 1568   }
// 1569 
// 1570   return ( TRUE );
// 1571 }
// 1572 #endif // ZCL_DISCOVER
// 1573 
// 1574 #if ZCL_EZMODE
// 1575 /*********************************************************************
// 1576  * @fn      zclSampleLight_ProcessZDOMsgs
// 1577  *
// 1578  * @brief   Called when this node receives a ZDO/ZDP response.
// 1579  *
// 1580  * @param   none
// 1581  *
// 1582  * @return  status
// 1583  */
// 1584 static void zclSampleLight_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
// 1585 {
// 1586   zclEZMode_ActionData_t data;
// 1587   ZDO_MatchDescRsp_t *pMatchDescRsp;
// 1588 
// 1589   // Let EZ-Mode know of the Simple Descriptor Response
// 1590   if ( pMsg->clusterID == Match_Desc_rsp )
// 1591   {
// 1592     pMatchDescRsp = ZDO_ParseEPListRsp( pMsg );
// 1593     data.pMatchDescRsp = pMatchDescRsp;
// 1594     zcl_EZModeAction( EZMODE_ACTION_MATCH_DESC_RSP, &data );
// 1595     osal_mem_free( pMatchDescRsp );
// 1596   }
// 1597 }
// 1598 
// 1599 /*********************************************************************
// 1600  * @fn      zclSampleLight_EZModeCB
// 1601  *
// 1602  * @brief   The Application is informed of events. This can be used to show on the UI what is
// 1603 *           going on during EZ-Mode steering/finding/binding.
// 1604  *
// 1605  * @param   state - an
// 1606  *
// 1607  * @return  none
// 1608  */
// 1609 static void zclSampleLight_EZModeCB( zlcEZMode_State_t state, zclEZMode_CBData_t *pData )
// 1610 {
// 1611 #ifdef LCD_SUPPORTED
// 1612   char *pStr;
// 1613   uint8 err;
// 1614 #endif
// 1615 
// 1616   // time to go into identify mode
// 1617   if ( state == EZMODE_STATE_IDENTIFYING )
// 1618   {
// 1619 #ifdef LCD_SUPPORTED
// 1620     HalLcdWriteString( "EZMode", HAL_LCD_LINE_2 );
// 1621 #endif
// 1622 
// 1623     zclSampleLight_IdentifyTime = ( EZMODE_TIME / 1000 );  // convert to seconds
// 1624     zclSampleLight_ProcessIdentifyTimeChange();
// 1625   }
// 1626 
// 1627   // autoclosing, show what happened (success, cancelled, etc...)
// 1628   if( state == EZMODE_STATE_AUTOCLOSE )
// 1629   {
// 1630 #ifdef LCD_SUPPORTED
// 1631     pStr = NULL;
// 1632     err = pData->sAutoClose.err;
// 1633     if ( err == EZMODE_ERR_SUCCESS )
// 1634     {
// 1635       pStr = "EZMode: Success";
// 1636     }
// 1637     else if ( err == EZMODE_ERR_NOMATCH )
// 1638     {
// 1639       pStr = "EZMode: NoMatch"; // not a match made in heaven
// 1640     }
// 1641     if ( pStr )
// 1642     {
// 1643       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1644       {
// 1645         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1646       }
// 1647     }
// 1648 #endif
// 1649   }
// 1650 
// 1651   // finished, either show DstAddr/EP, or nothing (depending on success or not)
// 1652   if( state == EZMODE_STATE_FINISH )
// 1653   {
// 1654     // turn off identify mode
// 1655     zclSampleLight_IdentifyTime = 0;
// 1656     zclSampleLight_ProcessIdentifyTimeChange();
// 1657 
// 1658 #ifdef LCD_SUPPORTED
// 1659     // if successful, inform user which nwkaddr/ep we bound to
// 1660     pStr = NULL;
// 1661     err = pData->sFinish.err;
// 1662     if( err == EZMODE_ERR_SUCCESS )
// 1663     {
// 1664       // already stated on autoclose
// 1665     }
// 1666     else if ( err == EZMODE_ERR_CANCELLED )
// 1667     {
// 1668       pStr = "EZMode: Cancel";
// 1669     }
// 1670     else if ( err == EZMODE_ERR_BAD_PARAMETER )
// 1671     {
// 1672       pStr = "EZMode: BadParm";
// 1673     }
// 1674     else if ( err == EZMODE_ERR_TIMEDOUT )
// 1675     {
// 1676       pStr = "EZMode: TimeOut";
// 1677     }
// 1678     if ( pStr )
// 1679     {
// 1680       if ( giLightScreenMode == LIGHT_MAINMODE )
// 1681       {
// 1682         HalLcdWriteString ( pStr, HAL_LCD_LINE_2 );
// 1683       }
// 1684     }
// 1685 #endif
// 1686     // show main UI screen 3 seconds after binding
// 1687     osal_start_timerEx( zclSampleLight_TaskID, SAMPLELIGHT_MAIN_SCREEN_EVT, 3000 );
// 1688   }
// 1689 }
// 1690 #endif // ZCL_EZMODE
// 1691 
// 1692 /****************************************************************************
// 1693 ****************************************************************************/
// 1694 
// 1695 
// 
// 922 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//  37 bytes in segment XDATA_I
//  37 bytes in segment XDATA_ID
//   4 bytes in segment XDATA_ROM_C
//  16 bytes in segment XDATA_Z
// 
//  91 bytes of CODE     memory
//   0 bytes of CONST    memory (+ 4 bytes shared)
// 922 bytes of HUGECODE memory
//  53 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
