###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                10/Dec/2016  08:27:28
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Admin\Desktop\zigbee with
#        smartThings\Components\stack\zcl\zcl_general.c
#    Command line       =  
#        -f "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x07FFF800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000)
#        -f "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Components\stack\zcl\zcl_general.c" -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xHOLD_AUTO_START -D
#        ZTOOL_P1 -D xLCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D
#        ZCL_READ -D ZCL_WRITE -D ZCL_REPORT -D xZCL_EZMODE -D ZCL_BASIC -D
#        ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D
#        xZCL_LEVEL_CTRL -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -lC
#        "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
#        -lA "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\" -I
#        "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\Source\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\Source\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\List\zcl_general.lst
#    Object file        =  
#        C:\Users\Admin\Desktop\zigbee with
#        smartThings\Projects\zstack\HomeAutomation\SampleLight\CC2530DB\RouterEB\Obj\zcl_general.r51
#
###############################################################################

C:\Users\Admin\Desktop\zigbee with smartThings\Components\stack\zcl\zcl_general.c
      1          /**************************************************************************************************
      2            Filename:       zcl_general.c
      3            Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
      4            Revision:       $Revision: 44493 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "zcl.h"
     46          #include "hal_led.h"
     47          #include "zcl_general.h"
     48          //#include "ZDApp.h"
     49          #include "zcl_ezmode.h"
     50          
     51          #if defined ( INTER_PAN )
     52            #include "stub_aps.h"
     53          #endif
     54          
     55          /*********************************************************************
     56           * MACROS
     57           */
     58          #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
     59          #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
     60          #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
     61          
     62          #ifdef ZCL_SCENES
     63          #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
     64          #endif // ZCL_SCENES
     65          
     66          /*********************************************************************
     67           * CONSTANTS
     68           */
     69          
     70          /*********************************************************************
     71           * TYPEDEFS
     72           */
     73          typedef struct zclGenCBRec
     74          {
     75            struct zclGenCBRec        *next;
     76            uint8                     endpoint; // Used to link it into the endpoint descriptor
     77            zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
     78          } zclGenCBRec_t;
     79          
     80          typedef struct zclGenSceneItem
     81          {
     82            struct zclGenSceneItem    *next;
     83            uint8                     endpoint; // Used to link it into the endpoint descriptor
     84            zclGeneral_Scene_t        scene;    // Scene info
     85          } zclGenSceneItem_t;
     86          
     87          typedef struct zclGenAlarmItem
     88          {
     89            struct zclGenAlarmItem    *next;
     90            uint8                     endpoint; // Used to link it into the endpoint descriptor
     91            zclGeneral_Alarm_t        alarm;    // Alarm info
     92          } zclGenAlarmItem_t;
     93          
     94          // Scene NV types
     95          typedef struct
     96          {
     97            uint16                    numRecs;
     98          } nvGenScenesHdr_t;
     99          
    100          typedef struct zclGenSceneNVItem
    101          {
    102            uint8                     endpoint;
    103            zclGeneral_Scene_t        scene;
    104          } zclGenSceneNVItem_t;
    105          
    106          /*********************************************************************
    107           * GLOBAL VARIABLES
    108           */
    109          
    110          /*********************************************************************
    111           * GLOBAL FUNCTIONS
    112           */
    113          
    114          /*********************************************************************
    115           * LOCAL VARIABLES
    116           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
   \                     zclGenCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          static uint8 zclGenPluginRegisted = FALSE;
   \                     zclGenPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    119          
    120          #if defined( ZCL_SCENES )
    121            #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122              static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
   \                     zclGenSceneTable:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    123            #endif
    124          #endif // ZCL_SCENES
    125          
    126          #ifdef ZCL_ALARMS
    127          static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
    128          #endif // ZCL_ALARMS
    129          
    130          /*********************************************************************
    131           * LOCAL FUNCTIONS
    132           */
    133          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
    134          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    135          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
    136          
    137          // Device Configuration and Installation clusters
    138          #ifdef ZCL_BASIC
    139          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    140          #endif // ZCL_BASIC
    141          
    142          #ifdef ZCL_IDENTIFY
    143          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    144          #endif // ZCL_IDENTIFY
    145          
    146          // Groups and Scenes clusters
    147          #ifdef ZCL_GROUPS
    148          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
    149          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    150          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
    151          #endif // ZCL_GROUPS
    152          
    153          #ifdef ZCL_SCENES
    154          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    155          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    156          #endif // ZCL_SCENES
    157          
    158          // On/Off and Level Control Configuration clusters
    159          #ifdef ZCL_ON_OFF
    160          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    161          #endif // ZCL_ONOFF
    162          
    163          #ifdef ZCL_LEVEL_CTRL
    164          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    165          #endif // ZCL_LEVEL_CTRL
    166          
    167          // Alarms cluster
    168          #ifdef ZCL_ALARMS
    169          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    170          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    171          #endif // ZCL_ALARMS
    172          
    173          // Location cluster
    174          #ifdef ZCL_LOCATION
    175          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    176          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    177          #endif // ZCL_LOCATION
    178          
    179          #ifdef ZCL_SCENES
    180            #if !defined ( ZCL_STANDALONE )
    181              static uint8 zclGeneral_ScenesInitNV( void );
    182              static void zclGeneral_ScenesSetDefaultNV( void );
    183              static void zclGeneral_ScenesWriteNV( void );
    184              static uint16 zclGeneral_ScenesRestoreFromNV( void );
    185            #endif
    186          #endif // ZCL_SCENES
    187          
    188          /*********************************************************************
    189           * @fn      zclGeneral_RegisterCmdCallbacks
    190           *
    191           * @brief   Register an applications command callbacks
    192           *
    193           * @param   endpoint - application's endpoint
    194           * @param   callbacks - pointer to the callback record.
    195           *
    196           * @return  ZMemError if not able to allocate
    197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
   \                     zclGeneral_RegisterCmdCallbacks:
    199          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    200            zclGenCBRec_t *pNewItem;
    201            zclGenCBRec_t *pLoop;
    202          
    203            // Register as a ZCL Plugin
    204            if ( zclGenPluginRegisted == FALSE )
   \   00000B   90....       MOV     DPTR,#zclGenPluginRegisted
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7024         JNZ     ??zclGeneral_RegisterCmdCallbacks_0
    205            {
    206              zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
    207                                  ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    208                                  zclGeneral_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV     ?V2,#`??zclGeneral_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV     ?V3,#(`??zclGeneral_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV     R0,#?V2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C14         MOV     R4,#0x14
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
    209          
    210          #ifdef ZCL_SCENES
    211              // Initialize the Scenes Table
    212              zclGeneral_ScenesInit();
   \   00002C                ; Setup parameters for call to function zclGeneral_ScenesInit
   \   00002C   12....       LCALL   `??zclGeneral_ScenesInit::?relay`; Banked call to: zclGeneral_ScenesInit
    213          #endif // ZCL_SCENES
    214          
    215              zclGenPluginRegisted = TRUE;
   \   00002F   90....       MOV     DPTR,#zclGenPluginRegisted
   \   000032   7401         MOV     A,#0x1
   \   000034   F0           MOVX    @DPTR,A
    216            }
    217          
    218            // Fill in the new profile list
    219            pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
   \                     ??zclGeneral_RegisterCmdCallbacks_0:
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   7A05         MOV     R2,#0x5
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003C   8A..         MOV     ?V2,R2
   \   00003E   8B..         MOV     ?V3,R3
   \   000040   A8..         MOV     R0,?V2
   \   000042   A9..         MOV     R1,?V3
    220            if ( pNewItem == NULL )
   \   000044   E8           MOV     A,R0
   \   000045   49           ORL     A,R1
   \   000046   7004         JNZ     ??zclGeneral_RegisterCmdCallbacks_1
    221              return (ZMemError);
   \   000048   7910         MOV     R1,#0x10
   \   00004A   8044         SJMP    ??zclGeneral_RegisterCmdCallbacks_2
    222          
    223            pNewItem->next = (zclGenCBRec_t *)NULL;
   \                     ??zclGeneral_RegisterCmdCallbacks_1:
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   F0           MOVX    @DPTR,A
    224            pNewItem->endpoint = endpoint;
   \   000054   8882         MOV     DPL,R0
   \   000056   8983         MOV     DPH,R1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E5..         MOV     A,?V0
   \   00005C   F0           MOVX    @DPTR,A
    225            pNewItem->CBs = callbacks;
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   EE           MOV     A,R6
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   EF           MOV     A,R7
   \   000068   F0           MOVX    @DPTR,A
    226          
    227            // Find spot in list
    228            if (  zclGenCBs == NULL )
   \   000069   90....       MOV     DPTR,#zclGenCBs
   \   00006C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00006F   90....       MOV     DPTR,#zclGenCBs
   \   000072   6017         JZ      ??zclGeneral_RegisterCmdCallbacks_3
    229            {
    230              zclGenCBs = pNewItem;
    231            }
    232            else
    233            {
    234              // Look for end of list
    235              pLoop = zclGenCBs;
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FC           MOV     R4,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   8003         SJMP    ??zclGeneral_RegisterCmdCallbacks_4
    236              while ( pLoop->next != NULL )
    237                pLoop = pLoop->next;
   \                     ??zclGeneral_RegisterCmdCallbacks_5:
   \   00007A   EA           MOV     A,R2
   \   00007B   FC           MOV     R4,A
   \   00007C   EB           MOV     A,R3
   \                     ??zclGeneral_RegisterCmdCallbacks_4:
   \   00007D   FD           MOV     R5,A
   \   00007E   8C82         MOV     DPL,R4
   \   000080   8D83         MOV     DPH,R5
   \   000082   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000085   70F3         JNZ     ??zclGeneral_RegisterCmdCallbacks_5
    238          
    239              // Put new item at end of list
    240              pLoop->next = pNewItem;
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
    241            }
   \                     ??zclGeneral_RegisterCmdCallbacks_3:
   \   00008B   12....       LCALL   ?Subroutine52 & 0xFFFF
    242          
    243            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_96:
   \   00008E   7900         MOV     R1,#0x0
   \                     ??zclGeneral_RegisterCmdCallbacks_2:
   \   000090   02....       LJMP    ??Subroutine74_0 & 0xFFFF
    244          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   FB           MOV     R3,A
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    245          
    246          #ifdef ZCL_IDENTIFY
    247          /*********************************************************************
    248           * @fn      zclGeneral_SendIdentify
    249           *
    250           * @brief   Call to send out an Identify Command
    251           *
    252           * @param   srcEP - Sending application's endpoint
    253           * @param   dstAddr - where you want the message to go
    254           * @param   identifyTime - how long the device will continue to identify itself (in seconds)
    255           * @param   seqNum - identification number for the transaction
    256           *
    257           * @return  ZStatus_t
    258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentify:
    260                                             uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
    261          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    262            uint8 buf[2];
    263          
    264            buf[0] = LO_UINT16( identifyTime );
   \   00000C   EC           MOV     A,R4
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   F0           MOVX    @DPTR,A
    265            buf[1] = HI_UINT16( identifyTime );
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine43 & 0xFFFF
    266          
    267            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    268                                    COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    269                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_139:
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV     ?V0,#0x2
   \   000022   75..00       MOV     ?V1,#0x0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV     A,#0x11
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR     A
   \   000036   F5..         MOV     ?V0,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV     A,#0x13
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   75..00       MOV     ?V0,#0x0
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   75..01       MOV     ?V0,#0x1
   \   000053   02....       LJMP    ?Subroutine1 & 0xFFFF
    270          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   ED           MOV     A,R5
   \   000001                REQUIRE ??Subroutine71_0
   \   000001                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V0,R0
   \   000007   89..         MOV     ?V1,R1
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV     R0,#?V0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   78..         MOV     R0,#?V0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   7C03         MOV     R4,#0x3
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   EE           MOV     A,R6
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000016   740B         MOV     A,#0xb
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   7402         MOV     A,#0x2
   \   00001D                REQUIRE ??Subroutine79_0
   \   00001D                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine80_0
   \   000003                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    271          
    272          /*********************************************************************
    273           * @fn      zclGeneral_SendIdentifyEZModeInvoke
    274           *
    275           * @brief   Call to send out an Identify EZ-Mode Invoke Command
    276           *
    277           * @param   srcEP - Sending application's endpoint
    278           * @param   dstAddr - where you want the message to go
    279           * @param   action - describes the EZ-Mode action to be performed
    280           * @param   seqNum - identification number for the transaction
    281           *
    282           * @return  ZStatus_t
    283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    284          ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyEZModeInvoke:
    285                                                         uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
    286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
    287            uint8 buf[1];
    288          
    289            buf[0] = action;
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   12....       LCALL   ??Subroutine72_0 & 0xFFFF
    290          
    291            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    292                                    COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    293                                    disableDefaultRsp, 0, seqNum, 1, buf );
   \                     ??CrossCallReturnLabel_144:
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..01       MOV     ?V2,#0x1
   \   00001C   75..00       MOV     ?V3,#0x0
   \   00001F   78..         MOV     R0,#?V2
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7411         MOV     A,#0x11
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   E4           CLR     A
   \   000030   F5..         MOV     ?V2,A
   \   000032   78..         MOV     R0,#?V2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   ED           MOV     A,R5
   \   000038   F5..         MOV     ?V1,A
   \   00003A   78..         MOV     R0,#?V1
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V1
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..01       MOV     ?V1,#0x1
   \   00004A   78..         MOV     R0,#?V1
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..02       MOV     ?V1,#0x2
   \   000052   78..         MOV     R0,#?V1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   7C03         MOV     R4,#0x3
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   EE           MOV     A,R6
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000060   740B         MOV     A,#0xb
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   7401         MOV     A,#0x1
   \   000067   02....       LJMP    ??Subroutine73_0 & 0xFFFF
    294          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V2,R0
   \   000007   89..         MOV     ?V3,R1
   \   000009   78..         MOV     R0,#?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine74_0
   \   000003                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V1,A
   \   000003   78..         MOV     R0,#?V1
   \   000005   22           RET
    295          
    296          /*********************************************************************
    297           * @fn      zclGeneral_SendIdentifyUpdateCommState
    298           *
    299           * @brief   Call to send out an Identify Update Commission State Command
    300           *
    301           * @param   srcEP - Sending application's endpoint
    302           * @param   dstAddr - where you want the message to go
    303           * @param   action - describes the EZ-Mode action to be performed
    304           * @param   commissionStateMask - updates the device's commission state
    305           * @param   seqNum - identification number for the transaction
    306           *
    307           * @return  ZStatus_t
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyUpdateCommState:
    310                                                            uint8 action, uint8 commissionStateMask,
    311                                                            uint8 disableDefaultRsp, uint8 seqNum )
    312          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
    313            uint8 buf[2];
    314          
    315            buf[0] = action;
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   F0           MOVX    @DPTR,A
    316            buf[1] = commissionStateMask;
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   ED           MOV     A,R5
   \   00001A   12....       LCALL   ??Subroutine72_0 & 0xFFFF
    317          
    318            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    319                                    COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    320                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_145:
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   75..02       MOV     ?V2,#0x2
   \   000023   75..00       MOV     ?V3,#0x0
   \   000026   78..         MOV     R0,#?V2
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   7413         MOV     A,#0x13
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000036   E4           CLR     A
   \   000037   F5..         MOV     ?V2,A
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   7415         MOV     A,#0x15
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV     ?V1,#0x0
   \   00004C   78..         MOV     R0,#?V1
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV     ?V1,#0x1
   \   000054   78..         MOV     R0,#?V1
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   75..03       MOV     ?V1,#0x3
   \   00005C   78..         MOV     R0,#?V1
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   7C03         MOV     R4,#0x3
   \   000063   7D00         MOV     R5,#0x0
   \   000065   EE           MOV     A,R6
   \   000066   F9           MOV     R1,A
   \   000067                REQUIRE ?Subroutine8
   \   000067                ; // Fall through to label ?Subroutine8
    321          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000003   740B         MOV     A,#0xb
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7402         MOV     A,#0x2
   \   00000A   02....       LJMP    ??Subroutine73_0 & 0xFFFF
    322          
    323          #ifdef ZCL_LIGHT_LINK_ENHANCE
    324          /*********************************************************************
    325           * @fn      zclGeneral_SendIdentifyTriggerEffect
    326           *
    327           * @brief   Call to send out a Trigger Effect Command
    328           *
    329           * @param   srcEP - Sending application's endpoint
    330           * @param   dstAddr - where you want the message to go
    331           * @param   effectId - identify effect to use
    332           * @param   effectVariant - which variant of effect to be triggered
    333           * @param   disableDefaultRsp - whether to disable the Default Response command
    334           * @param   seqNum - identification number for the transaction
    335           *
    336           * @return  ZStatus_t
    337           */
    338          ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
    339                                                          uint8 effectId, uint8 effectVariant,
    340                                                          uint8 disableDefaultRsp, uint8 seqNum )
    341          {
    342            uint8 buf[2];
    343          
    344            buf[0] = effectId;
    345            buf[1] = effectVariant;
    346          
    347            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    348                                    COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    349                                    disableDefaultRsp, 0, seqNum, 2, buf );
    350          }
    351          #endif // ZCL_LIGHT_LINK_ENHANCE
    352          
    353          /*********************************************************************
    354           * @fn      zclGeneral_SendIdentifyQueryResponse
    355           *
    356           * @brief   Call to send out an Identify Query Response Command
    357           *
    358           * @param   srcEP - Sending application's endpoint
    359           * @param   dstAddr - where you want the message to go
    360           * @param   timeout - how long the device will continue to identify itself (in seconds)
    361           * @param   seqNum - identification number for the transaction
    362           *
    363           * @return  ZStatus_t
    364           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    365          ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyQueryResponse:
    366                                                          uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
    367          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    368            uint8 buf[2];
    369          
    370            buf[0] = LO_UINT16( timeout );
   \   00000C   EC           MOV     A,R4
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   F0           MOVX    @DPTR,A
    371            buf[1] = HI_UINT16( timeout );
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine43 & 0xFFFF
    372          
    373            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    374                                    COMMAND_IDENTIFY_QUERY_RSP, TRUE,
    375                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_140:
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV     ?V0,#0x2
   \   000022   75..00       MOV     ?V1,#0x0
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7411         MOV     A,#0x11
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   E4           CLR     A
   \   000036   F5..         MOV     ?V0,A
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7413         MOV     A,#0x13
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   75..01       MOV     ?V0,#0x1
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   02....       LJMP    ?Subroutine1 & 0xFFFF
    376          }
    377          #endif // ZCL_IDENTIFY
    378          
    379          #ifdef ZCL_GROUPS
    380          /*********************************************************************
    381           * @fn      zclGeneral_SendGroupRequest
    382           *
    383           * @brief   Send a Group Request to a device.  You can also use the
    384           *          appropriate macro.
    385           *
    386           * @param   srcEP - Sending Apps endpoint
    387           * @param   dstAddr - where to send the request
    388           * @param   cmd - one of the following:
    389           *              COMMAND_GROUP_VIEW
    390           *              COMMAND_GROUP_REMOVE
    391           * @param   groupID -
    392           *
    393           * @return  ZStatus_t
    394           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    395          ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupRequest:
    396                                                 uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    397          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
   \   000010   740E         MOV     A,#0xe
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine24 & 0xFFFF
    398            uint8 buf[2];
    399          
    400            buf[0] = LO_UINT16( groupID );
    401            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_34:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine42 & 0xFFFF
    402          
    403            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    404                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    405                                      disableDefaultRsp, 0, seqNum, 2, buf ) );
   \                     ??CrossCallReturnLabel_142:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   75..02       MOV     ?V2,#0x2
   \   000024   75..00       MOV     ?V3,#0x0
   \   000027   78..         MOV     R0,#?V2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7414         MOV     A,#0x14
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   E4           CLR     A
   \   000038   F5..         MOV     ?V2,A
   \   00003A   78..         MOV     R0,#?V2
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   EF           MOV     A,R7
   \   000040   F5..         MOV     ?V1,A
   \   000042   78..         MOV     R0,#?V1
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..00       MOV     ?V1,#0x0
   \   00004A   78..         MOV     R0,#?V1
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..01       MOV     ?V1,#0x1
   \   000052   78..         MOV     R0,#?V1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   EE           MOV     A,R6
   \   000058   F5..         MOV     ?V1,A
   \   00005A   78..         MOV     R0,#?V1
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   7C04         MOV     R4,#0x4
   \   000061   7D00         MOV     R5,#0x0
   \   000063   A9..         MOV     R1,?V0
   \   000065   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine72_0
   \   000001                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   22           RET
    406          }
    407          
    408          /*********************************************************************
    409           * @fn      zclGeneral_SendAddGroupRequest
    410           *
    411           * @brief   Send the Add Group Request to a device
    412           *
    413           * @param   srcEP - Sending Apps endpoint
    414           * @param   dstAddr - where to send the request
    415           * @param   cmd - one of the following:
    416           *                COMMAND_GROUP_ADD
    417           *                COMMAND_GROUP_ADD_IF_IDENTIFYING
    418           * @param   groupID - pointer to the group structure
    419           * @param   groupName - pointer to Group Name.  This is a Zigbee
    420           *          string data type, so the first byte is the length of the
    421           *          name (in bytes), then the name.
    422           *
    423           * @return  ZStatus_t
    424           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    425          ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddGroupRequest:
    426                                                    uint8 cmd, uint16 groupID, uint8 *groupName,
    427                                                    uint8 disableDefaultRsp, uint8 seqNum )
    428          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V7,R1
   \   000007   8A..         MOV     ?V10,R2
   \   000009   8B..         MOV     ?V11,R3
   \   00000B   8C..         MOV     ?V9,R4
   \   00000D   8D..         MOV     ?V8,R5
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine27 & 0xFFFF
    429            uint8 *buf;
    430            uint8 *pBuf;
    431            uint8 len;
    432            ZStatus_t status;
    433          
    434            len = 2;    // Group ID
    435            len += groupName[0] + 1;  // String + 1 for length
   \                     ??CrossCallReturnLabel_38:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
    436          
    437            buf = zcl_mem_alloc( len );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000021   8A..         MOV     ?V0,R2
   \   000023   8B..         MOV     ?V1,R3
    438            if ( buf )
   \   000025   EA           MOV     A,R2
   \   000026   45..         ORL     A,?V1
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??zclGeneral_SendAddGroupRequest_0 & 0xFFFF
   \   00002D   7414         MOV     A,#0x14
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine37 & 0xFFFF
    439            {
    440              pBuf = buf;
    441              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_74:
   \   000035   F0           MOVX    @DPTR,A
    442              *pBuf++ = HI_UINT16( groupID );
   \   000036   E9           MOV     A,R1
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
    443              *pBuf++ = groupName[0]; // string length
   \   000039   85..82       MOV     DPL,?V2
   \   00003C   85..83       MOV     DPH,?V3
   \   00003F   12....       LCALL   ??Subroutine77_0 & 0xFFFF
    444              zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
   \                     ??CrossCallReturnLabel_168:
   \   000042                ; Setup parameters for call to function osal_memcpy
   \   000042   85..82       MOV     DPL,?V2
   \   000045   85..83       MOV     DPH,?V3
   \   000048   A3           INC     DPTR
   \   000049   A982         MOV     R1,DPL
   \   00004B   AA83         MOV     R2,DPH
   \   00004D   89..         MOV     ?V4,R1
   \   00004F   8A..         MOV     ?V5,R2
   \   000051   75..00       MOV     ?V6,#0x0
   \   000054   78..         MOV     R0,#?V4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   85..82       MOV     DPL,?V2
   \   00005C   85..83       MOV     DPH,?V3
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FC           MOV     R4,A
   \   000061   7D00         MOV     R5,#0x0
   \   000063   E5..         MOV     A,?V0
   \   000065   2403         ADD     A,#0x3
   \   000067   FA           MOV     R2,A
   \   000068   E4           CLR     A
   \   000069   35..         ADDC    A,?V1
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
    445          
    446              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    447                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    448                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   000074                ; Setup parameters for call to function zcl_SendCommand
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   8E..         MOV     ?V2,R6
   \   00007B   75..00       MOV     ?V3,#0x0
   \   00007E   78..         MOV     R0,#?V2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   741C         MOV     A,#0x1c
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008E   E4           CLR     A
   \   00008F   F5..         MOV     ?V2,A
   \   000091   78..         MOV     R0,#?V2
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   E5..         MOV     A,?V8
   \   000098   F5..         MOV     ?V2,A
   \   00009A   78..         MOV     R0,#?V2
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009F   75..00       MOV     ?V2,#0x0
   \   0000A2   78..         MOV     R0,#?V2
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A7   75..01       MOV     ?V2,#0x1
   \   0000AA   78..         MOV     R0,#?V2
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AF   E5..         MOV     A,?V9
   \   0000B1   F5..         MOV     ?V2,A
   \   0000B3   78..         MOV     R0,#?V2
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   7C04         MOV     R4,#0x4
   \   0000BA   7D00         MOV     R5,#0x0
   \   0000BC   AA..         MOV     R2,?V10
   \   0000BE   AB..         MOV     R3,?V11
   \   0000C0   A9..         MOV     R1,?V7
   \   0000C2   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000C5   740B         MOV     A,#0xb
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   E9           MOV     A,R1
   \   0000CB   FE           MOV     R6,A
    449              zcl_mem_free( buf );
   \   0000CC                ; Setup parameters for call to function osal_mem_free
   \   0000CC   AA..         MOV     R2,?V0
   \   0000CE   AB..         MOV     R3,?V1
   \   0000D0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D3   8002         SJMP    ??zclGeneral_SendAddGroupRequest_1
    450            }
    451            else
    452              status = ZMemError;
   \                     ??zclGeneral_SendAddGroupRequest_0:
   \   0000D5   7E10         MOV     R6,#0x10
    453          
    454            return ( status );
   \                     ??zclGeneral_SendAddGroupRequest_1:
   \   0000D7   EE           MOV     A,R6
   \   0000D8   F9           MOV     R1,A
   \   0000D9                REQUIRE ?Subroutine2
   \   0000D9                ; // Fall through to label ?Subroutine2
    455          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   78..         MOV     R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V3,A
   \   000007   85..82       MOV     DPL,?V2
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET
    456          
    457          /*********************************************************************
    458           * @fn      zclGeneral_SendGroupGetMembershipRequest
    459           *
    460           * @brief   Send a Get Group Membership (Resposne) Command to a device
    461           *
    462           * @param   srcEP - Sending Apps endpoint
    463           * @param   dstAddr - where to send the request
    464           * @param   cmd - one of the following:
    465           *                COMMAND_GROUP_GET_MEMBERSHIP
    466           *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
    467           * @param   groupID - pointer to the group structure
    468           * @param   groupName - pointer to Group Name.  This is a Zigbee
    469           *          string data type, so the first byte is the length of the
    470           *          name (in bytes), then the name.
    471           *
    472           * @return  ZStatus_t
    473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    474          ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupGetMembershipRequest:
    475                                                              uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
    476                                                              uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
    477          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    478            uint8 *buf;
    479            uint8 *pBuf;
    480            uint8 len = 0;
   \   00000F   7800         MOV     R0,#0x0
    481            uint8 i;
    482            ZStatus_t status;
    483          
    484            if ( rspCmd )
   \   000011   6002         JZ      ??zclGeneral_SendGroupGetMembershipRequest_0
    485              len++;  // Capacity
   \   000013   7801         MOV     R0,#0x1
   \                     ??zclGeneral_SendGroupGetMembershipRequest_0:
   \   000015   7416         MOV     A,#0x16
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V3,A
    486          
    487            len++;  // Group Count
    488            len += sizeof ( uint16 ) * grpCnt;  // Group List
   \   00001D   C3           CLR     C
   \   00001E   33           RLC     A
   \   00001F   04           INC     A
   \   000020   28           ADD     A,R0
   \   000021   F8           MOV     R0,A
    489          
    490            buf = zcl_mem_alloc( len );
   \   000022   88..         MOV     ?V4,R0
   \   000024   75..00       MOV     ?V5,#0x0
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   FA           MOV     R2,A
   \   000028   AB..         MOV     R3,?V5
   \   00002A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV     ?V0,R2
   \   00002F   8B..         MOV     ?V1,R3
    491            if ( buf )
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V1
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??zclGeneral_SendGroupGetMembershipRequest_1 & 0xFFFF
    492            {
    493              pBuf = buf;
   \   000039   A8..         MOV     R0,?V0
   \   00003B   A9..         MOV     R1,?V1
    494              if ( rspCmd )
   \   00003D   EF           MOV     A,R7
   \   00003E   6008         JZ      ??CrossCallReturnLabel_68
    495                *pBuf++ = capacity;
   \   000040   7415         MOV     A,#0x15
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?Subroutine33 & 0xFFFF
    496          
    497              *pBuf++ = grpCnt;
   \                     ??CrossCallReturnLabel_68:
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   E5..         MOV     A,?V3
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   A882         MOV     R0,DPL
   \   000052   A983         MOV     R1,DPH
    498              for ( i = 0; i < grpCnt; i++ )
   \   000054   75..00       MOV     ?V8,#0x0
   \   000057   7417         MOV     A,#0x17
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00005F   EA           MOV     A,R2
   \   000060   FC           MOV     R4,A
   \   000061   EB           MOV     A,R3
   \   000062   FD           MOV     R5,A
   \   000063   8029         SJMP    ??zclGeneral_SendGroupGetMembershipRequest_2
    499              {
    500                *pBuf++ = LO_UINT16( grpList[i] );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_3:
   \   000065   AA..         MOV     R2,?V8
   \   000067   EA           MOV     A,R2
   \   000068   2A           ADD     A,R2
   \   000069   FA           MOV     R2,A
   \   00006A   E4           CLR     A
   \   00006B   33           RLC     A
   \   00006C   FB           MOV     R3,A
   \   00006D   EC           MOV     A,R4
   \   00006E   2A           ADD     A,R2
   \   00006F   FA           MOV     R2,A
   \   000070   ED           MOV     A,R5
   \   000071   3B           ADDC    A,R3
   \   000072   FB           MOV     R3,A
   \   000073   8A82         MOV     DPL,R2
   \   000075   8B83         MOV     DPH,R3
   \   000077   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00007A   F0           MOVX    @DPTR,A
    501                *pBuf++ = HI_UINT16( grpList[i] );
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   A3           INC     DPTR
   \   000080   12....       LCALL   ?Subroutine62 & 0xFFFF
    502              }
   \                     ??CrossCallReturnLabel_124:
   \   000083   A3           INC     DPTR
   \   000084   F0           MOVX    @DPTR,A
   \   000085   E8           MOV     A,R0
   \   000086   2402         ADD     A,#0x2
   \   000088   F8           MOV     R0,A
   \   000089   5001         JNC     ??zclGeneral_SendGroupGetMembershipRequest_4
   \   00008B   09           INC     R1
   \                     ??zclGeneral_SendGroupGetMembershipRequest_4:
   \   00008C   05..         INC     ?V8
   \                     ??zclGeneral_SendGroupGetMembershipRequest_2:
   \   00008E   E5..         MOV     A,?V8
   \   000090   C3           CLR     C
   \   000091   95..         SUBB    A,?V3
   \   000093   40D0         JC      ??zclGeneral_SendGroupGetMembershipRequest_3
    503          
    504              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    505                                        cmd, TRUE, direction,
    506                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   000095                ; Setup parameters for call to function zcl_SendCommand
   \   000095   78..         MOV     R0,#?V0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   78..         MOV     R0,#?V4
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009F   741E         MOV     A,#0x1e
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   E4           CLR     A
   \   0000AB   F5..         MOV     ?V4,A
   \   0000AD   78..         MOV     R0,#?V4
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   7420         MOV     A,#0x20
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   741C         MOV     A,#0x1c
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C8   75..01       MOV     ?V3,#0x1
   \   0000CB   78..         MOV     R0,#?V3
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   EE           MOV     A,R6
   \   0000D1   F5..         MOV     ?V3,A
   \   0000D3   78..         MOV     R0,#?V3
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   7C04         MOV     R4,#0x4
   \   0000DA   7D00         MOV     R5,#0x0
   \   0000DC   AA..         MOV     R2,?V6
   \   0000DE   AB..         MOV     R3,?V7
   \   0000E0   A9..         MOV     R1,?V2
   \   0000E2   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000E5   740B         MOV     A,#0xb
   \   0000E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   F5..         MOV     ?V3,A
    507              zcl_mem_free( buf );
   \   0000ED                ; Setup parameters for call to function osal_mem_free
   \   0000ED   AA..         MOV     R2,?V0
   \   0000EF   AB..         MOV     R3,?V1
   \   0000F1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000F4   8003         SJMP    ??zclGeneral_SendGroupGetMembershipRequest_5
    508            }
    509            else
    510              status = ZMemError;
   \                     ??zclGeneral_SendGroupGetMembershipRequest_1:
   \   0000F6   75..10       MOV     ?V3,#0x10
    511          
    512            return ( status );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_5:
   \   0000F9   A9..         MOV     R1,?V3
   \   0000FB   02....       LJMP    ?Subroutine2 & 0xFFFF
    513          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   A882         MOV     R0,DPL
   \   000007   A983         MOV     R1,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V3,A
   \   000003   78..         MOV     R0,#?V3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET
    514          
    515          /*********************************************************************
    516           * @fn      zclGeneral_SendGroupResponse
    517           *
    518           * @brief   Send Group Response (not Group View Response)
    519           *
    520           * @param   srcEP - Sending application's endpoint
    521           * @param   dstAddr - where you want the message to go
    522           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    523           * @param   status - group command status
    524           * @param   groupID - what group
    525           *
    526           * @return  ZStatus_t
    527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   EE           MOV     A,R6
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000007   740B         MOV     A,#0xb
   \   000009   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000C   7403         MOV     A,#0x3
   \   00000E                REQUIRE ??Subroutine73_0
   \   00000E                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupResponse:
    529                                                  uint8 cmd, uint8 status, uint16 groupID,
    530                                                  uint8 disableDefaultRsp, uint8 seqNum )
    531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    532            uint8 buf[3];
    533          
    534            buf[0] = status;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   ED           MOV     A,R5
   \   000015   F0           MOVX    @DPTR,A
   \   000016   740F         MOV     A,#0xf
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine87_0 & 0xFFFF
    535            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_215:
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E8           MOV     A,R0
   \   000024   F0           MOVX    @DPTR,A
    536            buf[2] = HI_UINT16( groupID );
   \   000025   7402         MOV     A,#0x2
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine42 & 0xFFFF
    537          
    538            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    539                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    540                                    disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_143:
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75..03       MOV     ?V2,#0x3
   \   000033   75..00       MOV     ?V3,#0x0
   \   000036   78..         MOV     R0,#?V2
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7416         MOV     A,#0x16
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000046   E4           CLR     A
   \   000047   F5..         MOV     ?V2,A
   \   000049   78..         MOV     R0,#?V2
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7418         MOV     A,#0x18
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   75..01       MOV     ?V1,#0x1
   \   00005C   78..         MOV     R0,#?V1
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   78..         MOV     R0,#?V1
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000066   EF           MOV     A,R7
   \   000067   F5..         MOV     ?V1,A
   \   000069   78..         MOV     R0,#?V1
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006E   7C04         MOV     R4,#0x4
   \   000070   02....       LJMP    ?Subroutine0 & 0xFFFF
    541          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    542          
    543          /*********************************************************************
    544           * @fn      zclGeneral_SendGroupViewResponse
    545           *
    546           * @brief   Call to send Group Response Command
    547           *
    548           * @param   srcEP - Sending application's endpoint
    549           * @param   dstAddr - where you want the message to go
    550           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    551           * @param   status - group command status
    552           * @param   grp - group info
    553           *
    554           * @return  ZStatus_t
    555           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    556          ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupViewResponse:
    557                                                      uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
    558          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V8,R1
   \   000007   8A..         MOV     ?V12,R2
   \   000009   8B..         MOV     ?V13,R3
   \   00000B   8C..         MOV     ?V7,R4
   \   00000D   8D..         MOV     ?V9,R5
    559            uint8 *buf;
    560            uint8 len;
    561            ZStatus_t stat;
    562          
    563            len = 1 + 2 + 1; // Status + Group ID + name length
   \   00000F   7E04         MOV     R6,#0x4
   \   000011   7416         MOV     A,#0x16
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V4,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V5,A
    564          
    565            if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   E5..         MOV     A,?V4
   \   00001F   2402         ADD     A,#0x2
   \   000021   F5..         MOV     ?V2,A
   \   000023   E4           CLR     A
   \   000024   35..         ADDC    A,?V5
   \   000026   F5..         MOV     ?V3,A
   \   000028   EC           MOV     A,R4
   \   000029   7009         JNZ     ??zclGeneral_SendGroupViewResponse_0
    566            {
    567              len += grp->name[0];  // String length
   \   00002B   85..82       MOV     DPL,?V2
   \   00002E   85..83       MOV     DPH,?V3
   \   000031   E0           MOVX    A,@DPTR
   \   000032   2E           ADD     A,R6
   \   000033   FE           MOV     R6,A
    568            }
    569          
    570            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendGroupViewResponse_0:
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   EE           MOV     A,R6
   \   000035   FA           MOV     R2,A
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV     ?V0,R2
   \   00003D   8B..         MOV     ?V1,R3
    571            if ( buf )
   \   00003F   EA           MOV     A,R2
   \   000040   45..         ORL     A,?V1
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??zclGeneral_SendGroupViewResponse_1 & 0xFFFF
    572            {
    573              buf[0] = status;
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   E5..         MOV     A,?V7
   \   00004D   12....       LCALL   ?Subroutine46 & 0xFFFF
    574              buf[1] = LO_UINT16( grp->ID );
   \                     ??CrossCallReturnLabel_82:
   \   000050   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000053   12....       LCALL   ?Subroutine46 & 0xFFFF
    575              buf[2] = HI_UINT16( grp->ID );
   \                     ??CrossCallReturnLabel_83:
   \   000056   12....       LCALL   ?Subroutine21 & 0xFFFF
    576          
    577              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_169:
   \   000059   EA           MOV     A,R2
   \   00005A   2403         ADD     A,#0x3
   \   00005C   F8           MOV     R0,A
   \   00005D   E4           CLR     A
   \   00005E   35..         ADDC    A,?V1
   \   000060   F9           MOV     R1,A
   \   000061   E5..         MOV     A,?V7
   \   000063   703C         JNZ     ??zclGeneral_SendGroupViewResponse_2
    578              {
    579                buf[3] = grp->name[0]; // string length
   \   000065   85..82       MOV     DPL,?V2
   \   000068   85..83       MOV     DPH,?V3
   \   00006B   12....       LCALL   ?Subroutine62 & 0xFFFF
    580                zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
    581              }
   \                     ??CrossCallReturnLabel_125:
   \   00006E   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A982         MOV     R1,DPL
   \   000076   AA83         MOV     R2,DPH
   \   000078   89..         MOV     ?V4,R1
   \   00007A   8A..         MOV     ?V5,R2
   \   00007C   75..00       MOV     ?V6,#0x0
   \   00007F   78..         MOV     R0,#?V4
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000084   85..82       MOV     DPL,?V2
   \   000087   85..83       MOV     DPH,?V3
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FC           MOV     R4,A
   \   00008C   7D00         MOV     R5,#0x0
   \   00008E   E5..         MOV     A,?V0
   \   000090   2404         ADD     A,#0x4
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   35..         ADDC    A,?V1
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009A   7403         MOV     A,#0x3
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   8006         SJMP    ??zclGeneral_SendGroupViewResponse_3
    582              else //ZCL_STATUS_NOT_FOUND
    583              {
    584                buf[3] = 0;
   \                     ??zclGeneral_SendGroupViewResponse_2:
   \   0000A1   8882         MOV     DPL,R0
   \   0000A3   8983         MOV     DPH,R1
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
    585              }
    586          
    587              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    588                                      COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    589                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendGroupViewResponse_3:
   \   0000A7                ; Setup parameters for call to function zcl_SendCommand
   \   0000A7   78..         MOV     R0,#?V0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   8E..         MOV     ?V2,R6
   \   0000AE   75..00       MOV     ?V3,#0x0
   \   0000B1   78..         MOV     R0,#?V2
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   741C         MOV     A,#0x1c
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   E4           CLR     A
   \   0000C2   F5..         MOV     ?V2,A
   \   0000C4   78..         MOV     R0,#?V2
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   E5..         MOV     A,?V9
   \   0000CB   F5..         MOV     ?V2,A
   \   0000CD   78..         MOV     R0,#?V2
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   75..01       MOV     ?V2,#0x1
   \   0000D5   78..         MOV     R0,#?V2
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DA   78..         MOV     R0,#?V2
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DF   78..         MOV     R0,#?V2
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E4   7C04         MOV     R4,#0x4
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   AA..         MOV     R2,?V12
   \   0000EA   AB..         MOV     R3,?V13
   \   0000EC   A9..         MOV     R1,?V8
   \   0000EE   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000F1   740B         MOV     A,#0xb
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F6   E9           MOV     A,R1
   \   0000F7   FE           MOV     R6,A
    590              zcl_mem_free( buf );
   \   0000F8                ; Setup parameters for call to function osal_mem_free
   \   0000F8   AA..         MOV     R2,?V0
   \   0000FA   AB..         MOV     R3,?V1
   \   0000FC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000FF   8002         SJMP    ??zclGeneral_SendGroupViewResponse_4
    591            }
    592            else
    593            {
    594              stat = ZMemError;
   \                     ??zclGeneral_SendGroupViewResponse_1:
   \   000101   7E10         MOV     R6,#0x10
    595            }
    596          
    597            return ( stat );
   \                     ??zclGeneral_SendGroupViewResponse_4:
   \   000103   EE           MOV     A,R6
   \   000104   F9           MOV     R1,A
   \   000105   02....       LJMP    ??Subroutine85_0 & 0xFFFF
    598          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V4
   \   000004   85..83       MOV     DPH,?V5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine77_0
   \   000001                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    599          #endif // ZCL_GROUPS
    600          
    601          #ifdef ZCL_SCENES
    602          /*********************************************************************
    603           * @fn      zclGeneral_SendAddSceneRequest
    604           *
    605           * @brief   Send the (Enhanced) Add Scene Request to a device. You can
    606           *           also use the appropriate macro.
    607           *
    608           * @param   srcEP - Sending Apps endpoint
    609           * @param   dstAddr - where to send the request
    610           * @param   scene - pointer to the scene structure
    611           * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
    612           * @param   disableDefaultRsp - whether to disable the Default Response command
    613           * @param   seqNum - sequence number
    614           *
    615           * @return  ZStatus_t
    616           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    617          ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddSceneRequest:
    618                                                    uint8 cmd, zclGeneral_Scene_t *scene,
    619                                                    uint8 disableDefaultRsp, uint8 seqNum )
    620          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00000D   89..         MOV     ?V7,R1
   \   00000F   8C..         MOV     ?V15,R4
   \   000011   8D..         MOV     ?V14,R5
   \   000013   741A         MOV     A,#0x1a
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine22 & 0xFFFF
    621            uint8 *buf;
    622            uint8 *pBuf;
    623            uint8 len;
    624            ZStatus_t status;
    625          
    626            len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
    627            len += scene->name[0] + 1; // String + 1 for length
    628          
    629            // Add something for the extension field length
    630            len += scene->extLen;
   \                     ??CrossCallReturnLabel_30:
   \   00001B   F5..         MOV     ?V8,A
   \   00001D   E4           CLR     A
   \   00001E   3F           ADDC    A,R7
   \   00001F   F5..         MOV     ?V9,A
   \   000021   85..82       MOV     DPL,?V12
   \   000024   85..83       MOV     DPH,?V13
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   85..82       MOV     DPL,?V8
   \   00002C   85..83       MOV     DPH,?V9
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   28           ADD     A,R0
   \   000031   2406         ADD     A,#0x6
   \   000033   F5..         MOV     ?V2,A
    631          
    632            buf = zcl_mem_alloc( len );
   \   000035   75..00       MOV     ?V3,#0x0
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   FA           MOV     R2,A
   \   000039   AB..         MOV     R3,?V3
   \   00003B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003E   8A..         MOV     ?V0,R2
   \   000040   8B..         MOV     ?V1,R3
    633            if ( buf )
   \   000042   EA           MOV     A,R2
   \   000043   45..         ORL     A,?V1
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??zclGeneral_SendAddSceneRequest_0 & 0xFFFF
    634            {
    635              pBuf = buf;
    636              *pBuf++ = LO_UINT16( scene->groupID );
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   12....       LCALL   ?Subroutine66 & 0xFFFF
    637              *pBuf++ = HI_UINT16( scene->groupID );
   \                     ??CrossCallReturnLabel_129:
   \   000056   12....       LCALL   ?Subroutine34 & 0xFFFF
    638              *pBuf++ = scene->ID;
   \                     ??CrossCallReturnLabel_70:
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ?Subroutine21 & 0xFFFF
    639              *pBuf++ = LO_UINT16( scene->transTime );
   \                     ??CrossCallReturnLabel_170:
   \   00005D   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000060   12....       LCALL   ?Subroutine40 & 0xFFFF
    640              *pBuf++ = HI_UINT16( scene->transTime );
   \                     ??CrossCallReturnLabel_76:
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00006B   F0           MOVX    @DPTR,A
    641              *pBuf++ = scene->name[0]; // string length
   \   00006C   85..82       MOV     DPL,?V8
   \   00006F   85..83       MOV     DPH,?V9
   \   000072   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
   \   000077   EA           MOV     A,R2
   \   000078   2406         ADD     A,#0x6
   \   00007A   F5..         MOV     ?V10,A
   \   00007C   E4           CLR     A
   \   00007D   35..         ADDC    A,?V1
   \   00007F   F5..         MOV     ?V11,A
    642              zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   000081                ; Setup parameters for call to function osal_memcpy
   \   000081   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000087   85..82       MOV     DPL,?V8
   \   00008A   85..83       MOV     DPH,?V9
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FC           MOV     R4,A
   \   00008F   7D00         MOV     R5,#0x0
   \   000091   AA..         MOV     R2,?V10
   \   000093   AB..         MOV     R3,?V11
   \   000095   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000098   7403         MOV     A,#0x3
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
    643              pBuf += scene->name[0]; // move pass name
    644          
    645              // Add the extension fields
    646              if ( scene->extLen > 0 )
   \   00009D   85..82       MOV     DPL,?V12
   \   0000A0   85..83       MOV     DPH,?V13
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   FC           MOV     R4,A
   \   0000A5   6028         JZ      ??zclGeneral_SendAddSceneRequest_1
    647                zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   0000A7                ; Setup parameters for call to function osal_memcpy
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2418         ADD     A,#0x18
   \   0000AA   F5..         MOV     ?V4,A
   \   0000AC   E4           CLR     A
   \   0000AD   3F           ADDC    A,R7
   \   0000AE   F5..         MOV     ?V5,A
   \   0000B0   78..         MOV     R0,#?V4
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   85..82       MOV     DPL,?V8
   \   0000BA   85..83       MOV     DPH,?V9
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   E5..         MOV     A,?V10
   \   0000C1   28           ADD     A,R0
   \   0000C2   FA           MOV     R2,A
   \   0000C3   E4           CLR     A
   \   0000C4   35..         ADDC    A,?V11
   \   0000C6   FB           MOV     R3,A
   \   0000C7   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CA   7403         MOV     A,#0x3
   \   0000CC   12....       LCALL   ?DEALLOC_XSTACK8
    648          
    649              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    650                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    651                                        disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendAddSceneRequest_1:
   \   0000CF                ; Setup parameters for call to function zcl_SendCommand
   \   0000CF   78..         MOV     R0,#?V0
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   78..         MOV     R0,#?V2
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D9   7420         MOV     A,#0x20
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E4   E4           CLR     A
   \   0000E5   F5..         MOV     ?V2,A
   \   0000E7   78..         MOV     R0,#?V2
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   E5..         MOV     A,?V14
   \   0000EE   F5..         MOV     ?V2,A
   \   0000F0   78..         MOV     R0,#?V2
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F5   75..00       MOV     ?V2,#0x0
   \   0000F8   78..         MOV     R0,#?V2
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FD   75..01       MOV     ?V2,#0x1
   \   000100   78..         MOV     R0,#?V2
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000105   E5..         MOV     A,?V15
   \   000107   F5..         MOV     ?V2,A
   \   000109   78..         MOV     R0,#?V2
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010E   7C05         MOV     R4,#0x5
   \   000110   7D00         MOV     R5,#0x0
   \   000112   740B         MOV     A,#0xb
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00011A   A9..         MOV     R1,?V7
   \   00011C   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00011F   740B         MOV     A,#0xb
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
   \   000124   E9           MOV     A,R1
   \   000125   FE           MOV     R6,A
    652              zcl_mem_free( buf );
   \   000126                ; Setup parameters for call to function osal_mem_free
   \   000126   AA..         MOV     R2,?V0
   \   000128   AB..         MOV     R3,?V1
   \   00012A   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00012D   8002         SJMP    ??zclGeneral_SendAddSceneRequest_2
    653            }
    654            else
    655              status = ZMemError;
   \                     ??zclGeneral_SendAddSceneRequest_0:
   \   00012F   7E10         MOV     R6,#0x10
    656          
    657            return ( status );
   \                     ??zclGeneral_SendAddSceneRequest_2:
   \   000131                REQUIRE ?Subroutine4
   \   000131                ; // Fall through to label ?Subroutine4
    658          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7402         MOV     A,#0x2
   \   000004   12....       LCALL   ?DEALLOC_XSTACK8
   \   000007   7F10         MOV     R7,#0x10
   \   000009   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   EE           MOV     A,R6
   \   000001   2408         ADD     A,#0x8
   \   000003                REQUIRE ??Subroutine76_0
   \   000003                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   F5..         MOV     ?V4,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F5..         MOV     ?V5,A
   \   000006   75..00       MOV     ?V6,#0x0
   \   000009   78..         MOV     R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   EE           MOV     A,R6
   \   000004   2417         ADD     A,#0x17
   \   000006   F5..         MOV     ?V12,A
   \   000008   E4           CLR     A
   \   000009   3F           ADDC    A,R7
   \   00000A   F5..         MOV     ?V13,A
   \   00000C   EE           MOV     A,R6
   \   00000D   2407         ADD     A,#0x7
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   EE           MOV     A,R6
   \   000001   2403         ADD     A,#0x3
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine86_0
   \   000006                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    659          
    660          /*********************************************************************
    661           * @fn      zclGeneral_SendSceneRequest
    662           *
    663           * @brief   Send a Scene Request to a device.  You can also use the
    664           *          appropriate macro.
    665           *
    666           * @param   srcEP - Sending Apps endpoint
    667           * @param   dstAddr - where to send the request
    668           * @param   cmd - one of the following:
    669           *              COMMAND_SCENE_VIEW
    670           *              COMMAND_SCENE_REMOVE
    671           *              COMMAND_SCENE_REMOVE_ALL
    672           *              COMMAND_SCENE_STORE
    673           *              COMMAND_SCENE_RECALL
    674           *              COMMAND_SCENE_GET_MEMBERSHIP
    675           *              COMMAND_SCENE_ENHANCED_VIEW
    676           * @param   groupID - group ID
    677           * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
    678           *                    COMMAND_SCENE_GET_MEMBERSHIP)
    679           * @param   disableDefaultRsp - whether to disable the Default Response command
    680           * @param   seqNum - sequence number
    681           * @return  ZStatus_t
    682           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    683          ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneRequest:
    684                                                 uint8 cmd, uint16 groupID, uint8 sceneID,
    685                                                 uint8 disableDefaultRsp, uint8 seqNum )
    686          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    687            uint8 buf[3];
    688            uint8 len = 2;
   \   00000E   7C02         MOV     R4,#0x2
   \   000010   740F         MOV     A,#0xf
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine24 & 0xFFFF
    689          
    690            buf[0] = LO_UINT16( groupID );
    691            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_35:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    692          
    693            if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
   \   00001D   7403         MOV     A,#0x3
   \   00001F   6F           XRL     A,R7
   \   000020   600D         JZ      ??zclGeneral_SendSceneRequest_0
   \   000022   7406         MOV     A,#0x6
   \   000024   6F           XRL     A,R7
   \   000025   6008         JZ      ??zclGeneral_SendSceneRequest_0
    694            {
    695              buf[2] = sceneID;
   \   000027   EC           MOV     A,R4
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   ED           MOV     A,R5
   \   00002C   F0           MOVX    @DPTR,A
    696              len++;
   \   00002D   7C03         MOV     R4,#0x3
    697            }
    698          
    699            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    700                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    701                                      disableDefaultRsp, 0, seqNum, len, buf ) );
   \                     ??zclGeneral_SendSceneRequest_0:
   \   00002F                ; Setup parameters for call to function zcl_SendCommand
   \   00002F   A8..         MOV     R0,?XSP + 0
   \   000031   A9..         MOV     R1,?XSP + 1
   \   000033   88..         MOV     ?V2,R0
   \   000035   89..         MOV     ?V3,R1
   \   000037   78..         MOV     R0,#?V2
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   8C..         MOV     ?V2,R4
   \   00003E   75..00       MOV     ?V3,#0x0
   \   000041   78..         MOV     R0,#?V2
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7416         MOV     A,#0x16
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   E4           CLR     A
   \   000052   F5..         MOV     ?V2,A
   \   000054   78..         MOV     R0,#?V2
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   7418         MOV     A,#0x18
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   75..00       MOV     ?V1,#0x0
   \   000067   78..         MOV     R0,#?V1
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   75..01       MOV     ?V1,#0x1
   \   00006F   78..         MOV     R0,#?V1
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   EF           MOV     A,R7
   \   000075   F5..         MOV     ?V1,A
   \   000077   78..         MOV     R0,#?V1
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007C   7C05         MOV     R4,#0x5
   \   00007E   02....       LJMP    ?Subroutine0 & 0xFFFF
    702          }
    703          
    704          /*********************************************************************
    705           * @fn      zclGeneral_SendSceneResponse
    706           *
    707           * @brief   Send Group Response (not Group View Response)
    708           *
    709           * @param   srcEP - Sending application's endpoint
    710           * @param   dstAddr - where you want the message to go
    711           * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
    712           *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
    713           * @param   status - scene command status
    714           * @param   groupID - what group
    715           * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
    716           *
    717           * @return  ZStatus_t
    718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneResponse:
    720                                                  uint8 cmd, uint8 status, uint16 groupID,
    721                                                  uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
    722          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    723            uint8 buf[4];
    724            uint8 len = 1 + 2; // Status + Group ID
   \   00000E   7C03         MOV     R4,#0x3
    725          
    726            buf[0] = status;
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   ED           MOV     A,R5
   \   000017   F0           MOVX    @DPTR,A
   \   000018   7410         MOV     A,#0x10
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ??Subroutine87_0 & 0xFFFF
    727            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_216:
   \   000020   7401         MOV     A,#0x1
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
    728            buf[2] = HI_UINT16( groupID );
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E9           MOV     A,R1
   \   00002D   F0           MOVX    @DPTR,A
    729          
    730            if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
   \   00002E   EC           MOV     A,R4
   \   00002F   6F           XRL     A,R7
   \   000030   6011         JZ      ??zclGeneral_SendSceneResponse_0
    731            {
    732              buf[3] = sceneID;
   \   000032   7412         MOV     A,#0x12
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   EC           MOV     A,R4
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   D0E0         POP     A
   \   000040   F0           MOVX    @DPTR,A
    733              len++;
   \   000041   7C04         MOV     R4,#0x4
    734            }
    735          
    736            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    737                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    738                                    disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneResponse_0:
   \   000043                ; Setup parameters for call to function zcl_SendCommand
   \   000043   A8..         MOV     R0,?XSP + 0
   \   000045   A9..         MOV     R1,?XSP + 1
   \   000047   88..         MOV     ?V2,R0
   \   000049   89..         MOV     ?V3,R1
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   8C..         MOV     ?V2,R4
   \   000052   75..00       MOV     ?V3,#0x0
   \   000055   78..         MOV     R0,#?V2
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   7418         MOV     A,#0x18
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   E4           CLR     A
   \   000066   F5..         MOV     ?V2,A
   \   000068   78..         MOV     R0,#?V2
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   741A         MOV     A,#0x1a
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   75..01       MOV     ?V1,#0x1
   \   00007B   78..         MOV     R0,#?V1
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   78..         MOV     R0,#?V1
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   EF           MOV     A,R7
   \   000086   F5..         MOV     ?V1,A
   \   000088   78..         MOV     R0,#?V1
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008D   7C05         MOV     R4,#0x5
   \   00008F   7D00         MOV     R5,#0x0
   \   000091   EE           MOV     A,R6
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000096   740B         MOV     A,#0xb
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   7404         MOV     A,#0x4
   \   00009D   02....       LJMP    ??Subroutine73_0 & 0xFFFF
    739          }
    740          
    741          /*********************************************************************
    742           * @fn      zclGeneral_SendSceneViewResponse
    743           *
    744           * @brief   Call to send Scene (Enahced) View Response Command. You can
    745           *           also use the appropriate macro.
    746           *
    747           * @param   srcEP - Sending application's endpoint
    748           * @param   dstAddr - where you want the message to go
    749           * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
    750           * @param   status - scene command status
    751           * @param   scene - scene info
    752           *
    753           * @return  ZStatus_t
    754           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    755          ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneViewRsp:
    756                                                 uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
    757                                                 uint8 disableDefaultRsp, uint8 seqNum )
    758          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00000D   89..         MOV     ?V15,R1
   \   00000F   8C..         MOV     ?V14,R4
   \   000011   8D..         MOV     ?V7,R5
    759            uint8 *buf;
    760            uint8 *pBuf;
    761            uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
   \   000013   7804         MOV     R0,#0x4
   \   000015   741A         MOV     A,#0x1a
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine22 & 0xFFFF
    762            ZStatus_t stat;
    763          
    764            if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_31:
   \   00001D   F5..         MOV     ?V10,A
   \   00001F   E4           CLR     A
   \   000020   3F           ADDC    A,R7
   \   000021   F5..         MOV     ?V11,A
   \   000023   ED           MOV     A,R5
   \   000024   7013         JNZ     ??zclGeneral_SendSceneViewRsp_0
    765            {
    766              len += 2; // Transition Time
    767              len += scene->name[0] + 1; // string + 1 for length
    768          
    769              // Add something for the extension field length
    770              len += scene->extLen;
   \   000026   85..82       MOV     DPL,?V12
   \   000029   85..83       MOV     DPH,?V13
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   85..82       MOV     DPL,?V10
   \   000031   85..83       MOV     DPH,?V11
   \   000034   E0           MOVX    A,@DPTR
   \   000035   28           ADD     A,R0
   \   000036   2407         ADD     A,#0x7
   \   000038   F8           MOV     R0,A
    771            }
    772          
    773            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneViewRsp_0:
   \   000039   88..         MOV     ?V2,R0
   \   00003B   75..00       MOV     ?V3,#0x0
   \   00003E                ; Setup parameters for call to function osal_mem_alloc
   \   00003E   AA..         MOV     R2,?V2
   \   000040   AB..         MOV     R3,?V3
   \   000042   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000045   8A..         MOV     ?V0,R2
   \   000047   8B..         MOV     ?V1,R3
    774            if ( buf )
   \   000049   EA           MOV     A,R2
   \   00004A   45..         ORL     A,?V1
   \   00004C   7003         JNZ     $+5
   \   00004E   02....       LJMP    ??zclGeneral_SendSceneViewRsp_1 & 0xFFFF
    775            {
    776              pBuf = buf;
    777              *pBuf++ = status;
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   E5..         MOV     A,?V7
   \   000057   F0           MOVX    @DPTR,A
    778              *pBuf++ = LO_UINT16( scene->groupID );
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   12....       LCALL   ?Subroutine34 & 0xFFFF
    779              *pBuf++ = HI_UINT16( scene->groupID );
   \                     ??CrossCallReturnLabel_71:
   \   00005F   12....       LCALL   ?Subroutine21 & 0xFFFF
    780              *pBuf++ = scene->ID;
   \                     ??CrossCallReturnLabel_171:
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ?Subroutine40 & 0xFFFF
    781              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_77:
   \   00006B   E5..         MOV     A,?V7
   \   00006D   6003         JZ      $+5
   \   00006F   02....       LJMP    ??zclGeneral_SendSceneViewRsp_2 & 0xFFFF
    782              {
    783                uint16 transTime = scene->transTime;
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   12....       LCALL   ?Subroutine39 & 0xFFFF
    784                if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
   \                     ??CrossCallReturnLabel_223:
   \   000079   7441         MOV     A,#0x41
   \   00007B   65..         XRL     A,?V14
   \   00007D   701F         JNZ     ??zclGeneral_SendSceneViewRsp_3
    785                {
    786                  // Transition time is in 1/10s
    787                  transTime *= 10;
    788                  transTime += scene->transTime100ms;
   \   00007F   E8           MOV     A,R0
   \   000080   75F00A       MOV     B,#0xa
   \   000083   A4           MUL     AB
   \   000084   F8           MOV     R0,A
   \   000085   AAF0         MOV     R2,B
   \   000087   75F00A       MOV     B,#0xa
   \   00008A   E9           MOV     A,R1
   \   00008B   A4           MUL     AB
   \   00008C   2A           ADD     A,R2
   \   00008D   F9           MOV     R1,A
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   28           ADD     A,R0
   \   000099   F8           MOV     R0,A
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   39           ADDC    A,R1
   \   00009D   F9           MOV     R1,A
    789                }
    790          
    791                *pBuf++ = LO_UINT16( transTime );
   \                     ??zclGeneral_SendSceneViewRsp_3:
   \   00009E   E8           MOV     A,R0
   \   00009F   85..82       MOV     DPL,?V0
   \   0000A2   8B83         MOV     DPH,R3
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   F0           MOVX    @DPTR,A
    792                *pBuf++ = HI_UINT16( transTime );
   \   0000A9   E9           MOV     A,R1
   \   0000AA   85..82       MOV     DPL,?V0
   \   0000AD   8B83         MOV     DPH,R3
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   F0           MOVX    @DPTR,A
    793                *pBuf++ = scene->name[0]; // string length
   \   0000B5   85..82       MOV     DPL,?V10
   \   0000B8   85..83       MOV     DPH,?V11
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   85..82       MOV     DPL,?V0
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   E5..         MOV     A,?V0
   \   0000CA   2407         ADD     A,#0x7
   \   0000CC   F5..         MOV     ?V8,A
   \   0000CE   E4           CLR     A
   \   0000CF   35..         ADDC    A,?V1
   \   0000D1   F5..         MOV     ?V9,A
    794                if ( scene->name[0] != 0 )
   \   0000D3   85..82       MOV     DPL,?V10
   \   0000D6   85..83       MOV     DPH,?V11
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   FC           MOV     R4,A
   \   0000DB   6026         JZ      ??zclGeneral_SendSceneViewRsp_4
    795                {
    796                  zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   0000DD                ; Setup parameters for call to function osal_memcpy
   \   0000DD   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E3   7D00         MOV     R5,#0x0
   \   0000E5   AA..         MOV     R2,?V8
   \   0000E7   AB..         MOV     R3,?V9
   \   0000E9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EC   7403         MOV     A,#0x3
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
    797                  pBuf += scene->name[0]; // move pass name
   \   0000F1   85..82       MOV     DPL,?V10
   \   0000F4   85..83       MOV     DPH,?V11
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F8           MOV     R0,A
   \   0000F9   E5..         MOV     A,?V8
   \   0000FB   28           ADD     A,R0
   \   0000FC   F5..         MOV     ?V8,A
   \   0000FE   E4           CLR     A
   \   0000FF   35..         ADDC    A,?V9
   \   000101   F5..         MOV     ?V9,A
    798                }
    799          
    800                // Add the extension fields
    801                if ( scene->extLen > 0 )
   \                     ??zclGeneral_SendSceneViewRsp_4:
   \   000103   85..82       MOV     DPL,?V12
   \   000106   85..83       MOV     DPH,?V13
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   FC           MOV     R4,A
   \   00010B   6017         JZ      ??zclGeneral_SendSceneViewRsp_2
    802                  zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   00010D                ; Setup parameters for call to function osal_memcpy
   \   00010D   EE           MOV     A,R6
   \   00010E   2418         ADD     A,#0x18
   \   000110   12....       LCALL   ??Subroutine76_0 & 0xFFFF
    803              }
   \                     ??CrossCallReturnLabel_165:
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000116   7D00         MOV     R5,#0x0
   \   000118   AA..         MOV     R2,?V8
   \   00011A   AB..         MOV     R3,?V9
   \   00011C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00011F   7403         MOV     A,#0x3
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
    804          
    805              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    806                                      cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    807                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneViewRsp_2:
   \   000124                ; Setup parameters for call to function zcl_SendCommand
   \   000124   78..         MOV     R0,#?V0
   \   000126   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000129   78..         MOV     R0,#?V2
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012E   7421         MOV     A,#0x21
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000139   E4           CLR     A
   \   00013A   F5..         MOV     ?V2,A
   \   00013C   78..         MOV     R0,#?V2
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000141   7423         MOV     A,#0x23
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000149   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014C   75..01       MOV     ?V2,#0x1
   \   00014F   78..         MOV     R0,#?V2
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000154   78..         MOV     R0,#?V2
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000159   E5..         MOV     A,?V14
   \   00015B   F5..         MOV     ?V2,A
   \   00015D   78..         MOV     R0,#?V2
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000162   7C05         MOV     R4,#0x5
   \   000164   7D00         MOV     R5,#0x0
   \   000166   740B         MOV     A,#0xb
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00016E   A9..         MOV     R1,?V15
   \   000170   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000173   740B         MOV     A,#0xb
   \   000175   12....       LCALL   ?DEALLOC_XSTACK8
   \   000178   E9           MOV     A,R1
   \   000179   FE           MOV     R6,A
    808              zcl_mem_free( buf );
   \   00017A                ; Setup parameters for call to function osal_mem_free
   \   00017A   AA..         MOV     R2,?V0
   \   00017C   AB..         MOV     R3,?V1
   \   00017E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000181   8002         SJMP    ??zclGeneral_SendSceneViewRsp_5
    809            }
    810            else
    811              stat = ZMemError;
   \                     ??zclGeneral_SendSceneViewRsp_1:
   \   000183   7E10         MOV     R6,#0x10
    812          
    813            return ( stat );
   \                     ??zclGeneral_SendSceneViewRsp_5:
   \   000185   02....       LJMP    ?Subroutine4 & 0xFFFF
    814          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine87_0
   \   000003                ; // Fall through to label ??Subroutine87_0
    815          
    816          /*********************************************************************
    817           * @fn      zclGeneral_SendSceneGetMembershipResponse
    818           *
    819           * @brief   Call to send Scene Get Membership Response Command
    820           *
    821           * @param   srcEP - Sending application's endpoint
    822           * @param   dstAddr - where you want the message to go
    823           * @param   status - scene command status
    824           * @param   capacity - remaining capacity of the scene table
    825           * @param   sceneCnt - number of scenes in the scene list
    826           * @param   sceneList - list of scene IDs
    827           * @param   groupID - group ID that scene belongs to
    828           * @param   seqNum - sequence number
    829           *
    830           * @return  ZStatus_t
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneGetMembershipResponse:
    833                                                               uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
    834                                                               uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V6,R2
   \   000009   8B..         MOV     ?V7,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    836            uint8 *buf;
    837            uint8 *pBuf;
    838            uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
   \   00000F   7804         MOV     R0,#0x4
   \   000011   7412         MOV     A,#0x12
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V3,A
    839            uint8 i;
    840            ZStatus_t stat;
    841          
    842            if ( status == ZCL_STATUS_SUCCESS )
   \   000019   EE           MOV     A,R6
   \   00001A   7005         JNZ     ??zclGeneral_SendSceneGetMembershipResponse_0
    843            {
    844              len++; // Scene Count
    845              len += sceneCnt; // Scene List (Scene ID is a single octet)
   \   00001C   7405         MOV     A,#0x5
   \   00001E   25..         ADD     A,?V3
   \   000020   F8           MOV     R0,A
    846            }
    847          
    848            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_0:
   \   000021   88..         MOV     ?V4,R0
   \   000023   75..00       MOV     ?V5,#0x0
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   AA..         MOV     R2,?V4
   \   000028   AB..         MOV     R3,?V5
   \   00002A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV     ?V0,R2
   \   00002F   8B..         MOV     ?V1,R3
    849            if ( buf )
   \   000031   EA           MOV     A,R2
   \   000032   45..         ORL     A,?V1
   \   000034   7003         JNZ     $+5
   \   000036   02....       LJMP    ??zclGeneral_SendSceneGetMembershipResponse_1 & 0xFFFF
    850            {
    851              pBuf = buf;
    852              *pBuf++ = status;
   \   000039   EE           MOV     A,R6
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   F0           MOVX    @DPTR,A
    853              *pBuf++ = capacity;
   \   00003F   EF           MOV     A,R7
   \   000040   A3           INC     DPTR
   \   000041   F0           MOVX    @DPTR,A
   \   000042   7415         MOV     A,#0x15
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   12....       LCALL   ?Subroutine37 & 0xFFFF
    854              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_75:
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   F0           MOVX    @DPTR,A
    855              *pBuf++ = HI_UINT16( groupID );
   \   00004D   E9           MOV     A,R1
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   F0           MOVX    @DPTR,A
    856              if ( status == ZCL_STATUS_SUCCESS )
   \   000056   EE           MOV     A,R6
   \   000057   7036         JNZ     ??zclGeneral_SendSceneGetMembershipResponse_2
    857              {
    858                *pBuf++ = sceneCnt;
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E5..         MOV     A,?V3
   \   000063   F0           MOVX    @DPTR,A
   \   000064   EA           MOV     A,R2
   \   000065   2405         ADD     A,#0x5
   \   000067   F8           MOV     R0,A
   \   000068   E4           CLR     A
   \   000069   35..         ADDC    A,?V1
   \   00006B   F9           MOV     R1,A
    859                for ( i = 0; i < sceneCnt; i++ )
   \   00006C   75..00       MOV     ?V8,#0x0
   \   00006F   7413         MOV     A,#0x13
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000077   800F         SJMP    ??zclGeneral_SendSceneGetMembershipResponse_3
    860                  *pBuf++ = sceneList[i];
   \                     ??zclGeneral_SendSceneGetMembershipResponse_4:
   \   000079   AC..         MOV     R4,?V8
   \   00007B   EA           MOV     A,R2
   \   00007C   2C           ADD     A,R4
   \   00007D   F582         MOV     DPL,A
   \   00007F   E4           CLR     A
   \   000080   3B           ADDC    A,R3
   \   000081   F583         MOV     DPH,A
   \   000083   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000086   05..         INC     ?V8
   \                     ??zclGeneral_SendSceneGetMembershipResponse_3:
   \   000088   E5..         MOV     A,?V8
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V3
   \   00008D   40EA         JC      ??zclGeneral_SendSceneGetMembershipResponse_4
    861              }
    862          
    863              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    864                                      COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
    865                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_2:
   \   00008F                ; Setup parameters for call to function zcl_SendCommand
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   78..         MOV     R0,#?V4
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   741C         MOV     A,#0x1c
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A4   E4           CLR     A
   \   0000A5   F5..         MOV     ?V4,A
   \   0000A7   78..         MOV     R0,#?V4
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   741E         MOV     A,#0x1e
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B7   75..01       MOV     ?V3,#0x1
   \   0000BA   78..         MOV     R0,#?V3
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   78..         MOV     R0,#?V3
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C4   75..06       MOV     ?V3,#0x6
   \   0000C7   78..         MOV     R0,#?V3
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   7C05         MOV     R4,#0x5
   \   0000CE   7D00         MOV     R5,#0x0
   \   0000D0   AA..         MOV     R2,?V6
   \   0000D2   AB..         MOV     R3,?V7
   \   0000D4   A9..         MOV     R1,?V2
   \   0000D6   12....       LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D9   740B         MOV     A,#0xb
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DE   E9           MOV     A,R1
   \   0000DF   F5..         MOV     ?V3,A
    866              zcl_mem_free( buf );
   \   0000E1                ; Setup parameters for call to function osal_mem_free
   \   0000E1   AA..         MOV     R2,?V0
   \   0000E3   AB..         MOV     R3,?V1
   \   0000E5   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E8   8003         SJMP    ??zclGeneral_SendSceneGetMembershipResponse_5
    867            }
    868            else
    869              stat = ZMemError;
   \                     ??zclGeneral_SendSceneGetMembershipResponse_1:
   \   0000EA   75..10       MOV     ?V3,#0x10
    870          
    871            return ( stat );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_5:
   \   0000ED   A9..         MOV     R1,?V3
   \   0000EF   7F0A         MOV     R7,#0xa
   \   0000F1   02....       LJMP    ?BANKED_LEAVE_XDATA
    872          }
    873          
    874          #ifdef ZCL_LIGHT_LINK_ENHANCE
    875          /*********************************************************************
    876           * @fn      zclGeneral_SendSceneCopy
    877           *
    878           * @brief   Send Scene Copy Request to a device
    879           *
    880           * @param   srcEP - sending application's endpoint
    881           * @param   dstAddr - where to send the request
    882           * @param   mode - how scene copy is to proceed
    883           * @param   groupIDFrom - group from which scene to be copied
    884           * @param   sceneIDFrom - scene from which scene to be copied
    885           * @param   groupIDTo - group to which scene to be copied
    886           * @param   sceneIDTo - scene to which scene to be copied
    887           * @param   disableDefaultRsp - disable Default Response command
    888           * @param   seqNum - the identification number for the transaction
    889           *
    890           * @return  ZStatus_t
    891           */
    892          ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
    893                                              uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
    894                                              uint16 groupIDTo, uint8 sceneIDTo,
    895                                              uint8 disableDefaultRsp, uint8 seqNum )
    896          {
    897            uint8 buf[7];
    898          
    899            buf[0] = mode;
    900            buf[1] = LO_UINT16( groupIDFrom );
    901            buf[2] = HI_UINT16( groupIDFrom );
    902            buf[3] = sceneIDFrom;
    903            buf[4] = LO_UINT16( groupIDTo );
    904            buf[5] = HI_UINT16( groupIDTo );
    905            buf[6] = sceneIDTo;
    906          
    907            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    908                                      COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    909                                      disableDefaultRsp, 0, seqNum, 7, buf ) );
    910          }
    911          
    912          /*********************************************************************
    913           * @fn      zclGeneral_SendSceneCopyResponse
    914           *
    915           * @brief   Send Scene Copy Response to a device
    916           *
    917           * @param   srcEP - sending application's endpoint
    918           * @param   dstAddr - where to send the request
    919           * @param   status - status of copy scene attemp
    920           * @param   groupIDFrom - group from which scene was copied
    921           * @param   sceneIDFrom - scene from which scene was copied
    922           * @param   disableDefaultRsp - disable Default Response command
    923           * @param   seqNum - the identification number for the transaction
    924           *
    925           * @return  ZStatus_t
    926           */
    927          ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
    928                                                      uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
    929                                                      uint8 disableDefaultRsp, uint8 seqNum )
    930          {
    931            uint8 buf[4];
    932          
    933            buf[0] = status;
    934            buf[1] = LO_UINT16( groupIDFrom );
    935            buf[2] = HI_UINT16( groupIDFrom );
    936            buf[3] = sceneIDFrom;
    937          
    938            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    939                                      COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    940                                      disableDefaultRsp, 0, seqNum, 4, buf ) );
    941          }
    942          #endif // ZCL_LIGHT_LINK_ENHANCE
    943          #endif // ZCL_SCENES
    944          
    945          #ifdef ZCL_ON_OFF
    946          #ifdef ZCL_LIGHT_LINK_ENHANCE
    947          /*********************************************************************
    948           * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
    949           *
    950           * @brief   Call to send out an Off with Effect Command.
    951           *
    952           * @param   srcEP - Sending application's endpoint
    953           * @param   dstAddr - where you want the message to go
    954           * @param   effectId - fading effect to use when switching light off
    955           * @param   effectVariant - which variant of effect to be triggered
    956           * @param   disableDefaultRsp - whether to disable the Default Response command
    957           * @param   seqNum - sequence number
    958           *
    959           * @return  ZStatus_t
    960           */
    961          ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
    962                                                           uint8 effectId, uint8 effectVariant,
    963                                                           uint8 disableDefaultRsp, uint8 seqNum )
    964          {
    965            uint8 buf[2];
    966          
    967            buf[0] = effectId;
    968            buf[1] = effectVariant;
    969          
    970            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
    971                                    COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    972                                    disableDefaultRsp, 0, seqNum, 2, buf );
    973          }
    974          
    975          /*********************************************************************
    976           * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
    977           *
    978           * @brief   Call to send out an On with Timed Off Command.
    979           *
    980           * @param   srcEP - Sending application's endpoint
    981           * @param   dstAddr - where you want the message to go
    982           * @param   onOffCtrl - how the lamp is to be operated
    983           * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
    984           * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
    985           * @param   disableDefaultRsp - whether to disable the Default Response command
    986           * @param   seqNum - sequence number
    987           *
    988           * @return  ZStatus_t
    989           */
    990          ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
    991                                                             zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
    992                                                             uint8 disableDefaultRsp, uint8 seqNum )
    993          {
    994            uint8 buf[5];
    995          
    996            buf[0] = onOffCtrl.byte;
    997            buf[1] = LO_UINT16( onTime );
    998            buf[2] = HI_UINT16( onTime );
    999            buf[3] = LO_UINT16( offWaitTime );
   1000            buf[4] = HI_UINT16( offWaitTime );
   1001          
   1002            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
   1003                                    COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1004                                    disableDefaultRsp, 0, seqNum, 5, buf );
   1005          }
   1006          #endif // ZCL_LIGHT_LINK_ENHANCE
   1007          #endif // ZCL_ON_OFF
   1008          
   1009          #ifdef ZCL_LEVEL_CTRL
   1010          /*********************************************************************
   1011           * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
   1012           *
   1013           * @brief   Call to send out a Level Control Request. You can also use
   1014           *          the appropriate macro.
   1015           *
   1016           * @param   srcEP - Sending application's endpoint
   1017           * @param   dstAddr - where you want the message to go
   1018           * @param   cmd - one of the following:
   1019           *              COMMAND_LEVEL_MOVE_TO_LEVEL or
   1020           *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
   1021           * @param   level - what level to move to
   1022           * @param   transitionTime - how long to take to get to the level (in seconds)
   1023           *
   1024           * @return  ZStatus_t
   1025           */
   1026          ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1027                                                                   uint8 cmd, uint8 level, uint16 transTime,
   1028                                                                   uint8 disableDefaultRsp, uint8 seqNum )
   1029          {
   1030            uint8 buf[3];
   1031          
   1032            buf[0] = level;
   1033            buf[1] = LO_UINT16( transTime );
   1034            buf[2] = HI_UINT16( transTime );
   1035          
   1036            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1037                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1038                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1039          }
   1040          
   1041          /*********************************************************************
   1042           * @fn      zclGeneral_SendLevelControlMoveRequest
   1043           *
   1044           * @brief   Call to send out a Level Control Request. You can also use
   1045           *          the appropriate macro.
   1046           *
   1047           * @param   srcEP - Sending application's endpoint
   1048           * @param   dstAddr - where you want the message to go
   1049           * @param   cmd - one of the following:
   1050           *              COMMAND_LEVEL_MOVE or
   1051           *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
   1052           * @param   moveMode - LEVEL_MOVE_UP or
   1053           *                     LEVEL_MOVE_DOWN
   1054           * @param   rate - number of steps to take per second
   1055           *
   1056           * @return  ZStatus_t
   1057           */
   1058          ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1059                                                            uint8 cmd, uint8 moveMode, uint8 rate,
   1060                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1061          {
   1062            uint8 buf[2];
   1063          
   1064            buf[0] = moveMode;
   1065            buf[1] = rate;
   1066          
   1067            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1068                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1069                                    disableDefaultRsp, 0, seqNum, 2, buf );
   1070          }
   1071          
   1072          /*********************************************************************
   1073           * @fn      zclGeneral_SendLevelControlStepRequest
   1074           *
   1075           * @brief   Call to send out a Level Control Request. You can also use
   1076           *          the appropriate macro.
   1077           *
   1078           * @param   srcEP - Sending application's endpoint
   1079           * @param   dstAddr - where you want the message to go
   1080           * @param   cmd - one of the following:
   1081           *              COMMAND_LEVEL_STEP
   1082           *              COMMAND_LEVEL_STEP_WITH_ON_OFF
   1083           * @param   stepMode - LEVEL_STEP_UP or
   1084           *                     LEVEL_STEP_DOWN
   1085           * @param   amount - number of levels to step
   1086           * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
   1087           *
   1088           * @return  ZStatus_t
   1089           */
   1090          ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
   1091                                                            uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
   1092                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1093          {
   1094            uint8 buf[4];
   1095          
   1096            buf[0] = stepMode;
   1097            buf[1] = stepSize;
   1098            buf[2] = LO_UINT16( transTime );
   1099            buf[3] = HI_UINT16( transTime );
   1100          
   1101            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1102                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1103                                    disableDefaultRsp, 0, seqNum, 4, buf );
   1104          }
   1105          
   1106          /*********************************************************************
   1107           * @fn      zclGeneral_SendLevelControlStepRequest
   1108           *
   1109           * @brief   Call to send out a Level Control Request. You can also use
   1110           *          the appropriate macro.
   1111           *
   1112           * @param   srcEP - Sending application's endpoint
   1113           * @param   dstAddr - where you want the message to go
   1114           * @param   cmd - one of the following:
   1115           *              COMMAND_LEVEL_STOP
   1116           *              COMMAND_LEVEL_STOP_WITH_ON_OFF
   1117           *
   1118           * @return  ZStatus_t
   1119           */
   1120          ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1121                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1122          {
   1123            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1124                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1125                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   1126          }
   1127          #endif // ZCL_LEVEL_CTRL
   1128          
   1129          #ifdef ZCL_ALARMS
   1130          /*********************************************************************
   1131           * @fn      zclGeneral_SendAlarm
   1132           *
   1133           * @brief   Call to send out an Alarm Request Command
   1134           *
   1135           * @param   srcEP - Sending application's endpoint
   1136           * @param   dstAddr - where you want the message to go
   1137           * @param   cmd - COMMAND_ALARMS_ALARM
   1138           * @param   alarmCode - code for the cause of the alarm
   1139           * @param   clusterID - cluster whose attribute generate the alarm
   1140           *
   1141           * @return  ZStatus_t
   1142           */
   1143          ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
   1144                                          uint8 alarmCode, uint16 clusterID,
   1145                                          uint8 disableDefaultRsp, uint8 seqNum )
   1146          {
   1147            uint8 buf[3];
   1148          
   1149            buf[0] = alarmCode;
   1150            buf[1] = LO_UINT16( clusterID );
   1151            buf[2] = HI_UINT16( clusterID );
   1152          
   1153            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1154                                    COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1155                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1156          }
   1157          
   1158          /*********************************************************************
   1159           * @fn      zclGeneral_SendAlarmReset
   1160           *
   1161           * @brief   Call to send out an Alarm Reset Command
   1162           *
   1163           * @param   srcEP - Sending application's endpoint
   1164           * @param   dstAddr - where you want the message to go
   1165           * @param   alarmCode - code for the cause of the alarm
   1166           * @param   clusterID - cluster whose attribute generate the alarm
   1167           *
   1168           * @return  ZStatus_t
   1169          */
   1170          ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
   1171                                               uint8 alarmCode, uint16 clusterID,
   1172                                               uint8 disableDefaultRsp, uint8 seqNum )
   1173          {
   1174            uint8 buf[3];
   1175          
   1176            buf[0] = alarmCode;
   1177            buf[1] = LO_UINT16( clusterID );
   1178            buf[2] = HI_UINT16( clusterID );
   1179          
   1180            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1181                                    COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1182                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1183          }
   1184          
   1185          /*********************************************************************
   1186           * @fn      zclGeneral_SendAlarmGetResponse
   1187           *
   1188           * @brief   Call to send out an Alarm Get Response Command
   1189           *
   1190           * @param   srcEP - Sending application's endpoint
   1191           * @param   dstAddr - where you want the message to go
   1192           * @param   status - SUCCESS or NOT_FOUND
   1193           * @param   alarmCode - code for the cause of the alarm
   1194           * @param   clusterID - cluster whose attribute generate the alarm
   1195           * @param   timeStamp - time at which the alarm occured
   1196           *
   1197           * @return  ZStatus_t
   1198           */
   1199          ZStatus_t zclGeneral_SendAlarmGetResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1200                                                     uint8 status, uint8 alarmCode, uint16 clusterID,
   1201                                                     uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
   1202          {
   1203            uint8 buf[8];
   1204            uint8 len = 1; // Status
   1205          
   1206            buf[0] = status;
   1207            if ( status == ZCL_STATUS_SUCCESS )
   1208            {
   1209              len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
   1210              buf[1] = alarmCode;
   1211              buf[2] = LO_UINT16( clusterID );
   1212              buf[3] = HI_UINT16( clusterID );
   1213              zcl_buffer_uint32( &buf[4], timeStamp );
   1214            }
   1215          
   1216            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1217                                    COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1218                                    disableDefaultRsp, 0, seqNum, len, buf );
   1219          }
   1220          
   1221          #ifdef SE_UK_EXT
   1222          /*********************************************************************
   1223           * @fn      zclGeneral_SendAlarmGetEventLog
   1224           *
   1225           * @brief   Call to send out an Alarm Get Event Log Command
   1226           *
   1227           * @param   srcEP - Sending application's endpoint
   1228           * @param   dstAddr - where you want the message to go
   1229           * @param   pEventLog - pointer to Get Event Log Command
   1230           * @param   disableDefaultRsp - disable default response
   1231           * @param   seqNum - ZCL sequence number
   1232           *
   1233           * @return  ZStatus_t
   1234           */
   1235          ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1236                                                     zclGetEventLog_t *pEventLog,
   1237                                                     uint8 disableDefaultRsp, uint8 seqNum )
   1238          {
   1239            uint8 buf[10];
   1240          
   1241            buf[0] = pEventLog->logID;
   1242            zcl_buffer_uint32( &buf[1], pEventLog->startTime );
   1243            zcl_buffer_uint32( &buf[5], pEventLog->endTime );
   1244            buf[9] = pEventLog->numEvents;
   1245          
   1246            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1247                                    COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1248                                    disableDefaultRsp, 0, seqNum, 10, buf );
   1249          }
   1250          
   1251          /*********************************************************************
   1252           * @fn      zclGeneral_SendAlarmPublishEventLog
   1253           *
   1254           * @brief   Call to send out an Alarm Publish Event Log Command
   1255           *
   1256           * @param   srcEP - Sending application's endpoint
   1257           * @param   dstAddr - where you want the message to go
   1258           * @param   pEventLog - pointer to Publish Event Log Command
   1259           * @param   disableDefaultRsp - disable default response
   1260           * @param   seqNum - ZCL sequence number
   1261           *
   1262           * @return  ZStatus_t
   1263           */
   1264          ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1265                                                         zclPublishEventLog_t *pEventLog,
   1266                                                         uint8 disableDefaultRsp, uint8 seqNum )
   1267          {
   1268            uint8 *buf;
   1269            uint8 *pBuf;
   1270            uint8 bufLen;
   1271          
   1272            // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
   1273            bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
   1274          
   1275            buf = zcl_mem_alloc( bufLen );
   1276            if ( buf == NULL )
   1277            {
   1278              return (ZMemError);
   1279            }
   1280          
   1281            pBuf = buf;
   1282            *pBuf++ = pEventLog->logID;
   1283            *pBuf++ = pEventLog->cmdIndex;
   1284            *pBuf++ = pEventLog->totalCmds;
   1285          
   1286            for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
   1287            {
   1288              zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
   1289          
   1290              *pBuf++ = pLogs->eventId;
   1291              pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
   1292            }
   1293          
   1294            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1295                                    COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1296                                    disableDefaultRsp, 0, seqNum, bufLen, buf );
   1297          }
   1298          #endif // SE_UK_EXT
   1299          #endif // ZCL_ALARMS
   1300          
   1301          #ifdef ZCL_LOCATION
   1302          /*********************************************************************
   1303           * @fn      zclGeneral_SendLocationSetAbsolute
   1304           *
   1305           * @brief   Call to send out a Set Absolute Location Command
   1306           *
   1307           * @param   srcEP - Sending application's endpoint
   1308           * @param   dstAddr - where you want the message to go
   1309           * @param   absLoc - absolute location info
   1310           *
   1311           * @return  ZStatus_t
   1312           */
   1313          ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
   1314                                                        zclLocationAbsolute_t *absLoc,
   1315                                                        uint8 disableDefaultRsp, uint8 seqNum )
   1316          {
   1317             uint8 buf[10]; // 5 fields (2 octects each)
   1318          
   1319             buf[0] = LO_UINT16( absLoc->coordinate1 );
   1320             buf[1] = HI_UINT16( absLoc->coordinate1 );
   1321             buf[2] = LO_UINT16( absLoc->coordinate2 );
   1322             buf[3] = HI_UINT16( absLoc->coordinate2 );
   1323             buf[4] = LO_UINT16( absLoc->coordinate3 );
   1324             buf[5] = HI_UINT16( absLoc->coordinate3 );
   1325             buf[6] = LO_UINT16( absLoc->power );
   1326             buf[7] = HI_UINT16( absLoc->power );
   1327             buf[8] = LO_UINT16( absLoc->pathLossExponent );
   1328             buf[9] = HI_UINT16( absLoc->pathLossExponent );
   1329          
   1330             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1331                                     COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
   1332                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
   1333          }
   1334          
   1335          /*********************************************************************
   1336           * @fn      zclGeneral_SendLocationSetDevCfg
   1337           *
   1338           * @brief   Call to send out a Set Device Configuration Command
   1339           *
   1340           * @param   srcEP - Sending application's endpoint
   1341           * @param   dstAddr - where you want the message to go
   1342           * @param   devCfg - device configuration info
   1343           *
   1344           * @return  ZStatus_t
   1345           */
   1346          ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1347                                                      zclLocationDevCfg_t *devCfg,
   1348                                                      uint8 disableDefaultRsp, uint8 seqNum )
   1349          {
   1350             uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
   1351          
   1352             buf[0] = LO_UINT16( devCfg->power );
   1353             buf[1] = HI_UINT16( devCfg->power );
   1354             buf[2] = LO_UINT16( devCfg->pathLossExponent );
   1355             buf[3] = HI_UINT16( devCfg->pathLossExponent );
   1356             buf[4] = LO_UINT16( devCfg->calcPeriod );
   1357             buf[5] = HI_UINT16( devCfg->calcPeriod );
   1358             buf[6] = devCfg->numMeasurements;
   1359             buf[7] = LO_UINT16( devCfg->reportPeriod );
   1360             buf[8] = HI_UINT16( devCfg->reportPeriod );
   1361          
   1362             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1363                                     COMMAND_LOCATION_SET_DEV_CFG, TRUE,
   1364                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
   1365          }
   1366          
   1367          /*********************************************************************
   1368           * @fn      zclGeneral_SendLocationGetDevCfg
   1369           *
   1370           * @brief   Call to send out a Get Device Configuration Command
   1371           *
   1372           * @param   srcEP - Sending application's endpoint
   1373           * @param   dstAddr - where you want the message to go
   1374           * @param   targetAddr - device for which location parameters are being requested
   1375           *
   1376           * @return  ZStatus_t
   1377           */
   1378          ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1379                                                      uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
   1380          {
   1381            uint8 buf[8];
   1382          
   1383            zcl_memcpy( buf, targetAddr, 8 );
   1384          
   1385            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1386                                    COMMAND_LOCATION_GET_DEV_CFG, TRUE,
   1387                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
   1388          }
   1389          
   1390          /*********************************************************************
   1391           * @fn      zclGeneral_SendLocationGetData
   1392           *
   1393           * @brief   Call to send out a Get Location Data Command
   1394           *
   1395           * @param   srcEP - Sending application's endpoint
   1396           * @param   dstAddr - where you want the message to go
   1397           * @param   locaData - location information and channel parameters that are requested.
   1398           *
   1399           * @return  ZStatus_t
   1400           */
   1401          ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
   1402                                                    zclLocationGetData_t *locData,
   1403                                                    uint8 disableDefaultRsp, uint8 seqNum )
   1404          {
   1405            uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
   1406            uint8 *pBuf = buf;
   1407            uint8 len = 2; // bitmap + number responses
   1408          
   1409            *pBuf  = locData->absoluteOnly;
   1410            *pBuf |= locData->recalculate << 1;
   1411            *pBuf |= locData->brdcastIndicator << 2;
   1412            *pBuf |= locData->brdcastResponse << 3;
   1413            *pBuf |= locData->compactResponse << 4;
   1414            pBuf++;  // move past the bitmap field
   1415          
   1416            *pBuf++ = locData->numResponses;
   1417          
   1418            if ( locData->brdcastIndicator == 0 )
   1419            {
   1420              zcl_memcpy( pBuf, locData->targetAddr, 8 );
   1421              len += 8; // ieee addr
   1422            }
   1423          
   1424            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1425                                    COMMAND_LOCATION_GET_DATA, TRUE,
   1426                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1427          }
   1428          
   1429          /*********************************************************************
   1430           * @fn      zclGeneral_SendLocationDevCfgResponse
   1431           *
   1432           * @brief   Call to send out a Device Configuration Response Command
   1433           *
   1434           * @param   srcEP - Sending application's endpoint
   1435           * @param   dstAddr - where you want the message to go
   1436           * @param   devCfg - device's location parameters that are requested
   1437           *
   1438           * @return  ZStatus_t
   1439           */
   1440          ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1441                                                           zclLocationDevCfgRsp_t *devCfg,
   1442                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1443          {
   1444            uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
   1445            uint8 len = 1; // Status
   1446          
   1447            buf[0] = devCfg->status;
   1448            if ( devCfg->status == ZCL_STATUS_SUCCESS )
   1449            {
   1450              buf[1] = LO_UINT16( devCfg->data.power );
   1451              buf[2] = HI_UINT16( devCfg->data.power );
   1452              buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
   1453              buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
   1454              buf[5] = LO_UINT16( devCfg->data.calcPeriod );
   1455              buf[6] = HI_UINT16( devCfg->data.calcPeriod );
   1456              buf[7] = devCfg->data.numMeasurements;
   1457              buf[8] = LO_UINT16( devCfg->data.reportPeriod );
   1458              buf[9] = HI_UINT16( devCfg->data.reportPeriod );
   1459              len += 9;
   1460            }
   1461          
   1462            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1463                                    COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
   1464                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1465          }
   1466          
   1467          /*********************************************************************
   1468           * @fn      zclGeneral_SendLocationData
   1469           *
   1470           * @brief   Call to send out location data
   1471           *
   1472           * @param   srcEP - Sending application's endpoint
   1473           * @param   dstAddr - where you want the message to go
   1474           * @param   status - indicates whether response to request was successful or not
   1475           * @param   locData - location information and channel parameters being sent
   1476           *
   1477           * @return  ZStatus_t
   1478           */
   1479          ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1480                                                 uint8 status, zclLocationData_t *locData,
   1481                                                 uint8 disableDefaultRsp, uint8 seqNum )
   1482          {
   1483            uint8 buf[16];
   1484            uint8 *pBuf = buf;
   1485            uint8 len = 0;
   1486          
   1487            if ( cmd == COMMAND_LOCATION_DATA_RSP )
   1488            {
   1489              // Only response command includes a status field
   1490              *pBuf++ = status;
   1491              len++;
   1492            }
   1493          
   1494            if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
   1495            {
   1496              // Notification or Response with successful status
   1497              *pBuf++ = locData->type;
   1498              *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
   1499              *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
   1500              *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
   1501              *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
   1502              len += 5;
   1503          
   1504              if ( locationType2D(locData->type) == 0 )
   1505              {
   1506                // 2D location doesn't have coordinate 3
   1507                *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
   1508                *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
   1509                len += 2;
   1510              }
   1511          
   1512              if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1513              {
   1514                // Compact notification doesn't include these fields
   1515                *pBuf++ = LO_UINT16( locData->absLoc.power );
   1516                *pBuf++ = HI_UINT16( locData->absLoc.power );
   1517                *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
   1518                *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
   1519                len += 4;
   1520              }
   1521          
   1522              if ( locationTypeAbsolute(locData->type) == 0 )
   1523              {
   1524                // Absolute location doesn't include these fields
   1525                if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1526                {
   1527                  // Compact notification doesn't include this field
   1528                  *pBuf++ = locData->calcLoc.locationMethod;
   1529                  len++;
   1530                }
   1531          
   1532                *pBuf++ = locData->calcLoc.qualityMeasure;
   1533                *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
   1534                *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
   1535                len += 3;
   1536              }
   1537            }
   1538          
   1539            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1540                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1541                                    disableDefaultRsp, 0, seqNum, len, buf );
   1542          }
   1543          #endif // ZCL_LOCATION
   1544          
   1545          /*********************************************************************
   1546           * @fn      zclGeneral_FindCallbacks
   1547           *
   1548           * @brief   Find the callbacks for an endpoint
   1549           *
   1550           * @param   endpoint - endpoint to find the application callbacks for
   1551           *
   1552           * @return  pointer to the callbacks
   1553           */
   1554          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
   1555          {
   1556            zclGenCBRec_t *pCBs;
   1557          
   1558            pCBs = zclGenCBs;
   1559            while ( pCBs )
   1560            {
   1561              if ( pCBs->endpoint == endpoint )
   1562                return ( pCBs->CBs );
   1563              pCBs = pCBs->next;
   1564            }
   1565            return ( (zclGeneral_AppCallbacks_t *)NULL );
   1566          }
   1567          
   1568          /*********************************************************************
   1569           * @fn      zclGeneral_HdlIncoming
   1570           *
   1571           * @brief   Callback from ZCL to process incoming Commands specific
   1572           *          to this cluster library or Profile commands for attributes
   1573           *          that aren't in the attribute list
   1574           *
   1575           *
   1576           * @param   pInMsg - pointer to the incoming message
   1577           *
   1578           * @return  ZStatus_t
   1579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1580          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlIncoming:
   1581          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1582            ZStatus_t stat = ZSuccess;
   1583          
   1584          #if defined ( INTER_PAN )
   1585            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   1586              return ( stat ); // Cluster not supported thru Inter-PAN
   1587          #endif
   1588            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   5407         ANL     A,#0x7
   \   00000D   6401         XRL     A,#0x1
   \   00000F   7007         JNZ     ??zclGeneral_HdlIncoming_0
   1589            {
   1590              // Is this a manufacturer specific command?
   1591              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   1592              {
   1593                stat = zclGeneral_HdlInSpecificCommands( pInMsg );
   \   000011                ; Setup parameters for call to function zclGeneral_HdlInSpecificCommands
   \   000011   12....       LCALL   `??zclGeneral_HdlInSpecificCommands::?relay`; Banked call to: zclGeneral_HdlInSpecificCommands
   \   000014   E9           MOV     A,R1
   \   000015   F9           MOV     R1,A
   \   000016   8002         SJMP    ??zclGeneral_HdlIncoming_1
   1594              }
   1595              else
   1596              {
   1597                // We don't support any manufacturer specific command.
   1598                stat = ZFailure;
   1599              }
   1600            }
   1601            else
   1602            {
   1603              // Handle all the normal (Read, Write...) commands -- should never get here
   1604              stat = ZFailure;
   \                     ??zclGeneral_HdlIncoming_0:
   \   000018   7901         MOV     R1,#0x1
   1605            }
   1606            return ( stat );
   \                     ??zclGeneral_HdlIncoming_1:
   \   00001A   02....       LJMP    ?Subroutine5 & 0xFFFF
   1607          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1608          
   1609          /*********************************************************************
   1610           * @fn      zclGeneral_HdlInSpecificCommands
   1611           *
   1612           * @brief   Callback from ZCL to process incoming Commands specific
   1613           *          to this cluster library
   1614          
   1615           * @param   pInMsg - pointer to the incoming message
   1616           *
   1617           * @return  ZStatus_t
   1618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1619          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlInSpecificCommands:
   1620          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1621            ZStatus_t stat;
   1622            zclGeneral_AppCallbacks_t *pCBs;
   1623          
   1624            // make sure endpoint exists
   1625            pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
   \   000005   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000008   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00000B   FC           MOV     R4,A
   \   00000C   90....       MOV     DPTR,#zclGenCBs
   \                     ??zclGeneral_HdlInSpecificCommands_0:
   \   00000F   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000012   605A         JZ      ??zclGeneral_HdlInSpecificCommands_1
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6C           XRL     A,R4
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   70ED         JNZ     ??zclGeneral_HdlInSpecificCommands_0
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FC           MOV     R4,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FD           MOV     R5,A
   1626            if ( pCBs == NULL )
   \   00002A   EC           MOV     A,R4
   \   00002B   4D           ORL     A,R5
   \   00002C   6040         JZ      ??zclGeneral_HdlInSpecificCommands_1
   1627              return ( ZFailure );
   1628          
   1629            switch ( pInMsg->msg->clusterId )
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V1,A
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclGeneral_HdlInSpecificComman_0`:
   \   000042   0000         DW        0
   \   000044   06           DB        6
   \   000045   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   000047   ....         DW        ??zclGeneral_HdlInSpecificCommands_2
   \   000049   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   00004B   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   00004D   ....         DW        ??zclGeneral_HdlInSpecificCommands_3
   \   00004F   ....         DW        ??zclGeneral_HdlInSpecificCommands_4
   \   000051   ....         DW        ??zclGeneral_HdlInSpecificCommands_5
   \   000053   ....         DW        ??zclGeneral_HdlInSpecificCommands_6
   1630            {
   1631          #ifdef ZCL_BASIC
   1632              case ZCL_CLUSTER_ID_GEN_BASIC:
   1633                stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_2:
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   5408         ANL     A,#0x8
   \   00005E   701E         JNZ     ??zclGeneral_HdlInSpecificCommands_7
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6004         JZ      ??zclGeneral_HdlInSpecificCommands_8
   \                     ??zclGeneral_HdlInSpecificCommands_1:
   \   00006E   7901         MOV     R1,#0x1
   \   000070   807E         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   \                     ??zclGeneral_HdlInSpecificCommands_8:
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000079   6003         JZ      ??zclGeneral_HdlInSpecificCommands_7
   \   00007B                ; Setup parameters for indirect call
   \   00007B   12....       LCALL   ?CALL_IND
   \                     ??zclGeneral_HdlInSpecificCommands_7:
   \   00007E   7900         MOV     R1,#0x0
   \   000080   806E         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   1634                break;
   1635          #endif // ZCL_BASIC
   1636          
   1637          #ifdef ZCL_IDENTIFY
   1638              case ZCL_CLUSTER_ID_GEN_IDENTIFY:
   1639                stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_3:
   \   000082                ; Setup parameters for call to function zclGeneral_ProcessInIdentity
   \   000082   12....       LCALL   `??zclGeneral_ProcessInIdentity::?relay`; Banked call to: zclGeneral_ProcessInIdentity
   \   000085   8028         SJMP    ??zclGeneral_HdlInSpecificCommands_10
   1640                break;
   1641          #endif // ZCL_IDENTIFY
   1642          
   1643          #ifdef ZCL_GROUPS
   1644              case ZCL_CLUSTER_ID_GEN_GROUPS:
   1645                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_4:
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   5408         ANL     A,#0x8
   \   000090   7005         JNZ     ??zclGeneral_HdlInSpecificCommands_11
   1646                  stat = zclGeneral_ProcessInGroupsServer( pInMsg );
   \   000092                ; Setup parameters for call to function zclGeneral_ProcessInGroupsServer
   \   000092   12....       LCALL   `??zclGeneral_ProcessInGroupsServer::?relay`; Banked call to: zclGeneral_ProcessInGroupsServer
   \   000095   8018         SJMP    ??zclGeneral_HdlInSpecificCommands_10
   1647                else
   1648                  stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_11:
   \   000097                ; Setup parameters for call to function zclGeneral_ProcessInGroupsClient
   \   000097   12....       LCALL   `??zclGeneral_ProcessInGroupsClient::?relay`; Banked call to: zclGeneral_ProcessInGroupsClient
   \   00009A   8013         SJMP    ??zclGeneral_HdlInSpecificCommands_10
   1649                break;
   1650          #endif // ZCL_GROUPS
   1651          
   1652          #ifdef ZCL_SCENES
   1653              case ZCL_CLUSTER_ID_GEN_SCENES:
   1654                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_5:
   \   00009C   8A82         MOV     DPL,R2
   \   00009E   8B83         MOV     DPH,R3
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   5408         ANL     A,#0x8
   \   0000A5   7005         JNZ     ??zclGeneral_HdlInSpecificCommands_12
   1655                  stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
   \   0000A7                ; Setup parameters for call to function zclGeneral_ProcessInScenesServer
   \   0000A7   12....       LCALL   `??zclGeneral_ProcessInScenesServer::?relay`; Banked call to: zclGeneral_ProcessInScenesServer
   \   0000AA   8003         SJMP    ??zclGeneral_HdlInSpecificCommands_10
   1656                else
   1657                  stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_12:
   \   0000AC                ; Setup parameters for call to function zclGeneral_ProcessInScenesClient
   \   0000AC   12....       LCALL   `??zclGeneral_ProcessInScenesClient::?relay`; Banked call to: zclGeneral_ProcessInScenesClient
   \                     ??zclGeneral_HdlInSpecificCommands_10:
   \   0000AF   E9           MOV     A,R1
   \   0000B0   803D         SJMP    ??zclGeneral_HdlInSpecificCommands_13
   1658                break;
   1659          #endif // ZCL_SCENES
   1660          
   1661          #ifdef ZCL_ON_OFF
   1662              case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1663                stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_6:
   \   0000B2   7E00         MOV     R6,#0x0
   \   0000B4   8A82         MOV     DPL,R2
   \   0000B6   8B83         MOV     DPH,R3
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   5408         ANL     A,#0x8
   \   0000BD   702F         JNZ     ??zclGeneral_HdlInSpecificCommands_14
   \   0000BF   8A82         MOV     DPL,R2
   \   0000C1   8B83         MOV     DPH,R3
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FA           MOV     R2,A
   \   0000CC   6006         JZ      ??zclGeneral_HdlInSpecificCommands_15
   \   0000CE   14           DEC     A
   \   0000CF   6003         JZ      ??zclGeneral_HdlInSpecificCommands_15
   \   0000D1   14           DEC     A
   \   0000D2   7018         JNZ     ??zclGeneral_HdlInSpecificCommands_16
   \                     ??zclGeneral_HdlInSpecificCommands_15:
   \   0000D4   8C82         MOV     DPL,R4
   \   0000D6   8D83         MOV     DPH,R5
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000E3   6009         JZ      ??zclGeneral_HdlInSpecificCommands_14
   \   0000E5                ; Setup parameters for indirect call
   \   0000E5   EA           MOV     A,R2
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   ?CALL_IND
   \   0000EA   8002         SJMP    ??zclGeneral_HdlInSpecificCommands_14
   \                     ??zclGeneral_HdlInSpecificCommands_16:
   \   0000EC   7E01         MOV     R6,#0x1
   \                     ??zclGeneral_HdlInSpecificCommands_14:
   \   0000EE   EE           MOV     A,R6
   \                     ??zclGeneral_HdlInSpecificCommands_13:
   \   0000EF   F9           MOV     R1,A
   1664                break;
   1665          #endif // ZCL_ON_OFF
   1666          
   1667          #ifdef ZCL_LEVEL_CTRL
   1668              case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1669                stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
   1670                break;
   1671          #endif // ZCL_LEVEL_CTRL
   1672          
   1673          #ifdef ZCL_ALARMS
   1674              case ZCL_CLUSTER_ID_GEN_ALARMS:
   1675                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1676                  stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
   1677                else
   1678                  stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
   1679                break;
   1680          #endif // ZCL_ALARMS
   1681          
   1682          #ifdef ZCL_LOCATION
   1683              case ZCL_CLUSTER_ID_GEN_LOCATION:
   1684                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1685                  stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
   1686                else
   1687                  stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
   1688                break;
   1689          #endif // ZCL_LOCATION
   1690          
   1691              case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1692              case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
   1693              case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
   1694              case ZCL_CLUSTER_ID_GEN_TIME:
   1695              default:
   1696                stat = ZFailure;
   1697                break;
   1698            }
   1699          
   1700            return ( stat );
   \                     ??zclGeneral_HdlInSpecificCommands_9:
   \   0000F0   80..         SJMP    ??Subroutine80_0
   1701          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E582         MOV     A,DPL
   \   00000B   4583         ORL     A,DPH
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine78_0
   \   000004                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   FF           MOV     R7,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   1702          
   1703          #ifdef ZCL_BASIC
   1704          /*********************************************************************
   1705           * @fn      zclGeneral_ProcessInBasic
   1706           *
   1707           * @brief   Process in the received Basic Command.
   1708           *
   1709           * @param   pInMsg - pointer to the incoming message
   1710           *
   1711           * @return  ZStatus_t
   1712           */
   1713          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
   1714                                                      zclGeneral_AppCallbacks_t *pCBs )
   1715          {
   1716            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1717            {
   1718              if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
   1719                return ( ZFailure );   // Error ignore the command
   1720          
   1721              if ( pCBs->pfnBasicReset )
   1722                pCBs->pfnBasicReset();
   1723            }
   1724            // no Client command
   1725          
   1726            return ( ZSuccess );
   1727          }
   1728          #endif // ZCL_BASIC
   1729          
   1730          #ifdef ZCL_IDENTIFY
   1731          /*********************************************************************
   1732           * @fn      zclGeneral_ProcessInIdentity
   1733           *
   1734           * @brief   Process in the received Identity Command.
   1735           *
   1736           * @param   pInMsg - pointer to the incoming message
   1737           *
   1738           * @return  ZStatus_t
   1739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1740          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInIdentity:
   1741                                                         zclGeneral_AppCallbacks_t *pCBs )
   1742          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1743            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   5408         ANL     A,#0x8
   \   000017   8A82         MOV     DPL,R2
   \   000019   8B83         MOV     DPH,R3
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??zclGeneral_ProcessInIdentity_0 & 0xFFFF
   1744            {
   1745              if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY )
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   7007         JNZ     ??zclGeneral_ProcessInIdentity_1
   1746              {
   1747                if ( pCBs->pfnIdentify )
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   02....       LJMP    ??zclGeneral_ProcessInIdentity_2 & 0xFFFF
   1748                {
   1749                  zclIdentify_t cmd;
   1750          
   1751                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   1752                  cmd.identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1753          
   1754                  pCBs->pfnIdentify( &cmd );
   1755                }
   1756              }
   1757              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_QUERY )
   \                     ??zclGeneral_ProcessInIdentity_1:
   \   000032   7401         MOV     A,#0x1
   \   000034   68           XRL     A,R0
   \   000035   6003         JZ      $+5
   \   000037   02....       LJMP    ??zclGeneral_ProcessInIdentity_3 & 0xFFFF
   1758              {
   1759                uint16 identifyTime = 0;
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
   1760          
   1761                // Retrieve Identify Time
   1762                zcl_ReadAttrData( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   1763                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \   000043   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000046                ; Setup parameters for call to function zcl_ReadAttrData
   \   000046   E4           CLR     A
   \   000047   F5..         MOV     ?V2,A
   \   000049   F5..         MOV     ?V3,A
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7406         MOV     A,#0x6
   \   000052   12....       LCALL   ?XSTACK_DISP100_8
   \   000055   88..         MOV     ?V2,R0
   \   000057   89..         MOV     ?V3,R1
   \   000059   78..         MOV     R0,#?V2
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   7C00         MOV     R4,#0x0
   \   000060   7D00         MOV     R5,#0x0
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00006D   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   1764          
   1765                // Is device identifying itself?
   1766                if ( identifyTime > 0 )
   \   000079   7404         MOV     A,#0x4
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000081   607E         JZ      ??zclGeneral_ProcessInIdentity_4
   1767                {
   1768                  zclGeneral_SendIdentifyQueryResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1769                                                        identifyTime, true, pInMsg->hdr.transSeqNum );
   \   000083   85..82       MOV     DPL,?V0
   \   000086   85..83       MOV     DPH,?V1
   \   000089   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00008C                ; Setup parameters for call to function zclGeneral_SendIdentifyQueryResponse
   \   00008C   85..82       MOV     DPL,?V0
   \   00008F   85..83       MOV     DPH,?V1
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   75..01       MOV     ?V0,#0x1
   \   0000A1   78..         MOV     R0,#?V0
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A6   7406         MOV     A,#0x6
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000AE   12....       LCALL   `??zclGeneral_SendIdentifyQueryResponse::?relay`; Banked call to: zclGeneral_SendIdentifyQueryResponse
   \   0000B1   7402         MOV     A,#0x2
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   1770          #ifdef ZCL_EZMODE
   1771                  zcl_EZModeAction( EZMODE_ACTION_IDENTIFY_QUERY, NULL );
   1772          #endif
   1773                  return ( ZCL_STATUS_CMD_HAS_RSP );
   \   0000B6   79FF         MOV     R1,#-0x1
   \   0000B8   8049         SJMP    ??zclGeneral_ProcessInIdentity_5
   1774                }
   1775              }
   1776          #ifdef ZCL_EZMODE
   1777              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_EZMODE_INVOKE )
   1778              {
   1779                if ( pCBs->pfnIdentifyEZModeInvoke )
   1780                {
   1781                  pCBs->pfnIdentifyEZModeInvoke( pInMsg->pData[0] );
   1782                }
   1783              }
   1784              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE )
   1785              {
   1786                if ( pCBs->pfnIdentifyUpdateCommState )
   1787                {
   1788                  zclIdentifyUpdateCommState_t cmd;
   1789          
   1790                  cmd.action = pInMsg->pData[0];
   1791                  cmd.commissionStateMask = pInMsg->pData[1];
   1792          
   1793                  pCBs->pfnIdentifyUpdateCommState( &cmd );
   1794                }
   1795              }
   1796          #endif
   1797          
   1798          #ifdef ZCL_LIGHT_LINK_ENHANCE
   1799              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_TRIGGER_EFFECT )
   1800              {
   1801                if ( pCBs->pfnIdentifyTriggerEffect )
   1802                {
   1803                  zclIdentifyTriggerEffect_t cmd;
   1804          
   1805                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   1806                  cmd.effectId = pInMsg->pData[0];
   1807                  cmd.effectVariant = pInMsg->pData[1];
   1808          
   1809                  pCBs->pfnIdentifyTriggerEffect( &cmd );
   1810                }
   1811              }
   1812          #endif //ZCL_LIGHT_LINK_ENHANCE
   1813              else
   1814              {
   1815                return ( ZFailure );   // Error ignore the command
   1816              }
   1817            }
   1818            else // Client Command
   1819            {
   1820              if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
   \                     ??zclGeneral_ProcessInIdentity_0:
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   6004         JZ      ??zclGeneral_ProcessInIdentity_6
   1821                return ( ZFailure );   // Error ignore the command
   \                     ??zclGeneral_ProcessInIdentity_3:
   \   0000BD   7901         MOV     R1,#0x1
   \   0000BF   8042         SJMP    ??zclGeneral_ProcessInIdentity_5
   1822          
   1823              if ( pCBs->pfnIdentifyQueryRsp )
   \                     ??zclGeneral_ProcessInIdentity_6:
   \   0000C1   8C82         MOV     DPL,R4
   \   0000C3   8D83         MOV     DPH,R5
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \                     ??zclGeneral_ProcessInIdentity_2:
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0000CE   FC           MOV     R4,A
   \   0000CF   E9           MOV     A,R1
   \   0000D0   FD           MOV     R5,A
   \   0000D1   EC           MOV     A,R4
   \   0000D2   4D           ORL     A,R5
   \   0000D3   602C         JZ      ??zclGeneral_ProcessInIdentity_4
   1824              {
   1825                zclIdentifyQueryRsp_t rsp;
   1826          
   1827                rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0000D5   8A82         MOV     DPL,R2
   \   0000D7   8B83         MOV     DPH,R3
   \   0000D9   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000DC   12....       LCALL   ?Subroutine51 & 0xFFFF
   1828                rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \                     ??CrossCallReturnLabel_94:
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   0000E7   8882         MOV     DPL,R0
   \   0000E9   8983         MOV     DPH,R1
   \   0000EB   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   0000EE   7402         MOV     A,#0x2
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   12....       LCALL   ?Subroutine52 & 0xFFFF
   1829          
   1830                pCBs->pfnIdentifyQueryRsp( &rsp );
   \                     ??CrossCallReturnLabel_97:
   \   0000F6                ; Setup parameters for indirect call
   \   0000F6   AA..         MOV     R2,?XSP + 0
   \   0000F8   AB..         MOV     R3,?XSP + 1
   \   0000FA   8C82         MOV     DPL,R4
   \   0000FC   8D83         MOV     DPH,R5
   \   0000FE   12....       LCALL   ?CALL_IND
   1831              }
   1832            }
   1833          
   1834            return ( ZSuccess );
   \                     ??zclGeneral_ProcessInIdentity_4:
   \   000101   7900         MOV     R1,#0x0
   \                     ??zclGeneral_ProcessInIdentity_5:
   \   000103   7406         MOV     A,#0x6
   \   000105   02....       LJMP    ??Subroutine73_0 & 0xFFFF
   1835          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   49           ORL     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   EE           MOV     A,R6
   \   000001   2406         ADD     A,#0x6
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   22           RET
   1836          #endif // ZCL_IDENTIFY
   1837          
   1838          #ifdef ZCL_GROUPS
   1839          
   1840          /*********************************************************************
   1841           * @fn      zclGeneral_AddGroup
   1842           *
   1843           * @brief   Add a Group.
   1844           *
   1845           * @param   endPoint - application endpoint
   1846           * @param   group - group to be added
   1847           * @param   pData - pointer to the group info
   1848           *
   1849           * @return  ZStatus_t
   1850           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1851          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
   \                     zclGeneral_AddGroup:
   1852          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
   \   000010   8C..         MOV     ?V2,R4
   \   000012   8D..         MOV     ?V3,R5
   1853            uint8 nameLen;
   1854            uint8 nameSupport = FALSE;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   E4           CLR     A
   \   00001B   F0           MOVX    @DPTR,A
   1855          
   1856            pData += 2;   // Move past group ID
   1857            nameLen = *pData++;
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0,A
   1858          
   1859            // Retrieve Name Support attribute
   1860            zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
   1861                              ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
   \   000025                ; Setup parameters for call to function zcl_ReadAttrData
   \   000025   E4           CLR     A
   \   000026   F5..         MOV     ?V4,A
   \   000028   F5..         MOV     ?V5,A
   \   00002A   78..         MOV     R0,#?V4
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?XSTACK_DISP100_8
   \   000034   88..         MOV     ?V4,R0
   \   000036   89..         MOV     ?V5,R1
   \   000038   78..         MOV     R0,#?V4
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A04         MOV     R2,#0x4
   \   000043   7B00         MOV     R3,#0x0
   \   000045   A9..         MOV     R1,?V1
   \   000047   12....       LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   1862          
   1863            if ( nameSupport )
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   603F         JZ      ??zclGeneral_AddGroup_0
   1864            {
   1865              if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \   000058   E5..         MOV     A,?V0
   \   00005A   C3           CLR     C
   \   00005B   9410         SUBB    A,#0x10
   \   00005D   4003         JC      ??zclGeneral_AddGroup_1
   1866                 nameLen = (APS_GROUP_NAME_LEN-1);
   \   00005F   75..0F       MOV     ?V0,#0xf
   1867              group->name[0] = nameLen;
   \                     ??zclGeneral_AddGroup_1:
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E5..         MOV     A,?V0
   \   00006A   F0           MOVX    @DPTR,A
   1868              zcl_memcpy( &(group->name[1]), pData, nameLen );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   85..82       MOV     DPL,?V2
   \   00006E   85..83       MOV     DPH,?V3
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A982         MOV     R1,DPL
   \   000076   AA83         MOV     R2,DPH
   \   000078   89..         MOV     ?V4,R1
   \   00007A   8A..         MOV     ?V5,R2
   \   00007C   75..00       MOV     ?V6,#0x0
   \   00007F   78..         MOV     R0,#?V4
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000084   AC..         MOV     R4,?V0
   \   000086   7D00         MOV     R5,#0x0
   \   000088   EE           MOV     A,R6
   \   000089   2403         ADD     A,#0x3
   \   00008B   FA           MOV     R2,A
   \   00008C   E4           CLR     A
   \   00008D   3F           ADDC    A,R7
   \   00008E   FB           MOV     R3,A
   \   00008F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000092   7403         MOV     A,#0x3
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   1869            }
   1870          
   1871            return ( aps_AddGroup( endPoint, group ) );
   \                     ??zclGeneral_AddGroup_0:
   \   000097                ; Setup parameters for call to function aps_AddGroup
   \   000097   EE           MOV     A,R6
   \   000098   FA           MOV     R2,A
   \   000099   EF           MOV     A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   A9..         MOV     R1,?V1
   \   00009D   12....       LCALL   `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5                REQUIRE ?Subroutine6
   \   0000A5                ; // Fall through to label ?Subroutine6
   1872          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1873          
   1874          /*********************************************************************
   1875           * @fn      zclGeneral_ProcessInGroupsServer
   1876           *
   1877           * @brief   Process in the received Groups Command.
   1878           *
   1879           * @param   pInMsg - pointer to the incoming message
   1880           *
   1881           * @return  ZStatus_t
   1882           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1883          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
   \                     zclGeneral_ProcessInGroupsServer:
   1884          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 54
   \   000005   74CA         MOV     A,#-0x36
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1885            aps_Group_t group;
   1886            aps_Group_t *pGroup;
   1887            uint8 *pData;
   1888            uint8 status;
   1889            uint8 grpCnt;
   1890            uint8 grpRspCnt = 0;
   \   00000E   75..00       MOV     ?V4,#0x0
   1891            uint16 *grpList;
   1892            uint16 identifyTime = 0;
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   1893            uint8 i;
   1894            ZStatus_t stat = ZSuccess;
   \   00001A   75..00       MOV     ?V0,#0x0
   1895          
   1896            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   00001D                ; Setup parameters for call to function osal_memset
   \   00001D   7C12         MOV     R4,#0x12
   \   00001F   FD           MOV     R5,A
   \   000020   F9           MOV     R1,A
   \   000021   7404         MOV     A,#0x4
   \   000023   12....       LCALL   ?XSTACK_DISP101_8
   \   000026   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1897          
   1898            pData = pInMsg->pData;
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine27 & 0xFFFF
   1899            group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_39:
   \   000038   A3           INC     DPTR
   \   000039   A882         MOV     R0,DPL
   \   00003B   A983         MOV     R1,DPH
   \   00003D   85..82       MOV     DPL,?V2
   \   000040   F583         MOV     DPH,A
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FC           MOV     R4,A
   \   000044   8882         MOV     DPL,R0
   \   000046   8983         MOV     DPH,R1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FB           MOV     R3,A
   \   00004A   EC           MOV     A,R4
   \   00004B   FA           MOV     R2,A
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   1900            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_206:
   \   000054   EE           MOV     A,R6
   \   000055   2406         ADD     A,#0x6
   \   000057   F5..         MOV     ?V8,A
   \   000059   E4           CLR     A
   \   00005A   3F           ADDC    A,R7
   \   00005B   F5..         MOV     ?V9,A
   \   00005D   EE           MOV     A,R6
   \   00005E   2407         ADD     A,#0x7
   \   000060   F5..         MOV     ?V6,A
   \   000062   E4           CLR     A
   \   000063   3F           ADDC    A,R7
   \   000064   F5..         MOV     ?V7,A
   \   000066   85..82       MOV     DPL,?V6
   \   000069   F583         MOV     DPH,A
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   601E         JZ      ??zclGeneral_ProcessInGroupsServer_0
   \   00006E   14           DEC     A
   \   00006F   6056         JZ      ??zclGeneral_ProcessInGroupsServer_1
   \   000071   14           DEC     A
   \   000072   7003         JNZ     $+5
   \   000074   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_2 & 0xFFFF
   \   000077   14           DEC     A
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_3 & 0xFFFF
   \   00007D   14           DEC     A
   \   00007E   7003         JNZ     $+5
   \   000080   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_4 & 0xFFFF
   \   000083   14           DEC     A
   \   000084   7003         JNZ     $+5
   \   000086   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_5 & 0xFFFF
   \   000089   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_6 & 0xFFFF
   1901            {
   1902              case COMMAND_GROUP_ADD:
   1903                status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \                     ??zclGeneral_ProcessInGroupsServer_0:
   \   00008C                ; Setup parameters for call to function zclGeneral_AddGroup
   \   00008C   AC..         MOV     R4,?V2
   \   00008E   AD..         MOV     R5,?V3
   \   000090   7404         MOV     A,#0x4
   \   000092   12....       LCALL   ?XSTACK_DISP101_8
   \   000095   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000098   12....       LCALL   `??zclGeneral_AddGroup::?relay`; Banked call to: zclGeneral_AddGroup
   \   00009B   E9           MOV     A,R1
   \   00009C   FC           MOV     R4,A
   1904                if ( status != ZSuccess )
   \   00009D   600B         JZ      ??zclGeneral_ProcessInGroupsServer_7
   1905                {
   1906                  if ( status == ZApsDuplicateEntry )
   \   00009F   74B8         MOV     A,#-0x48
   \   0000A1   6C           XRL     A,R4
   \   0000A2   7004         JNZ     ??zclGeneral_ProcessInGroupsServer_8
   1907                  {
   1908                    status = ZCL_STATUS_DUPLICATE_EXISTS;
   \   0000A4   7C8A         MOV     R4,#-0x76
   \   0000A6   8002         SJMP    ??zclGeneral_ProcessInGroupsServer_7
   1909                  }
   1910                  else
   1911                  {
   1912                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInGroupsServer_8:
   \   0000A8   7C89         MOV     R4,#-0x77
   1913                  }
   1914                }
   1915          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1916                if ( UNICAST_MSG( pInMsg->msg ) )
   1917          #endif
   1918                {
   1919                  zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1920                                                   status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_7:
   \   0000AA   12....       LCALL   ?Subroutine15 & 0xFFFF
   1921                  stat = ZCL_STATUS_CMD_HAS_RSP;
   1922                }
   \                     ??CrossCallReturnLabel_21:
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B0   75..01       MOV     ?V0,#0x1
   \   0000B3   78..         MOV     R0,#?V0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B8   7406         MOV     A,#0x6
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C0   EC           MOV     A,R4
   \   0000C1   FD           MOV     R5,A
   \   0000C2   7C00         MOV     R4,#0x0
   \   0000C4   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   1923                break;
   1924          
   1925              case COMMAND_GROUP_VIEW:
   1926          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1927                if ( UNICAST_MSG( pInMsg->msg ) )
   1928          #endif
   1929                {
   1930                  pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
   \                     ??zclGeneral_ProcessInGroupsServer_1:
   \   0000C7                ; Setup parameters for call to function aps_FindGroup
   \   0000C7   7404         MOV     A,#0x4
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   0000CF   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0000D2   8A..         MOV     ?V0,R2
   \   0000D4   8B..         MOV     ?V1,R3
   1931                  if ( pGroup )
   \   0000D6   EA           MOV     A,R2
   \   0000D7   45..         ORL     A,?V1
   \   0000D9   6004         JZ      ??zclGeneral_ProcessInGroupsServer_10
   1932                  {
   1933                    status = ZCL_STATUS_SUCCESS;
   \   0000DB   7C00         MOV     R4,#0x0
   \   0000DD   800B         SJMP    ??zclGeneral_ProcessInGroupsServer_11
   1934                  }
   1935                  else
   1936                  {
   1937                    // Group not found
   1938                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_10:
   \   0000DF   7C8B         MOV     R4,#-0x75
   1939                    pGroup = &group;
   \   0000E1   7404         MOV     A,#0x4
   \   0000E3   12....       LCALL   ?XSTACK_DISP100_8
   \   0000E6   88..         MOV     ?V0,R0
   \   0000E8   89..         MOV     ?V1,R1
   1940                  }
   1941                  zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1942                                                    status, pGroup, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_11:
   \   0000EA   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   78..         MOV     R0,#?V0
   \   0000F2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F5   7D01         MOV     R5,#0x1
   \   0000F7   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000FA   12....       LCALL   `??zclGeneral_SendGroupViewResponse::?relay`; Banked call to: zclGeneral_SendGroupViewResponse
   \   0000FD   7403         MOV     A,#0x3
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   1943                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \   000102   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_12 & 0xFFFF
   1944                }
   1945                break;
   1946          
   1947              case COMMAND_GROUP_GET_MEMBERSHIP:
   1948          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   1949                if ( UNICAST_MSG( pInMsg->msg ) )
   1950          #endif
   1951                {
   1952                  grpCnt = *pData++;
   \                     ??zclGeneral_ProcessInGroupsServer_2:
   \   000105   85..82       MOV     DPL,?V2
   \   000108   85..83       MOV     DPH,?V3
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   F5..         MOV     ?V10,A
   \   00010E   88..         MOV     ?V2,R0
   \   000110   89..         MOV     ?V3,R1
   1953          
   1954                  // Allocate space for the group list
   1955                  grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
   \   000112                ; Setup parameters for call to function osal_mem_alloc
   \   000112   7A20         MOV     R2,#0x20
   \   000114   7B00         MOV     R3,#0x0
   \   000116   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000119   8A..         MOV     ?V0,R2
   \   00011B   8B..         MOV     ?V1,R3
   1956                  if ( grpList != NULL )
   \   00011D   EA           MOV     A,R2
   \   00011E   45..         ORL     A,?V1
   \   000120   7003         JNZ     $+5
   \   000122   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_13 & 0xFFFF
   1957                  {
   1958                    if ( grpCnt == 0 )
   \   000125   E5..         MOV     A,?V10
   \   000127   700B         JNZ     ??zclGeneral_ProcessInGroupsServer_14
   1959                    {
   1960                      // Find out all the groups of which the endpoint is a member.
   1961                      grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
   \   000129                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   000129   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   1962                    }
   \                     ??CrossCallReturnLabel_235:
   \   00012C   12....       LCALL   `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
   \   00012F   E9           MOV     A,R1
   \   000130   F5..         MOV     ?V4,A
   \   000132   8058         SJMP    ??zclGeneral_ProcessInGroupsServer_15
   1963                    else
   1964                    {
   1965                      // Find out the groups (in the list) of which the endpoint is a member.
   1966                      for ( i = 0; i < grpCnt; i++ )
   \                     ??zclGeneral_ProcessInGroupsServer_14:
   \   000134   F5..         MOV     ?V5,A
   1967                      {
   1968                        group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsServer_16:
   \   000136   85..82       MOV     DPL,?V2
   \   000139   85..83       MOV     DPH,?V3
   \   00013C   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00013F   7404         MOV     A,#0x4
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   12....       LCALL   ?Subroutine52 & 0xFFFF
   1969                        pData += 2;
   \                     ??CrossCallReturnLabel_98:
   \   000147   E5..         MOV     A,?V2
   \   000149   2402         ADD     A,#0x2
   \   00014B   F5..         MOV     ?V2,A
   \   00014D   5002         JNC     ??zclGeneral_ProcessInGroupsServer_17
   \   00014F   05..         INC     ?V3
   1970          
   1971                        if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
   \                     ??zclGeneral_ProcessInGroupsServer_17:
   \   000151                ; Setup parameters for call to function aps_FindGroup
   \   000151   7404         MOV     A,#0x4
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000159   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   00015C   8B..         MOV     ?V7,R3
   \   00015E   EA           MOV     A,R2
   \   00015F   45..         ORL     A,?V7
   \   000161   601F         JZ      ??zclGeneral_ProcessInGroupsServer_18
   1972                          grpList[grpRspCnt++] = group.ID;
   \   000163   7404         MOV     A,#0x4
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   12....       LCALL   ?Subroutine29 & 0xFFFF
   1973                      }
   \                     ??CrossCallReturnLabel_48:
   \   00016B   A8..         MOV     R0,?V4
   \   00016D   E8           MOV     A,R0
   \   00016E   28           ADD     A,R0
   \   00016F   F8           MOV     R0,A
   \   000170   E4           CLR     A
   \   000171   33           RLC     A
   \   000172   F9           MOV     R1,A
   \   000173   E5..         MOV     A,?V0
   \   000175   28           ADD     A,R0
   \   000176   F582         MOV     DPL,A
   \   000178   E5..         MOV     A,?V1
   \   00017A   39           ADDC    A,R1
   \   00017B   F583         MOV     DPH,A
   \   00017D   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000180   05..         INC     ?V4
   \                     ??zclGeneral_ProcessInGroupsServer_18:
   \   000182   15..         DEC     ?V5
   \   000184   E5..         MOV     A,?V5
   \   000186   70AE         JNZ     ??zclGeneral_ProcessInGroupsServer_16
   \   000188   E5..         MOV     A,?V4
   \   00018A   6043         JZ      ??zclGeneral_ProcessInGroupsServer_19
   1974                    }
   1975          
   1976                    if ( grpCnt == 0 ||  grpRspCnt != 0 )
   1977                    {
   1978                      zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1979                                                                 aps_GroupsRemaingCapacity(), grpRspCnt,
   1980                                                                 grpList, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_15:
   \   00018C                ; Setup parameters for call to function aps_CountAllGroups
   \   00018C   12....       LCALL   `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
   \   00018F   E9           MOV     A,R1
   \   000190   F9           MOV     R1,A
   \   000191   12....       LCALL   ?Subroutine23 & 0xFFFF
   1981                    }
   \                     ??CrossCallReturnLabel_33:
   \   000194   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000197   75..01       MOV     ?V2,#0x1
   \   00019A   78..         MOV     R0,#?V2
   \   00019C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019F   78..         MOV     R0,#?V0
   \   0001A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A4   E5..         MOV     A,?V4
   \   0001A6   F5..         MOV     ?V2,A
   \   0001A8   78..         MOV     R0,#?V2
   \   0001AA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AD   7410         MOV     A,#0x10
   \   0001AF   C3           CLR     C
   \   0001B0   99           SUBB    A,R1
   \   0001B1   F5..         MOV     ?V2,A
   \   0001B3   78..         MOV     R0,#?V2
   \   0001B5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B8   75..01       MOV     ?V2,#0x1
   \   0001BB   78..         MOV     R0,#?V2
   \   0001BD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C0   7D01         MOV     R5,#0x1
   \   0001C2   7C02         MOV     R4,#0x2
   \   0001C4   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0001C7   12....       LCALL   `??zclGeneral_SendGroupGetMembershipRequest::?re`; Banked call to: zclGeneral_SendGroupGetMembershipRequest
   \   0001CA   7407         MOV     A,#0x7
   \   0001CC   12....       LCALL   ?DEALLOC_XSTACK8
   1982          
   1983                    zcl_mem_free( grpList );
   \                     ??zclGeneral_ProcessInGroupsServer_19:
   \   0001CF                ; Setup parameters for call to function osal_mem_free
   \   0001CF   AA..         MOV     R2,?V0
   \   0001D1   AB..         MOV     R3,?V1
   \   0001D3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001D6   8054         SJMP    ??zclGeneral_ProcessInGroupsServer_20
   1984                  }
   1985                  else
   1986                  {
   1987                    // Couldn't allocate space for the group list -- send a Default Response command back.
   1988                    zclDefaultRspCmd_t defaultRspCmd;
   1989          
   1990                    defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \                     ??zclGeneral_ProcessInGroupsServer_13:
   \   0001D8   85..82       MOV     DPL,?V6
   \   0001DB   85..83       MOV     DPH,?V7
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   85..82       MOV     DPL,?XSP + 0
   \   0001E2   85..83       MOV     DPH,?XSP + 1
   \   0001E5   F0           MOVX    @DPTR,A
   1991                    defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
   \   0001E6   7401         MOV     A,#0x1
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   7489         MOV     A,#-0x77
   \   0001ED   F0           MOVX    @DPTR,A
   1992                    zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   1993                                           pInMsg->msg->clusterId, &defaultRspCmd,
   1994                                           ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
   \   0001EE   12....       LCALL   ?Subroutine15 & 0xFFFF
   1995                  }
   \                     ??CrossCallReturnLabel_22:
   \   0001F1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F4   E4           CLR     A
   \   0001F5   F5..         MOV     ?V0,A
   \   0001F7   F5..         MOV     ?V1,A
   \   0001F9   78..         MOV     R0,#?V0
   \   0001FB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FE   75..01       MOV     ?V0,#0x1
   \   000201   78..         MOV     R0,#?V0
   \   000203   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000206   78..         MOV     R0,#?V0
   \   000208   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020B   7405         MOV     A,#0x5
   \   00020D   12....       LCALL   ?XSTACK_DISP100_8
   \   000210   88..         MOV     ?V0,R0
   \   000212   89..         MOV     ?V1,R1
   \   000214   78..         MOV     R0,#?V0
   \   000216   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000219   8E82         MOV     DPL,R6
   \   00021B   8F83         MOV     DPH,R7
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   A3           INC     DPTR
   \   000221   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000224   12....       LCALL   `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   000227   7407         MOV     A,#0x7
   \   000229   12....       LCALL   ?DEALLOC_XSTACK8
   1996          
   1997                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_20:
   \   00022C   8044         SJMP    ??zclGeneral_ProcessInGroupsServer_12
   1998                }
   1999                break;
   2000          
   2001              case COMMAND_GROUP_REMOVE:
   2002          #if defined ( ZCL_SCENES )
   2003                zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, group.ID );
   \                     ??zclGeneral_ProcessInGroupsServer_3:
   \   00022E                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   00022E   7404         MOV     A,#0x4
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000236   12....       LCALL   `??zclGeneral_RemoveAllScenes::?relay`; Banked call to: zclGeneral_RemoveAllScenes
   2004          #endif
   2005                if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
   \   000239                ; Setup parameters for call to function aps_RemoveGroup
   \   000239   7404         MOV     A,#0x4
   \   00023B   12....       LCALL   ?XSTACK_DISP0_8
   \   00023E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000241   12....       LCALL   `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   000244   E9           MOV     A,R1
   \   000245   6004         JZ      ??zclGeneral_ProcessInGroupsServer_21
   2006                {
   2007                  status = ZCL_STATUS_SUCCESS;
   \   000247   7C00         MOV     R4,#0x0
   \   000249   8002         SJMP    ??zclGeneral_ProcessInGroupsServer_22
   2008                }
   2009                else
   2010                {
   2011                  status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_21:
   \   00024B   7C8B         MOV     R4,#-0x75
   2012                }
   2013          
   2014          #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
   2015                if ( UNICAST_MSG( pInMsg->msg ) )
   2016          #endif
   2017                {
   2018                  zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2019                                                      status, group.ID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_22:
   \   00024D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000250   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000253   75..01       MOV     ?V0,#0x1
   \   000256   78..         MOV     R0,#?V0
   \   000258   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00025B   7406         MOV     A,#0x6
   \   00025D   12....       LCALL   ?XSTACK_DISP0_8
   \   000260   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000263   EC           MOV     A,R4
   \   000264   FD           MOV     R5,A
   \   000265   7C03         MOV     R4,#0x3
   \                     ??zclGeneral_ProcessInGroupsServer_9:
   \   000267   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00026A   12....       LCALL   `??zclGeneral_SendGroupResponse::?relay`; Banked call to: zclGeneral_SendGroupResponse
   \   00026D   7404         MOV     A,#0x4
   \   00026F   12....       LCALL   ?DEALLOC_XSTACK8
   2020                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_12:
   \   000272   75..FF       MOV     ?V0,#-0x1
   2021                }
   2022                break;
   \   000275   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_23 & 0xFFFF
   2023          
   2024              case COMMAND_GROUP_REMOVE_ALL:
   2025                {
   2026                  uint8 numGroups;
   2027                  uint16 groupList[APS_MAX_GROUPS];
   2028          
   2029                  if ( numGroups = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, groupList ) )
   \                     ??zclGeneral_ProcessInGroupsServer_4:
   \   000278                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   000278   7416         MOV     A,#0x16
   \   00027A   12....       LCALL   ?XSTACK_DISP101_8
   \   00027D   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000280   12....       LCALL   `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
   \   000283   E9           MOV     A,R1
   \   000284   F5..         MOV     ?V2,A
   \   000286   607A         JZ      ??zclGeneral_ProcessInGroupsServer_23
   2030                  {
   2031                    for ( i = 0; i < numGroups; i++ )
   \   000288   75..00       MOV     ?V1,#0x0
   2032                    {
   2033          #if defined ( ZCL_SCENES )
   2034                      zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, groupList[i] );
   \                     ??zclGeneral_ProcessInGroupsServer_24:
   \   00028B                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   00028B   A8..         MOV     R0,?V1
   \   00028D   E8           MOV     A,R0
   \   00028E   28           ADD     A,R0
   \   00028F   F8           MOV     R0,A
   \   000290   E4           CLR     A
   \   000291   33           RLC     A
   \   000292   F9           MOV     R1,A
   \   000293   7416         MOV     A,#0x16
   \   000295   12....       LCALL   ?XSTACK_DISP0_8
   \   000298   E582         MOV     A,DPL
   \   00029A   28           ADD     A,R0
   \   00029B   F582         MOV     DPL,A
   \   00029D   E583         MOV     A,DPH
   \   00029F   39           ADDC    A,R1
   \   0002A0   F583         MOV     DPH,A
   \   0002A2   12....       LCALL   ?Subroutine10 & 0xFFFF
   2035          #endif
   2036                    }
   \                     ??CrossCallReturnLabel_2:
   \   0002A5   12....       LCALL   `??zclGeneral_RemoveAllScenes::?relay`; Banked call to: zclGeneral_RemoveAllScenes
   \   0002A8   05..         INC     ?V1
   \   0002AA   E5..         MOV     A,?V1
   \   0002AC   C3           CLR     C
   \   0002AD   95..         SUBB    A,?V2
   \   0002AF   40DA         JC      ??zclGeneral_ProcessInGroupsServer_24
   2037          
   2038                    aps_RemoveAllGroup( pInMsg->msg->endPoint );
   \   0002B1                ; Setup parameters for call to function aps_RemoveAllGroup
   \   0002B1   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   2039                  }
   2040                }
   \                     ??CrossCallReturnLabel_237:
   \   0002B4   12....       LCALL   `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
   \   0002B7   8049         SJMP    ??zclGeneral_ProcessInGroupsServer_23
   2041                break;
   2042          
   2043              case COMMAND_GROUP_ADD_IF_IDENTIFYING:
   2044                // Retrieve Identify Time
   2045                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2046                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \                     ??zclGeneral_ProcessInGroupsServer_5:
   \   0002B9                ; Setup parameters for call to function zcl_ReadAttrData
   \   0002B9   E4           CLR     A
   \   0002BA   F5..         MOV     ?V6,A
   \   0002BC   F5..         MOV     ?V7,A
   \   0002BE   78..         MOV     R0,#?V6
   \   0002C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002C3   7404         MOV     A,#0x4
   \   0002C5   12....       LCALL   ?XSTACK_DISP100_8
   \   0002C8   88..         MOV     ?V6,R0
   \   0002CA   89..         MOV     ?V7,R1
   \   0002CC   78..         MOV     R0,#?V6
   \   0002CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002D1   7C00         MOV     R4,#0x0
   \   0002D3   7D00         MOV     R5,#0x0
   \   0002D5   7A03         MOV     R2,#0x3
   \   0002D7   7B00         MOV     R3,#0x0
   \   0002D9   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0002DC   12....       LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   0002DF   7404         MOV     A,#0x4
   \   0002E1   12....       LCALL   ?DEALLOC_XSTACK8
   2047          
   2048                // Is device identifying itself?
   2049                if ( identifyTime > 0 )
   \   0002E4   7402         MOV     A,#0x2
   \   0002E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E9   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   0002EC   6014         JZ      ??zclGeneral_ProcessInGroupsServer_23
   2050                {
   2051                  zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \   0002EE                ; Setup parameters for call to function zclGeneral_AddGroup
   \   0002EE   AC..         MOV     R4,?V2
   \   0002F0   AD..         MOV     R5,?V3
   \   0002F2   7404         MOV     A,#0x4
   \   0002F4   12....       LCALL   ?XSTACK_DISP101_8
   \   0002F7   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   2052                }
   \                     ??CrossCallReturnLabel_239:
   \   0002FA   12....       LCALL   `??zclGeneral_AddGroup::?relay`; Banked call to: zclGeneral_AddGroup
   \   0002FD   8003         SJMP    ??zclGeneral_ProcessInGroupsServer_23
   2053                break;
   2054          
   2055              default:
   2056                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsServer_6:
   \   0002FF   75..01       MOV     ?V0,#0x1
   2057                break;
   2058            }
   2059          
   2060            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsServer_23:
   \   000302   A9..         MOV     R1,?V0
   \   000304   7436         MOV     A,#0x36
   \   000306   02....       LJMP    ?Subroutine3 & 0xFFFF
   2061          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   F5..         MOV     ?V2,A
   \   000005   78..         MOV     R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   F5..         MOV     ?V0,A
   \   000005   78..         MOV     R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupViewResponse
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   000003                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000003                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   000003   85..82       MOV     DPL,?V8
   \   000006   85..83       MOV     DPH,?V9
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine81_0
   \   000004                ; // Fall through to label ??Subroutine81_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine85_0
   \   000003                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002                REQUIRE ??Subroutine89_0
   \   000002                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C8           XCH     A,R0
   \   000009   2414         ADD     A,#0x14
   \   00000B   F582         MOV     DPL,A
   \   00000D   E4           CLR     A
   \   00000E   38           ADDC    A,R0
   \   00000F   F583         MOV     DPH,A
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   22           RET
   2062          
   2063          /*********************************************************************
   2064           * @fn      zclGeneral_ProcessInGroupsClient
   2065           *
   2066           * @brief   Process in the received Groups Command.
   2067           *
   2068           * @param   pInMsg - pointer to the incoming message
   2069           *
   2070           * @return  ZStatus_t
   2071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2072          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInGroupsClient:
   2073                                                             zclGeneral_AppCallbacks_t *pCBs )
   2074          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   2075            aps_Group_t group;
   2076            uint8 *pData = pInMsg->pData;
   \   000012   12....       LCALL   ?Subroutine35 & 0xFFFF
   2077            uint8 grpCnt;
   2078            uint8 nameLen;
   2079            zclGroupRsp_t rsp;
   2080            uint8 i;
   2081            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_228:
   \   000015   75..00       MOV     ?V11,#0x0
   2082          
   2083            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   000018                ; Setup parameters for call to function osal_memset
   \   000018   7C12         MOV     R4,#0x12
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2084            zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C0A         MOV     R4,#0xa
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   AA..         MOV     R2,?XSP + 0
   \   00002E   AB..         MOV     R3,?XSP + 1
   \   000030   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2085          
   2086            switch ( pInMsg->hdr.commandID )
   \   000033   EE           MOV     A,R6
   \   000034   2402         ADD     A,#0x2
   \   000036   FA           MOV     R2,A
   \   000037   E4           CLR     A
   \   000038   3F           ADDC    A,R7
   \   000039   FB           MOV     R3,A
   \   00003A   E5..         MOV     A,?V0
   \   00003C   2410         ADD     A,#0x10
   \   00003E   F5..         MOV     ?V0,A
   \   000040   5002         JNC     ??zclGeneral_ProcessInGroupsClient_0
   \   000042   05..         INC     ?V1
   \                     ??zclGeneral_ProcessInGroupsClient_0:
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   A882         MOV     R0,DPL
   \   00004B   A983         MOV     R1,DPH
   \   00004D   E5..         MOV     A,?V6
   \   00004F   2407         ADD     A,#0x7
   \   000051   F5..         MOV     ?V2,A
   \   000053   E4           CLR     A
   \   000054   35..         ADDC    A,?V7
   \   000056   F5..         MOV     ?V3,A
   \   000058   85..82       MOV     DPL,?V2
   \   00005B   F583         MOV     DPH,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   600F         JZ      ??zclGeneral_ProcessInGroupsClient_1
   \   000060   14           DEC     A
   \   000061   600C         JZ      ??zclGeneral_ProcessInGroupsClient_1
   \   000063   14           DEC     A
   \   000064   7003         JNZ     $+5
   \   000066   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_2 & 0xFFFF
   \   000069   14           DEC     A
   \   00006A   6003         JZ      $+5
   \   00006C   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_3 & 0xFFFF
   2087            {
   2088              case COMMAND_GROUP_ADD_RSP:
   2089              case COMMAND_GROUP_VIEW_RSP:
   2090              case COMMAND_GROUP_REMOVE_RSP:
   2091                rsp.status = *pData++;
   \                     ??zclGeneral_ProcessInGroupsClient_1:
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V4,A
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   E5..         MOV     A,?V4
   \   00007D   12....       LCALL   ?Subroutine50 & 0xFFFF
   2092                group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_92:
   \   000080   E0           MOVX    A,@DPTR
   \   000081   FC           MOV     R4,A
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   EC           MOV     A,R4
   \   000089   F8           MOV     R0,A
   \   00008A   740A         MOV     A,#0xa
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   12....       LCALL   ?Subroutine52 & 0xFFFF
   2093          
   2094                if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
   \                     ??CrossCallReturnLabel_99:
   \   000092   E5..         MOV     A,?V4
   \   000094   7059         JNZ     ??CrossCallReturnLabel_100
   \   000096   85..82       MOV     DPL,?V2
   \   000099   85..83       MOV     DPH,?V3
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6401         XRL     A,#0x1
   \   00009F   704E         JNZ     ??CrossCallReturnLabel_100
   2095                {
   2096                  pData += 2;   // Move past ID
   2097                  nameLen = *pData++;
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FC           MOV     R4,A
   \   0000A9   EE           MOV     A,R6
   \   0000AA   2403         ADD     A,#0x3
   \   0000AC   FE           MOV     R6,A
   \   0000AD   5001         JNC     ??zclGeneral_ProcessInGroupsClient_4
   \   0000AF   0F           INC     R7
   2098                  if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \                     ??zclGeneral_ProcessInGroupsClient_4:
   \   0000B0   EC           MOV     A,R4
   \   0000B1   C3           CLR     C
   \   0000B2   9410         SUBB    A,#0x10
   \   0000B4   4002         JC      ??zclGeneral_ProcessInGroupsClient_5
   2099                    nameLen = (APS_GROUP_NAME_LEN-1);
   \   0000B6   7C0F         MOV     R4,#0xf
   2100                  group.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInGroupsClient_5:
   \   0000B8   740C         MOV     A,#0xc
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   EC           MOV     A,R4
   \   0000BE   F0           MOVX    @DPTR,A
   2101                  zcl_memcpy( &(group.name[1]), pData, nameLen );
   \   0000BF                ; Setup parameters for call to function osal_memcpy
   \   0000BF   8E..         MOV     ?V8,R6
   \   0000C1   8F..         MOV     ?V9,R7
   \   0000C3   75..00       MOV     ?V10,#0x0
   \   0000C6   78..         MOV     R0,#?V8
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CB   7D00         MOV     R5,#0x0
   \   0000CD   7410         MOV     A,#0x10
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   AA82         MOV     R2,DPL
   \   0000D4   AB83         MOV     R3,DPH
   \   0000D6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D9   7403         MOV     A,#0x3
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   2102                  rsp.grpName = group.name;
   \   0000DE   740C         MOV     A,#0xc
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   A882         MOV     R0,DPL
   \   0000E5   A983         MOV     R1,DPH
   \   0000E7   7408         MOV     A,#0x8
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ?Subroutine52 & 0xFFFF
   2103                }
   2104          
   2105                if ( pCBs->pfnGroupRsp )
   \                     ??CrossCallReturnLabel_100:
   \   0000EF   85..82       MOV     DPL,?V0
   \   0000F2   85..83       MOV     DPH,?V1
   \   0000F5   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000F8   7003         JNZ     $+5
   \   0000FA   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2106                {
   2107                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0000FD   12....       LCALL   ?Subroutine16 & 0xFFFF
   2108                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_24:
   \   000100   C0E0         PUSH    A
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   D0E0         POP     A
   \   000109   F0           MOVX    @DPTR,A
   2109                  rsp.grpCnt = 1;
   \   00010A   7404         MOV     A,#0x4
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   7401         MOV     A,#0x1
   \   000111   F0           MOVX    @DPTR,A
   2110                  rsp.grpList = &group.ID;
   \   000112   740A         MOV     A,#0xa
   \   000114   12....       LCALL   ?XSTACK_DISP100_8
   \   000117   7405         MOV     A,#0x5
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   12....       LCALL   ?Subroutine52 & 0xFFFF
   2111                  rsp.capacity = 0;
   \                     ??CrossCallReturnLabel_101:
   \   00011F   7407         MOV     A,#0x7
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   E4           CLR     A
   \   000125   12....       LCALL   ?Subroutine48 & 0xFFFF
   2112          
   2113                  pCBs->pfnGroupRsp( &rsp );
   2114                }
   \                     ??CrossCallReturnLabel_88:
   \   000128   12....       LCALL   ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00012B   12....       LCALL   ?CALL_IND
   \   00012E   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_6 & 0xFFFF
   2115                break;
   2116          
   2117              case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
   2118                {
   2119                  uint16 *grpList = NULL;
   \                     ??zclGeneral_ProcessInGroupsClient_2:
   \   000131   75..00       MOV     ?V4,#0x0
   \   000134   75..00       MOV     ?V5,#0x0
   2120                  rsp.capacity = *pData++;
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   C0E0         PUSH    A
   \   00013E   7407         MOV     A,#0x7
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   D0E0         POP     A
   \   000145   F0           MOVX    @DPTR,A
   2121                  grpCnt = *pData++;
   \   000146   8882         MOV     DPL,R0
   \   000148   8983         MOV     DPH,R1
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   F5..         MOV     ?V8,A
   \   00014D   0E           INC     R6
   \   00014E   0E           INC     R6
   \   00014F   EB           MOV     A,R3
   \   000150   FF           MOV     R7,A
   2122          
   2123                  if ( grpCnt > 0 )
   \   000151   E5..         MOV     A,?V8
   \   000153   6050         JZ      ??zclGeneral_ProcessInGroupsClient_7
   2124                  {
   2125                    // Allocate space for the group list
   2126                    grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
   \   000155                ; Setup parameters for call to function osal_mem_alloc
   \   000155   25E0         ADD     A,0xE0 /* A   */
   \   000157   FA           MOV     R2,A
   \   000158   E4           CLR     A
   \   000159   33           RLC     A
   \   00015A   FB           MOV     R3,A
   \   00015B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00015E   8A..         MOV     ?V4,R2
   \   000160   8B..         MOV     ?V5,R3
   2127                    if ( grpList != NULL )
   \   000162   EA           MOV     A,R2
   \   000163   45..         ORL     A,?V5
   \   000165   603E         JZ      ??zclGeneral_ProcessInGroupsClient_7
   2128                    {
   2129                      rsp.grpCnt = grpCnt;
   \   000167   7404         MOV     A,#0x4
   \   000169   12....       LCALL   ?XSTACK_DISP0_8
   \   00016C   E5..         MOV     A,?V8
   \   00016E   F0           MOVX    @DPTR,A
   2130                      for ( i = 0; i < grpCnt; i++ )
   \   00016F   7C00         MOV     R4,#0x0
   \   000171   802C         SJMP    ??zclGeneral_ProcessInGroupsClient_8
   2131                      {
   2132                        grpList[i] = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsClient_9:
   \   000173   8E82         MOV     DPL,R6
   \   000175   8F83         MOV     DPH,R7
   \   000177   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00017A   F8           MOV     R0,A
   \   00017B   E4           CLR     A
   \   00017C   C8           XCH     A,R0
   \   00017D   F9           MOV     R1,A
   \   00017E   EA           MOV     A,R2
   \   00017F   28           ADD     A,R0
   \   000180   E4           CLR     A
   \   000181   39           ADDC    A,R1
   \   000182   FB           MOV     R3,A
   \   000183   EC           MOV     A,R4
   \   000184   25E0         ADD     A,0xE0 /* A   */
   \   000186   F8           MOV     R0,A
   \   000187   E4           CLR     A
   \   000188   33           RLC     A
   \   000189   F9           MOV     R1,A
   \   00018A   E5..         MOV     A,?V4
   \   00018C   28           ADD     A,R0
   \   00018D   F582         MOV     DPL,A
   \   00018F   E5..         MOV     A,?V5
   \   000191   39           ADDC    A,R1
   \   000192   F583         MOV     DPH,A
   \   000194   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   2133                        pData += 2;
   \                     ??CrossCallReturnLabel_208:
   \   000197   EE           MOV     A,R6
   \   000198   2402         ADD     A,#0x2
   \   00019A   FE           MOV     R6,A
   \   00019B   5001         JNC     ??zclGeneral_ProcessInGroupsClient_10
   \   00019D   0F           INC     R7
   2134                      }
   \                     ??zclGeneral_ProcessInGroupsClient_10:
   \   00019E   0C           INC     R4
   \                     ??zclGeneral_ProcessInGroupsClient_8:
   \   00019F   EC           MOV     A,R4
   \   0001A0   C3           CLR     C
   \   0001A1   95..         SUBB    A,?V8
   \   0001A3   40CE         JC      ??zclGeneral_ProcessInGroupsClient_9
   2135                    }
   2136                  }
   2137          
   2138                  if ( pCBs->pfnGroupRsp )
   \                     ??zclGeneral_ProcessInGroupsClient_7:
   \   0001A5   85..82       MOV     DPL,?V0
   \   0001A8   85..83       MOV     DPH,?V1
   \   0001AB   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0001AE   6021         JZ      ??zclGeneral_ProcessInGroupsClient_11
   2139                  {
   2140                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0001B0   12....       LCALL   ?Subroutine16 & 0xFFFF
   2141                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_25:
   \   0001B3   C0E0         PUSH    A
   \   0001B5   7402         MOV     A,#0x2
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   D0E0         POP     A
   \   0001BC   F0           MOVX    @DPTR,A
   2142                    rsp.grpList = grpList;
   \   0001BD   7405         MOV     A,#0x5
   \   0001BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C2   E5..         MOV     A,?V4
   \   0001C4   F0           MOVX    @DPTR,A
   \   0001C5   A3           INC     DPTR
   \   0001C6   E5..         MOV     A,?V5
   \   0001C8   12....       LCALL   ?Subroutine48 & 0xFFFF
   2143          
   2144                    pCBs->pfnGroupRsp( &rsp );
   2145                  }
   \                     ??CrossCallReturnLabel_89:
   \   0001CB   12....       LCALL   ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   0001CE   12....       LCALL   ?CALL_IND
   2146          
   2147                  if ( grpList != NULL )
   \                     ??zclGeneral_ProcessInGroupsClient_11:
   \   0001D1   E5..         MOV     A,?V4
   \   0001D3   45..         ORL     A,?V5
   \   0001D5   600C         JZ      ??zclGeneral_ProcessInGroupsClient_6
   2148                  {
   2149                    zcl_mem_free( grpList );
   \   0001D7                ; Setup parameters for call to function osal_mem_free
   \   0001D7   AA..         MOV     R2,?V4
   \   0001D9   AB..         MOV     R3,?V5
   \   0001DB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001DE   8003         SJMP    ??zclGeneral_ProcessInGroupsClient_6
   2150                  }
   2151                }
   2152                break;
   2153          
   2154              default:
   2155                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsClient_3:
   \   0001E0   75..01       MOV     ?V11,#0x1
   2156                break;
   2157            }
   2158          
   2159            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsClient_6:
   \   0001E3   A9..         MOV     R1,?V11
   \   0001E5   741C         MOV     A,#0x1c
   \   0001E7   02....       LJMP    ?Subroutine3 & 0xFFFF
   2160          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   AA..         MOV     R2,?XSP + 0
   \   000003   AB..         MOV     R3,?XSP + 1
   \   000005   85..82       MOV     DPL,?V0
   \   000008   85..83       MOV     DPH,?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV     DPL,?V6
   \   000003   85..83       MOV     DPH,?V7
   \   000006   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000009   85..82       MOV     DPL,?V2
   \   00000C   85..83       MOV     DPH,?V3
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine88_0
   \   00000C                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   FE           MOV     R6,A
   \   000003   E9           MOV     A,R1
   \   000004   FF           MOV     R7,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   E8           MOV     A,R0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E9           MOV     A,R1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
   2161          #endif // ZCL_GROUPS
   2162          
   2163          #if defined( ZCL_SCENES )
   2164          #if !defined ( ZCL_STANDALONE )
   2165          /*********************************************************************
   2166           * @fn      zclGeneral_AddScene
   2167           *
   2168           * @brief   Add a scene for an endpoint
   2169           *
   2170           * @param   endpoint -
   2171           * @param   scene - new scene item
   2172           *
   2173           * @return  ZStatus_t
   2174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2175          ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
   \                     zclGeneral_AddScene:
   2176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   2177            zclGenSceneItem_t *pNewItem;
   2178            zclGenSceneItem_t *pLoop;
   2179          
   2180            // Fill in the new profile list
   2181            pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A3A         MOV     R2,#0x3a
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV     ?V4,R2
   \   000014   8B..         MOV     ?V5,R3
   \   000016   AE..         MOV     R6,?V4
   \   000018   AF..         MOV     R7,?V5
   2182            if ( pNewItem == NULL )
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   7004         JNZ     ??zclGeneral_AddScene_0
   2183              return ( ZMemError );
   \   00001E   7910         MOV     R1,#0x10
   \   000020   8058         SJMP    ??zclGeneral_AddScene_1
   2184          
   2185            // Fill in the plugin record.
   2186            pNewItem->next = (zclGenSceneItem_t *)NULL;
   \                     ??zclGeneral_AddScene_0:
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?Subroutine47 & 0xFFFF
   2187            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_85:
   \   00002C   12....       LCALL   ?Subroutine44 & 0xFFFF
   2188            zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
   \                     ??CrossCallReturnLabel_80:
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000032   7C37         MOV     R4,#0x37
   \   000034   7D00         MOV     R5,#0x0
   \   000036   EE           MOV     A,R6
   \   000037   2403         ADD     A,#0x3
   \   000039   FA           MOV     R2,A
   \   00003A   E4           CLR     A
   \   00003B   3F           ADDC    A,R7
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   2189          
   2190            // Find spot in list
   2191            if (  zclGenSceneTable == NULL )
   \   000045   90....       MOV     DPTR,#zclGenSceneTable
   \   000048   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00004B   90....       MOV     DPTR,#zclGenSceneTable
   \   00004E   7006         JNZ     ??zclGeneral_AddScene_2
   2192            {
   2193              zclGenSceneTable = pNewItem;
   \   000050   EE           MOV     A,R6
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EF           MOV     A,R7
   \   000054   801E         SJMP    ??zclGeneral_AddScene_3
   2194            }
   2195            else
   2196            {
   2197              // Look for end of list
   2198              pLoop = zclGenSceneTable;
   \                     ??zclGeneral_AddScene_2:
   \   000056   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000059   8003         SJMP    ??zclGeneral_AddScene_4
   2199              while ( pLoop->next != NULL )
   2200                pLoop = pLoop->next;
   \                     ??zclGeneral_AddScene_5:
   \   00005B   E8           MOV     A,R0
   \   00005C   FA           MOV     R2,A
   \   00005D   E9           MOV     A,R1
   \                     ??zclGeneral_AddScene_4:
   \   00005E   FB           MOV     R3,A
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000066   70F3         JNZ     ??zclGeneral_AddScene_5
   2201          
   2202              // Put new item at end of list
   2203              pLoop->next = pNewItem;
   \   000068   EE           MOV     A,R6
   \   000069   F8           MOV     R0,A
   \   00006A   EF           MOV     A,R7
   \   00006B   F9           MOV     R1,A
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   E8           MOV     A,R0
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   E9           MOV     A,R1
   \                     ??zclGeneral_AddScene_3:
   \   000074   F0           MOVX    @DPTR,A
   2204            }
   2205          
   2206            // Update NV
   2207            zclGeneral_ScenesWriteNV();
   \   000075                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000075   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2208          
   2209            return ( ZSuccess );
   \   000078   7900         MOV     R1,#0x0
   \                     ??zclGeneral_AddScene_1:
   \   00007A   02....       LJMP    ?Subroutine6 & 0xFFFF
   2210          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E5..         MOV     A,?V2
   \   000002   F0           MOVX    @DPTR,A
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   85....       MOV     ?V4,?V0
   \   000006   85....       MOV     ?V5,?V1
   \   000009   75..00       MOV     ?V6,#0x0
   \   00000C   78..         MOV     R0,#?V4
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   2211          #endif // ZCL_STANDALONE
   2212          
   2213          #if !defined ( ZCL_STANDALONE )
   2214          /*********************************************************************
   2215           * @fn      zclGeneral_FindScene
   2216           *
   2217           * @brief   Find a scene with endpoint and sceneID
   2218           *
   2219           * @param   endpoint -
   2220           * @param   groupID - what group the scene belongs to
   2221           * @param   sceneID - ID to look for scene
   2222           *
   2223           * @return  a pointer to the scene information, NULL if not found
   2224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2225          zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_FindScene:
   2226          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   2227            zclGenSceneItem_t *pLoop;
   2228          
   2229            // Look for end of list
   2230            pLoop = zclGenSceneTable;
   \   000007   90....       MOV     DPTR,#zclGenSceneTable
   \   00000A   8004         SJMP    ??zclGeneral_FindScene_0
   2231            while ( pLoop )
   2232            {
   2233              if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
   2234                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2235              {
   2236                return ( &(pLoop->scene) );
   2237              }
   2238              pLoop = pLoop->next;
   \                     ??zclGeneral_FindScene_1:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \                     ??zclGeneral_FindScene_0:
   \   000010   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   602E         JZ      ??zclGeneral_FindScene_2
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6D           XRL     A,R5
   \   00001F   6005         JZ      ??zclGeneral_FindScene_3
   \   000021   74FF         MOV     A,#-0x1
   \   000023   6D           XRL     A,R5
   \   000024   70E6         JNZ     ??zclGeneral_FindScene_1
   \                     ??zclGeneral_FindScene_3:
   \   000026   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6A           XRL     A,R2
   \   00002B   7003         JNZ     ??zclGeneral_FindScene_4
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6B           XRL     A,R3
   \                     ??zclGeneral_FindScene_4:
   \   000030   70DA         JNZ     ??zclGeneral_FindScene_1
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6C           XRL     A,R4
   \   00003D   70CD         JNZ     ??zclGeneral_FindScene_1
   \   00003F   E8           MOV     A,R0
   \   000040   FA           MOV     R2,A
   \   000041   E9           MOV     A,R1
   \   000042   FB           MOV     R3,A
   \   000043   8004         SJMP    ??zclGeneral_FindScene_5
   2239            }
   2240          
   2241            return ( (zclGeneral_Scene_t *)NULL );
   \                     ??zclGeneral_FindScene_2:
   \   000045   7A00         MOV     R2,#0x0
   \   000047   7B00         MOV     R3,#0x0
   \                     ??zclGeneral_FindScene_5:
   \   000049                REQUIRE ?Subroutine7
   \   000049                ; // Fall through to label ?Subroutine7
   2242          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   2243          #endif // ZCL_STANDALONE
   2244          
   2245          #if !defined ( ZCL_STANDALONE )
   2246          /*********************************************************************
   2247           * @fn      zclGeneral_FindAllScenesForGroup
   2248           *
   2249           * @brief   Find all the scenes with groupID
   2250           *
   2251           * @param   endpoint - endpoint to look for
   2252           * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
   2253           *
   2254           * @return  number of scenes copied to sceneList
   2255           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2256          uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
   \                     zclGeneral_FindAllScenesForGroup:
   2257          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   2258            zclGenSceneItem_t *pLoop;
   2259            uint8 cnt = 0;
   \   000007   75..00       MOV     ?V0,#0x0
   2260          
   2261            // Look for end of list
   2262            pLoop = zclGenSceneTable;
   \   00000A   90....       MOV     DPTR,#zclGenSceneTable
   \   00000D   803A         SJMP    ??zclGeneral_FindAllScenesForGroup_0
   2263            while ( pLoop )
   2264            {
   2265              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   \                     ??zclGeneral_FindAllScenesForGroup_1:
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   65..         XRL     A,?V1
   \   000018   702B         JNZ     ??zclGeneral_FindAllScenesForGroup_2
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6A           XRL     A,R2
   \   000023   7003         JNZ     ??zclGeneral_FindAllScenesForGroup_3
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6B           XRL     A,R3
   \                     ??zclGeneral_FindAllScenesForGroup_3:
   \   000028   701B         JNZ     ??zclGeneral_FindAllScenesForGroup_2
   2266                sceneList[cnt++] = pLoop->scene.ID;
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C0E0         PUSH    A
   \   000036   AE..         MOV     R6,?V0
   \   000038   EC           MOV     A,R4
   \   000039   2E           ADD     A,R6
   \   00003A   F582         MOV     DPL,A
   \   00003C   E4           CLR     A
   \   00003D   3D           ADDC    A,R5
   \   00003E   F583         MOV     DPH,A
   \   000040   D0E0         POP     A
   \   000042   F0           MOVX    @DPTR,A
   \   000043   05..         INC     ?V0
   2267              pLoop = pLoop->next;
   \                     ??zclGeneral_FindAllScenesForGroup_2:
   \   000045   8882         MOV     DPL,R0
   \   000047   8983         MOV     DPH,R1
   2268            }
   \                     ??zclGeneral_FindAllScenesForGroup_0:
   \   000049   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   00004C   70C1         JNZ     ??zclGeneral_FindAllScenesForGroup_1
   2269            return ( cnt );
   \   00004E                REQUIRE ?Subroutine9
   \   00004E                ; // Fall through to label ?Subroutine9
   2270          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A9..         MOV     R1,?V0
   \   000002   02....       LJMP    ??Subroutine80_0 & 0xFFFF
   2271          #endif // ZCL_STANDALONE
   2272          
   2273          #if !defined ( ZCL_STANDALONE )
   2274          /*********************************************************************
   2275           * @fn      zclGeneral_RemoveScene
   2276           *
   2277           * @brief   Remove a scene with endpoint and sceneID
   2278           *
   2279           * @param   endpoint -
   2280           * @param   groupID - what group the scene belongs to
   2281           * @param   sceneID - ID to look for scene
   2282           *
   2283           * @return  TRUE if removed, FALSE if not found
   2284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2285          uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_RemoveScene:
   2286          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EC           MOV     A,R4
   \   000008   FF           MOV     R7,A
   2287            zclGenSceneItem_t *pLoop;
   2288            zclGenSceneItem_t *pPrev;
   2289          
   2290            // Look for end of list
   2291            pLoop = zclGenSceneTable;
   \   000009   90....       MOV     DPTR,#zclGenSceneTable
   \   00000C   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   2292            pPrev = NULL;
   \                     ??CrossCallReturnLabel_217:
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   800B         SJMP    ??CrossCallReturnLabel_218
   2293            while ( pLoop )
   2294            {
   2295              if ( pLoop->endpoint == endpoint
   2296                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2297              {
   2298                if ( pPrev == NULL )
   2299                  zclGenSceneTable = pLoop->next;
   2300                else
   2301                  pPrev->next = pLoop->next;
   2302          
   2303                // Free the memory
   2304                zcl_mem_free( pLoop );
   2305          
   2306                // Update NV
   2307                zclGeneral_ScenesWriteNV();
   2308          
   2309                return ( TRUE );
   2310              }
   2311              pPrev = pLoop;
   \                     ??zclGeneral_RemoveScene_0:
   \   000015   E8           MOV     A,R0
   \   000016   FC           MOV     R4,A
   \   000017   E9           MOV     A,R1
   \   000018   FD           MOV     R5,A
   2312              pLoop = pLoop->next;
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000020   E8           MOV     A,R0
   \   000021   49           ORL     A,R1
   \   000022   604C         JZ      ??zclGeneral_RemoveScene_1
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6E           XRL     A,R6
   \   00002C   70E7         JNZ     ??zclGeneral_RemoveScene_0
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6A           XRL     A,R2
   \   000037   7003         JNZ     ??zclGeneral_RemoveScene_2
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6B           XRL     A,R3
   \                     ??zclGeneral_RemoveScene_2:
   \   00003C   70D7         JNZ     ??zclGeneral_RemoveScene_0
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6F           XRL     A,R7
   \   000049   70CA         JNZ     ??zclGeneral_RemoveScene_0
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000052   EC           MOV     A,R4
   \   000053   4D           ORL     A,R5
   \   000054   7005         JNZ     ??zclGeneral_RemoveScene_3
   \   000056   90....       MOV     DPTR,#zclGenSceneTable
   \   000059   8004         SJMP    ??zclGeneral_RemoveScene_4
   \                     ??zclGeneral_RemoveScene_3:
   \   00005B   8C82         MOV     DPL,R4
   \   00005D   8D83         MOV     DPH,R5
   \                     ??zclGeneral_RemoveScene_4:
   \   00005F   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000062                ; Setup parameters for call to function osal_mem_free
   \   000062   E8           MOV     A,R0
   \   000063   FA           MOV     R2,A
   \   000064   E9           MOV     A,R1
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000069                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000069   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   8002         SJMP    ??zclGeneral_RemoveScene_5
   2313            }
   2314          
   2315            return ( FALSE );
   \                     ??zclGeneral_RemoveScene_1:
   \   000070   7900         MOV     R1,#0x0
   \                     ??zclGeneral_RemoveScene_5:
   \   000072   02....       LJMP    ?Subroutine7 & 0xFFFF
   2316          }
   2317          #endif // ZCL_STANDALONE
   2318          
   2319          #if !defined ( ZCL_STANDALONE )
   2320          /*********************************************************************
   2321           * @fn      zclGeneral_RemoveAllScenes
   2322           *
   2323           * @brief   Remove all scenes with endpoint and group Id
   2324           *
   2325           * @param   endpoint -
   2326           * @param   groupID - ID to look for group
   2327           *
   2328           * @return  none
   2329           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2330          void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
   \                     zclGeneral_RemoveAllScenes:
   2331          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   2332            zclGenSceneItem_t *pLoop;
   2333            zclGenSceneItem_t *pPrev;
   2334            zclGenSceneItem_t *pNext;
   2335          
   2336            // Look for end of list
   2337            pLoop = zclGenSceneTable;
   \   00000B   90....       MOV     DPTR,#zclGenSceneTable
   \   00000E   12....       LCALL   ?Subroutine29 & 0xFFFF
   2338            pPrev = NULL;
   \                     ??CrossCallReturnLabel_50:
   \   000011   7E00         MOV     R6,#0x0
   \   000013   7F00         MOV     R7,#0x0
   \   000015   8015         SJMP    ??zclGeneral_RemoveAllScenes_0
   2339            while ( pLoop )
   2340            {
   2341              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   2342              {
   2343                if ( pPrev == NULL )
   2344                  zclGenSceneTable = pLoop->next;
   2345                else
   2346                  pPrev->next = pLoop->next;
   \                     ??zclGeneral_RemoveAllScenes_1:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \                     ??zclGeneral_RemoveAllScenes_2:
   \   00001B   12....       LCALL   ?Subroutine51 & 0xFFFF
   2347                pNext = pLoop->next;
   \                     ??CrossCallReturnLabel_95:
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V2,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V3,A
   2348          
   2349                // Free the memory
   2350                zcl_mem_free( pLoop );
   \   000025                ; Setup parameters for call to function osal_mem_free
   \   000025   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2351                pLoop = pNext;
   \   000028   AA..         MOV     R2,?V2
   \   00002A   AB..         MOV     R3,?V3
   \                     ??zclGeneral_RemoveAllScenes_0:
   \   00002C   EA           MOV     A,R2
   \   00002D   4B           ORL     A,R3
   \   00002E   603A         JZ      ??zclGeneral_RemoveAllScenes_3
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   65..         XRL     A,?V4
   \   000039   7022         JNZ     ??zclGeneral_RemoveAllScenes_4
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   8B83         MOV     DPH,R3
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   65..         XRL     A,?V0
   \   000045   7004         JNZ     ??zclGeneral_RemoveAllScenes_5
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V1
   \                     ??zclGeneral_RemoveAllScenes_5:
   \   00004B   7010         JNZ     ??zclGeneral_RemoveAllScenes_4
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000054   EE           MOV     A,R6
   \   000055   4F           ORL     A,R7
   \   000056   70BF         JNZ     ??zclGeneral_RemoveAllScenes_1
   \   000058   90....       MOV     DPTR,#zclGenSceneTable
   \   00005B   80BE         SJMP    ??zclGeneral_RemoveAllScenes_2
   2352              }
   2353              else
   2354              {
   2355                pPrev = pLoop;
   \                     ??zclGeneral_RemoveAllScenes_4:
   \   00005D   EA           MOV     A,R2
   \   00005E   FE           MOV     R6,A
   \   00005F   EB           MOV     A,R3
   \   000060   FF           MOV     R7,A
   2356                pLoop = pLoop->next;
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   12....       LCALL   ?Subroutine29 & 0xFFFF
   2357              }
   2358            }
   \                     ??CrossCallReturnLabel_51:
   \   000068   80C2         SJMP    ??zclGeneral_RemoveAllScenes_0
   2359          
   2360            // Update NV
   2361            zclGeneral_ScenesWriteNV();
   \                     ??zclGeneral_RemoveAllScenes_3:
   \   00006A                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   00006A   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2362          }
   \   00006D   7F05         MOV     R7,#0x5
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
   2363          #endif // ZCL_STANDALONE
   2364          
   2365          #if !defined ( ZCL_STANDALONE )
   2366          /*********************************************************************
   2367           * @fn      zclGeneral_CountScenes
   2368           *
   2369           * @brief   Count the number of scenes for an endpoint
   2370           *
   2371           * @param   endpoint -
   2372           *
   2373           * @return  number of scenes assigned to an endpoint
   2374           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2375          uint8 zclGeneral_CountScenes( uint8 endpoint )
   \                     zclGeneral_CountScenes:
   2376          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   2377            zclGenSceneItem_t *pLoop;
   2378            uint8 cnt = 0;
   \   000006   7900         MOV     R1,#0x0
   2379          
   2380            // Look for end of list
   2381            pLoop = zclGenSceneTable;
   \   000008   90....       MOV     DPTR,#zclGenSceneTable
   \   00000B   800F         SJMP    ??zclGeneral_CountScenes_0
   2382            while ( pLoop )
   2383            {
   2384              if ( pLoop->endpoint == endpoint  )
   \                     ??zclGeneral_CountScenes_1:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   68           XRL     A,R0
   \   000015   7001         JNZ     ??zclGeneral_CountScenes_2
   2385                cnt++;
   \   000017   09           INC     R1
   2386              pLoop = pLoop->next;
   \                     ??zclGeneral_CountScenes_2:
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   2387            }
   \                     ??zclGeneral_CountScenes_0:
   \   00001C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00001F   70EC         JNZ     ??zclGeneral_CountScenes_1
   2388            return ( cnt );
   \   000021   80..         SJMP    ?Subroutine5
   2389          }
   2390          #endif
   2391          
   2392          #if !defined ( ZCL_STANDALONE )
   2393          /*********************************************************************
   2394           * @fn      zclGeneral_CountAllScenes
   2395           *
   2396           * @brief   Count the total number of scenes
   2397           *
   2398           * @param   none
   2399           *
   2400           * @return  number of scenes
   2401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2402          uint8 zclGeneral_CountAllScenes( void )
   \                     zclGeneral_CountAllScenes:
   2403          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2404            zclGenSceneItem_t *pLoop;
   2405            uint8 cnt = 0;
   \   000004   7900         MOV     R1,#0x0
   2406          
   2407            // Look for end of list
   2408            pLoop = zclGenSceneTable;
   \   000006   90....       MOV     DPTR,#zclGenSceneTable
   \   000009   8001         SJMP    ??zclGeneral_CountAllScenes_0
   2409            while ( pLoop )
   2410            {
   2411              cnt++;
   \                     ??zclGeneral_CountAllScenes_1:
   \   00000B   09           INC     R1
   2412              pLoop = pLoop->next;
   2413            }
   \                     ??zclGeneral_CountAllScenes_0:
   \   00000C   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   70F2         JNZ     ??zclGeneral_CountAllScenes_1
   2414            return ( cnt );
   \   000019                REQUIRE ?Subroutine5
   \   000019                ; // Fall through to label ?Subroutine5
   2415          }
   2416          #endif // ZCL_STANDALONE
   2417          
   2418          /*********************************************************************
   2419           * @fn      zclGeneral_ReadSceneCountCB
   2420           *
   2421           * @brief   Read the number of scenes currently in the device's
   2422           *          scene table (i.e., the Scene Count attribute).
   2423           *
   2424           *          Note: This function gets called only when the pointer
   2425           *                'dataPtr' to the Scene Count attribute value is
   2426           *                NULL in the attribute database registered with
   2427           *                the ZCL.
   2428           *
   2429           * @param   clusterId - cluster that attribute belongs to
   2430           * @param   attrId - attribute to be read or written
   2431           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
   2432           * @param   pValue - pointer to attribute value
   2433           * @param   pLen - pointer to length of attribute value read
   2434           *
   2435           * @return  status
   2436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2437          ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
   \                     zclGeneral_ReadSceneCountCB:
   2438                                                 uint8 oper, uint8 *pValue, uint16 *pLen )
   2439          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   2440            ZStatus_t status = ZCL_STATUS_SUCCESS;
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   740C         MOV     A,#0xc
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   2441          
   2442            // This callback function should only be called for the Scene Count attribute
   2443            switch ( oper )
   \                     ??CrossCallReturnLabel_175:
   \   000012   E5..         MOV     A,?V1
   \   000014   6014         JZ      ??zclGeneral_ReadSceneCountCB_0
   \   000016   14           DEC     A
   \   000017   701D         JNZ     ??zclGeneral_ReadSceneCountCB_1
   2444            {
   2445              case ZCL_OPER_LEN:
   2446                *pLen = 1; // uint8
   2447                break;
   2448          
   2449              case ZCL_OPER_READ:
   2450                *pValue = zclGeneral_CountAllScenes();
   \   000019                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000019   12....       LCALL   `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   00001C   740A         MOV     A,#0xa
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000024   E9           MOV     A,R1
   \   000025   F0           MOVX    @DPTR,A
   2451          
   2452                if ( pLen != NULL )
   \   000026   EE           MOV     A,R6
   \   000027   4F           ORL     A,R7
   \   000028   600F         JZ      ??zclGeneral_ReadSceneCountCB_2
   2453                {
   2454                  *pLen = 1;
   \                     ??zclGeneral_ReadSceneCountCB_0:
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   8003         SJMP    ??zclGeneral_ReadSceneCountCB_2
   2455                }
   2456                break;
   2457          
   2458              case ZCL_OPER_WRITE:
   2459                // Fall through
   2460          
   2461              default:
   2462                status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
   \                     ??zclGeneral_ReadSceneCountCB_1:
   \   000036   75..C1       MOV     ?V0,#-0x3f
   2463                break;
   2464            }
   2465          
   2466            return ( status );
   \                     ??zclGeneral_ReadSceneCountCB_2:
   \   000039   02....       LJMP    ?Subroutine9 & 0xFFFF
   2467          }
   2468          
   2469          /*********************************************************************
   2470           * @fn      zclGeneral_ProcessInScenesServer
   2471           *
   2472           * @brief   Process in the received Scenes Command.
   2473           *
   2474           * @param   pInMsg - pointer to the incoming message
   2475           *
   2476           * @return  ZStatus_t
   2477           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?V12
   \   000003   85..83       MOV     DPH,?V13
   \   000006                REQUIRE ??Subroutine75_0
   \   000006                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine82_0
   \   000004                ; // Fall through to label ??Subroutine82_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine83_0
   \   000002                ; // Fall through to label ??Subroutine83_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2478          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesServer:
   2479                                                             zclGeneral_AppCallbacks_t *pCBs )
   2480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 60
   \   000005   74C4         MOV     A,#-0x3c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V6,R4
   \   000010   8D..         MOV     ?V7,R5
   2481            zclGeneral_Scene_t scene;
   2482            zclGeneral_Scene_t *pScene;
   2483            uint8 *pData = pInMsg->pData;
   \   000012   EE           MOV     A,R6
   \   000013   2408         ADD     A,#0x8
   \   000015   F5..         MOV     ?V8,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F5..         MOV     ?V9,A
   \   00001B   85..82       MOV     DPL,?V8
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V1,A
   2484            uint8 nameLen;
   2485            uint8 status;
   2486            uint8 sceneCnt = 0;
   \   000027   75..00       MOV     ?V5,#0x0
   2487            uint8 *sceneList = NULL;
   \   00002A   75..00       MOV     ?V2,#0x0
   \   00002D   75..00       MOV     ?V3,#0x0
   2488            uint8 sendRsp = TRUE;
   2489            uint8 nameSupport = FALSE;
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
   2490            ZStatus_t stat = ZSuccess;
   \   000038   75..00       MOV     ?V4,#0x0
   2491          
   2492            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7C37         MOV     R4,#0x37
   \   00003D   FD           MOV     R5,A
   \   00003E   F9           MOV     R1,A
   \   00003F   7405         MOV     A,#0x5
   \   000041   12....       LCALL   ?XSTACK_DISP101_8
   \   000044   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2493          
   2494            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \   000047   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00004A   7405         MOV     A,#0x5
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine52 & 0xFFFF
   2495            pData += 2;   // Move past group ID
   2496            scene.ID = *pData++;
   \                     ??CrossCallReturnLabel_102:
   \   000052   85..82       MOV     DPL,?V0
   \   000055   85..83       MOV     DPH,?V1
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FC           MOV     R4,A
   \   00005C   7407         MOV     A,#0x7
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   EC           MOV     A,R4
   \   000062   F0           MOVX    @DPTR,A
   \   000063   E5..         MOV     A,?V0
   \   000065   2403         ADD     A,#0x3
   \   000067   F5..         MOV     ?V0,A
   \   000069   5002         JNC     ??zclGeneral_ProcessInScenesServer_0
   \   00006B   05..         INC     ?V1
   2497          
   2498            switch ( pInMsg->hdr.commandID )
   \                     ??zclGeneral_ProcessInScenesServer_0:
   \   00006D   EE           MOV     A,R6
   \   00006E   2406         ADD     A,#0x6
   \   000070   F5..         MOV     ?V12,A
   \   000072   E4           CLR     A
   \   000073   3F           ADDC    A,R7
   \   000074   F5..         MOV     ?V13,A
   \   000076   EE           MOV     A,R6
   \   000077   2407         ADD     A,#0x7
   \   000079   F5..         MOV     ?V10,A
   \   00007B   E4           CLR     A
   \   00007C   3F           ADDC    A,R7
   \   00007D   F5..         MOV     ?V11,A
   \   00007F   85..82       MOV     DPL,?V10
   \   000082   F583         MOV     DPH,A
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6027         JZ      ??zclGeneral_ProcessInScenesServer_1
   \   000087   14           DEC     A
   \   000088   7003         JNZ     $+5
   \   00008A   02....       LJMP    ??zclGeneral_ProcessInScenesServer_2 & 0xFFFF
   \   00008D   14           DEC     A
   \   00008E   7003         JNZ     $+5
   \   000090   02....       LJMP    ??zclGeneral_ProcessInScenesServer_3 & 0xFFFF
   \   000093   14           DEC     A
   \   000094   7003         JNZ     $+5
   \   000096   02....       LJMP    ??zclGeneral_ProcessInScenesServer_4 & 0xFFFF
   \   000099   14           DEC     A
   \   00009A   7003         JNZ     $+5
   \   00009C   02....       LJMP    ??zclGeneral_ProcessInScenesServer_5 & 0xFFFF
   \   00009F   14           DEC     A
   \   0000A0   7003         JNZ     $+5
   \   0000A2   02....       LJMP    ??zclGeneral_ProcessInScenesServer_6 & 0xFFFF
   \   0000A5   14           DEC     A
   \   0000A6   7003         JNZ     $+5
   \   0000A8   02....       LJMP    ??zclGeneral_ProcessInScenesServer_7 & 0xFFFF
   \   0000AB   02....       LJMP    ??zclGeneral_ProcessInScenesServer_8 & 0xFFFF
   2499            {
   2500              case COMMAND_SCENE_ADD:
   2501          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2502              case COMMAND_SCENE_ENHANCED_ADD:
   2503          #endif // ZCL_LIGHT_LINK_ENHANCE
   2504                // Parse the rest of the incoming message
   2505                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesServer_1:
   \   0000AE   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   0000B1   7408         MOV     A,#0x8
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ?Subroutine52 & 0xFFFF
   2506                pData += 2;
   2507          
   2508                if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
   \                     ??CrossCallReturnLabel_103:
   \   0000B9   85..82       MOV     DPL,?V10
   \   0000BC   85..83       MOV     DPH,?V11
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   6440         XRL     A,#0x40
   \   0000C2   702D         JNZ     ??CrossCallReturnLabel_104
   2509                {
   2510                  // Received transition time is in 1/10 second
   2511                  scene.transTime100ms = scene.transTime % 10;
   \   0000C4   7408         MOV     A,#0x8
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F8           MOV     R0,A
   \   0000CB   7A0A         MOV     R2,#0xa
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   12....       LCALL   ?US_DIV_MOD
   \   0000D2   740A         MOV     A,#0xa
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   2512                  scene.transTime /= 10;
   \                     ??CrossCallReturnLabel_210:
   \   0000DA   7408         MOV     A,#0x8
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   2513                }
   \                     ??CrossCallReturnLabel_220:
   \   0000E2   7A0A         MOV     R2,#0xa
   \   0000E4   7B00         MOV     R3,#0x0
   \   0000E6   12....       LCALL   ?US_DIV_MOD
   \   0000E9   7408         MOV     A,#0x8
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL   ?Subroutine52 & 0xFFFF
   2514          
   2515                nameLen= *pData++; // Name length
   \                     ??CrossCallReturnLabel_104:
   \   0000F1   85..82       MOV     DPL,?V0
   \   0000F4   85..83       MOV     DPH,?V1
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F5..         MOV     ?V2,A
   \   0000FC   E5..         MOV     A,?V0
   \   0000FE   2403         ADD     A,#0x3
   \   000100   F5..         MOV     ?V0,A
   \   000102   5002         JNC     ??zclGeneral_ProcessInScenesServer_9
   \   000104   05..         INC     ?V1
   2516          
   2517                // Retrieve Name Support attribute
   2518                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
   2519                                  ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
   \                     ??zclGeneral_ProcessInScenesServer_9:
   \   000106                ; Setup parameters for call to function zcl_ReadAttrData
   \   000106   78..         MOV     R0,#?V4
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   7402         MOV     A,#0x2
   \   00010D   12....       LCALL   ?XSTACK_DISP100_8
   \   000110   88..         MOV     ?V4,R0
   \   000112   89..         MOV     ?V5,R1
   \   000114   78..         MOV     R0,#?V4
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000119   7C04         MOV     R4,#0x4
   \   00011B   7D00         MOV     R5,#0x0
   \   00011D   7A05         MOV     R2,#0x5
   \   00011F   7B00         MOV     R3,#0x0
   \   000121   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000124   12....       LCALL   `??zcl_ReadAttrData::?relay`; Banked call to: zcl_ReadAttrData
   \   000127   7404         MOV     A,#0x4
   \   000129   12....       LCALL   ?DEALLOC_XSTACK8
   2520          
   2521                if ( nameSupport )
   \   00012C   85..82       MOV     DPL,?XSP + 0
   \   00012F   85..83       MOV     DPH,?XSP + 1
   \   000132   E0           MOVX    A,@DPTR
   \   000133   602A         JZ      ??zclGeneral_ProcessInScenesServer_10
   2522                {
   2523                  if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \   000135   E5..         MOV     A,?V2
   \   000137   C3           CLR     C
   \   000138   9410         SUBB    A,#0x10
   \   00013A   4003         JC      ??zclGeneral_ProcessInScenesServer_11
   2524                    nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   00013C   75..0F       MOV     ?V2,#0xf
   2525                  scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesServer_11:
   \   00013F   740C         MOV     A,#0xc
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   12....       LCALL   ?Subroutine44 & 0xFFFF
   2526                  zcl_memcpy( &(scene.name[1]), pData, nameLen );
   2527                }
   \                     ??CrossCallReturnLabel_81:
   \   000147   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00014A   AC..         MOV     R4,?V2
   \   00014C   7D00         MOV     R5,#0x0
   \   00014E   7410         MOV     A,#0x10
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   AA82         MOV     R2,DPL
   \   000155   AB83         MOV     R3,DPH
   \   000157   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00015A   7403         MOV     A,#0x3
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
   2528          
   2529                pData += nameLen; // move past name, use original length
   \                     ??zclGeneral_ProcessInScenesServer_10:
   \   00015F   A8..         MOV     R0,?V2
   \   000161   E5..         MOV     A,?V0
   \   000163   28           ADD     A,R0
   \   000164   F5..         MOV     ?V0,A
   \   000166   E4           CLR     A
   \   000167   35..         ADDC    A,?V1
   \   000169   F5..         MOV     ?V1,A
   2530          
   2531                scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
   \   00016B   85..82       MOV     DPL,?V8
   \   00016E   85..83       MOV     DPH,?V9
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F8           MOV     R0,A
   \   000173   A9..         MOV     R1,?V0
   \   000175   8E82         MOV     DPL,R6
   \   000177   8F83         MOV     DPH,R7
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \   000184   C3           CLR     C
   \   000185   99           SUBB    A,R1
   \   000186   28           ADD     A,R0
   \   000187   F8           MOV     R0,A
   \   000188   741C         MOV     A,#0x1c
   \   00018A   12....       LCALL   ?XSTACK_DISP0_8
   \   00018D   E8           MOV     A,R0
   \   00018E   F0           MOVX    @DPTR,A
   2532                if ( scene.extLen > 0 )
   \   00018F   602A         JZ      ??zclGeneral_ProcessInScenesServer_12
   2533                {
   2534                  // Copy the extention field(s)
   2535                  if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
   \   000191   C3           CLR     C
   \   000192   9420         SUBB    A,#0x20
   \   000194   4003         JC      ??zclGeneral_ProcessInScenesServer_13
   2536                  {
   2537                    scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
   \   000196   741F         MOV     A,#0x1f
   \   000198   F0           MOVX    @DPTR,A
   2538                  }
   2539                  zcl_memcpy( scene.extField, pData, scene.extLen );
   \                     ??zclGeneral_ProcessInScenesServer_13:
   \   000199                ; Setup parameters for call to function osal_memcpy
   \   000199   75..00       MOV     ?V2,#0x0
   \   00019C   78..         MOV     R0,#?V0
   \   00019E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A1   741F         MOV     A,#0x1f
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   FC           MOV     R4,A
   \   0001A8   7D00         MOV     R5,#0x0
   \   0001AA   7420         MOV     A,#0x20
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   AA82         MOV     R2,DPL
   \   0001B1   AB83         MOV     R3,DPH
   \   0001B3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B6   7403         MOV     A,#0x3
   \   0001B8   12....       LCALL   ?DEALLOC_XSTACK8
   2540                }
   2541          
   2542                if ( scene.groupID == 0x0000 ||
   2543                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_12:
   \   0001BB   7405         MOV     A,#0x5
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   0001C3   6015         JZ      ??zclGeneral_ProcessInScenesServer_14
   \   0001C5                ; Setup parameters for call to function aps_FindGroup
   \   0001C5   7405         MOV     A,#0x5
   \   0001C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001CD   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0001D0   8B..         MOV     ?V1,R3
   \   0001D2   EA           MOV     A,R2
   \   0001D3   45..         ORL     A,?V1
   \   0001D5   7003         JNZ     $+5
   \   0001D7   02....       LJMP    ??zclGeneral_ProcessInScenesServer_15 & 0xFFFF
   2544                {
   2545                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2546                  // does and the corresponding Group exits
   2547                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_14:
   \   0001DA                ; Setup parameters for call to function zclGeneral_FindScene
   \   0001DA   7407         MOV     A,#0x7
   \   0001DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   FC           MOV     R4,A
   \   0001E1   7405         MOV     A,#0x5
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001E9   12....       LCALL   `??zclGeneral_FindScene::?relay`; Banked call to: zclGeneral_FindScene
   \   0001EC   8A..         MOV     ?V2,R2
   \   0001EE   8B..         MOV     ?V3,R3
   2548                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \   0001F0   EA           MOV     A,R2
   \   0001F1   45..         ORL     A,?V3
   \   0001F3   700C         JNZ     ??zclGeneral_ProcessInScenesServer_16
   \   0001F5                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   0001F5   12....       LCALL   `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   0001F8   E9           MOV     A,R1
   \   0001F9   C3           CLR     C
   \   0001FA   9410         SUBB    A,#0x10
   \   0001FC   4003         JC      $+5
   \   0001FE   02....       LJMP    ??zclGeneral_ProcessInScenesServer_17 & 0xFFFF
   2549                  {
   2550                    status = ZCL_STATUS_SUCCESS;
   \                     ??zclGeneral_ProcessInScenesServer_16:
   \   000201   75..00       MOV     ?V0,#0x0
   2551                    if ( pScene != NULL )
   \   000204   E5..         MOV     A,?V2
   \   000206   45..         ORL     A,?V3
   \   000208   7003         JNZ     $+5
   \   00020A   02....       LJMP    ??zclGeneral_ProcessInScenesServer_18 & 0xFFFF
   2552                    {
   2553                      // The Scene already exists so update it
   2554                      pScene->transTime = scene.transTime;
   \   00020D   7408         MOV     A,#0x8
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000215   85..82       MOV     DPL,?V2
   \   000218   85..83       MOV     DPH,?V3
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   12....       LCALL   ?Subroutine52 & 0xFFFF
   2555                      zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
   \                     ??CrossCallReturnLabel_105:
   \   000221                ; Setup parameters for call to function osal_memcpy
   \   000221   740C         MOV     A,#0xc
   \   000223   12....       LCALL   ?XSTACK_DISP0_8
   \   000226   A982         MOV     R1,DPL
   \   000228   AA83         MOV     R2,DPH
   \   00022A   89..         MOV     ?V4,R1
   \   00022C   8A..         MOV     ?V5,R2
   \   00022E   75..00       MOV     ?V6,#0x0
   \   000231   78..         MOV     R0,#?V4
   \   000233   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000236   7C10         MOV     R4,#0x10
   \   000238   7D00         MOV     R5,#0x0
   \   00023A   E5..         MOV     A,?V2
   \   00023C   2407         ADD     A,#0x7
   \   00023E   FA           MOV     R2,A
   \   00023F   E4           CLR     A
   \   000240   35..         ADDC    A,?V3
   \   000242   FB           MOV     R3,A
   \   000243   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000246   7403         MOV     A,#0x3
   \   000248   12....       LCALL   ?DEALLOC_XSTACK8
   2556          
   2557                      // Use the new extention field(s)
   2558                      zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
   \   00024B                ; Setup parameters for call to function osal_memcpy
   \   00024B   741D         MOV     A,#0x1d
   \   00024D   12....       LCALL   ?XSTACK_DISP0_8
   \   000250   A982         MOV     R1,DPL
   \   000252   AA83         MOV     R2,DPH
   \   000254   89..         MOV     ?V4,R1
   \   000256   8A..         MOV     ?V5,R2
   \   000258   78..         MOV     R0,#?V4
   \   00025A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00025D   741F         MOV     A,#0x1f
   \   00025F   12....       LCALL   ?XSTACK_DISP0_8
   \   000262   E0           MOVX    A,@DPTR
   \   000263   FC           MOV     R4,A
   \   000264   7D00         MOV     R5,#0x0
   \   000266   E5..         MOV     A,?V2
   \   000268   2418         ADD     A,#0x18
   \   00026A   FA           MOV     R2,A
   \   00026B   E4           CLR     A
   \   00026C   35..         ADDC    A,?V3
   \   00026E   FB           MOV     R3,A
   \   00026F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000272   7403         MOV     A,#0x3
   \   000274   12....       LCALL   ?DEALLOC_XSTACK8
   2559                      pScene->extLen = scene.extLen;
   \   000277   741C         MOV     A,#0x1c
   \   000279   12....       LCALL   ?XSTACK_DISP0_8
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   C0E0         PUSH    A
   \   00027F   E5..         MOV     A,?V2
   \   000281   2417         ADD     A,#0x17
   \   000283   F582         MOV     DPL,A
   \   000285   E4           CLR     A
   \   000286   35..         ADDC    A,?V3
   \   000288   F583         MOV     DPH,A
   \   00028A   D0E0         POP     A
   \   00028C   F0           MOVX    @DPTR,A
   2560          
   2561                      // Save Scenes
   2562                      zclGeneral_ScenesSave();
   \   00028D                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   00028D   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2563                    }
   \   000290   8015         SJMP    ??zclGeneral_ProcessInScenesServer_19
   2564                    else
   2565                    {
   2566                      // The Scene doesn't exist so add it
   2567                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \                     ??zclGeneral_ProcessInScenesServer_18:
   \   000292                ; Setup parameters for call to function zclGeneral_AddScene
   \   000292   7405         MOV     A,#0x5
   \   000294   12....       LCALL   ?XSTACK_DISP101_8
   \   000297   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   2568                    }
   2569                  }
   \                     ??CrossCallReturnLabel_241:
   \   00029A   12....       LCALL   `??zclGeneral_AddScene::?relay`; Banked call to: zclGeneral_AddScene
   \   00029D   8008         SJMP    ??zclGeneral_ProcessInScenesServer_19
   2570                  else
   2571                  {
   2572                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_17:
   \   00029F   75..89       MOV     ?V0,#-0x77
   \   0002A2   8003         SJMP    ??zclGeneral_ProcessInScenesServer_19
   2573                  }
   2574                }
   2575                else
   2576                {
   2577                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_15:
   \   0002A4   75..85       MOV     ?V0,#-0x7b
   2578                }
   2579          
   2580                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_19:
   \   0002A7   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002AA   6003         JZ      $+5
   \   0002AC   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   0002AF   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0002B2   6003         JZ      $+5
   \   0002B4   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2581                {
   2582                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
   \   0002B7   85..82       MOV     DPL,?V10
   \   0002BA   85..83       MOV     DPH,?V11
   \   0002BD   E0           MOVX    A,@DPTR
   \   0002BE   6003         JZ      $+5
   \   0002C0   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2583                  {
   2584                    zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2585                                                    status, scene.groupID, scene.ID,
   2586                                                    true, pInMsg->hdr.transSeqNum );
   \   0002C3                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   0002C3   12....       LCALL   ?Subroutine14 & 0xFFFF
   2587                  }
   2588          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2589                  else // COMMAND_SCENE_ENHANCED_ADD
   2590                  {
   2591                    zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2592                                                            status, scene.groupID, scene.ID,
   2593                                                            true, pInMsg->hdr.transSeqNum );
   2594                  }
   2595          #endif // ZCL_LIGHT_LINK_ENHANCE
   2596                }
   \                     ??CrossCallReturnLabel_159:
   \   0002C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002C9   75..01       MOV     ?V1,#0x1
   \   0002CC   78..         MOV     R0,#?V1
   \   0002CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002D1   7409         MOV     A,#0x9
   \   0002D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D6   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   0002D9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002DC   7408         MOV     A,#0x8
   \   0002DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0002E4   AD..         MOV     R5,?V0
   \   0002E6   7C00         MOV     R4,#0x0
   \   0002E8   02....       LJMP    ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2597                stat = ZCL_STATUS_CMD_HAS_RSP;
   2598          
   2599                break;
   2600          
   2601              case COMMAND_SCENE_VIEW:
   2602          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2603              case COMMAND_SCENE_ENHANCED_VIEW:
   2604          #endif // ZCL_LIGHT_LINK_ENHANCE
   2605                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_2:
   \   0002EB                ; Setup parameters for call to function zclGeneral_FindScene
   \   0002EB   7405         MOV     A,#0x5
   \   0002ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F0   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0002F3   12....       LCALL   `??zclGeneral_FindScene::?relay`; Banked call to: zclGeneral_FindScene
   \   0002F6   8A..         MOV     ?V2,R2
   \   0002F8   8B..         MOV     ?V3,R3
   2606                if ( pScene != NULL )
   \   0002FA   EA           MOV     A,R2
   \   0002FB   45..         ORL     A,?V3
   \   0002FD   6005         JZ      ??zclGeneral_ProcessInScenesServer_22
   2607                {
   2608                  status = ZCL_STATUS_SUCCESS;
   \   0002FF   75..00       MOV     ?V0,#0x0
   \   000302   802D         SJMP    ??zclGeneral_ProcessInScenesServer_23
   2609                }
   2610                else
   2611                {
   2612                  // Scene not found
   2613                  if ( scene.groupID != 0x0000 &&
   2614                       aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_22:
   \   000304   7405         MOV     A,#0x5
   \   000306   12....       LCALL   ?XSTACK_DISP0_8
   \   000309   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00030C   6017         JZ      ??zclGeneral_ProcessInScenesServer_24
   \   00030E                ; Setup parameters for call to function aps_FindGroup
   \   00030E   7405         MOV     A,#0x5
   \   000310   12....       LCALL   ?XSTACK_DISP0_8
   \   000313   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000316   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000319   8B..         MOV     ?V1,R3
   \   00031B   EA           MOV     A,R2
   \   00031C   45..         ORL     A,?V1
   \   00031E   7005         JNZ     ??zclGeneral_ProcessInScenesServer_24
   2615                  {
   2616                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \   000320   75..85       MOV     ?V0,#-0x7b
   \   000323   8003         SJMP    ??zclGeneral_ProcessInScenesServer_25
   2617                  }
   2618                  else
   2619                  {
   2620                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_24:
   \   000325   75..8B       MOV     ?V0,#-0x75
   2621                  }
   2622                  pScene = &scene;
   \                     ??zclGeneral_ProcessInScenesServer_25:
   \   000328   7405         MOV     A,#0x5
   \   00032A   12....       LCALL   ?XSTACK_DISP100_8
   \   00032D   88..         MOV     ?V2,R0
   \   00032F   89..         MOV     ?V3,R1
   2623                }
   2624          
   2625                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_23:
   \   000331   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000334   6003         JZ      $+5
   \   000336   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   000339   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00033C   6003         JZ      $+5
   \   00033E   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2626                {
   2627                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
   \   000341   85..82       MOV     DPL,?V10
   \   000344   85..83       MOV     DPH,?V11
   \   000347   E0           MOVX    A,@DPTR
   \   000348   6401         XRL     A,#0x1
   \   00034A   6003         JZ      $+5
   \   00034C   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2628                  {
   2629                    zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2630                                                     status, pScene, true, pInMsg->hdr.transSeqNum );
   \   00034F                ; Setup parameters for call to function zclGeneral_SendSceneViewRsp
   \   00034F   12....       LCALL   ?Subroutine14 & 0xFFFF
   2631                  }
   2632          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2633                  else
   2634                  {
   2635                    zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2636                                                             status, pScene, true, pInMsg->hdr.transSeqNum );
   2637                  }
   2638          #endif // ZCL_LIGHT_LINK_ENHANCE
   2639                }
   \                     ??CrossCallReturnLabel_160:
   \   000352   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000355   75..01       MOV     ?V1,#0x1
   \   000358   78..         MOV     R0,#?V1
   \   00035A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00035D   78..         MOV     R0,#?V2
   \   00035F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000362   AD..         MOV     R5,?V0
   \   000364   7C01         MOV     R4,#0x1
   \   000366   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000369   12....       LCALL   `??zclGeneral_SendSceneViewRsp::?relay`; Banked call to: zclGeneral_SendSceneViewRsp
   \   00036C   7404         MOV     A,#0x4
   \   00036E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000371   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2640                stat = ZCL_STATUS_CMD_HAS_RSP;
   2641                break;
   2642          
   2643              case COMMAND_SCENE_REMOVE:
   2644                if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
   \                     ??zclGeneral_ProcessInScenesServer_3:
   \   000374                ; Setup parameters for call to function zclGeneral_RemoveScene
   \   000374   7405         MOV     A,#0x5
   \   000376   12....       LCALL   ?XSTACK_DISP0_8
   \   000379   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00037C   12....       LCALL   `??zclGeneral_RemoveScene::?relay`; Banked call to: zclGeneral_RemoveScene
   \   00037F   E9           MOV     A,R1
   \   000380   6005         JZ      ??zclGeneral_ProcessInScenesServer_26
   2645                {
   2646                  status = ZCL_STATUS_SUCCESS;
   \   000382   75..00       MOV     ?V0,#0x0
   \   000385   801A         SJMP    ??zclGeneral_ProcessInScenesServer_27
   2647                }
   2648                else
   2649                {
   2650                  // Scene not found
   2651                  if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_26:
   \   000387                ; Setup parameters for call to function aps_FindGroup
   \   000387   7405         MOV     A,#0x5
   \   000389   12....       LCALL   ?XSTACK_DISP0_8
   \   00038C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00038F   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000392   8B..         MOV     ?V1,R3
   \   000394   EA           MOV     A,R2
   \   000395   45..         ORL     A,?V1
   \   000397   7005         JNZ     ??zclGeneral_ProcessInScenesServer_28
   2652                  {
   2653                    // The Group is not in the Group Table
   2654                    status = ZCL_STATUS_INVALID_FIELD;
   \   000399   75..85       MOV     ?V0,#-0x7b
   \   00039C   8003         SJMP    ??zclGeneral_ProcessInScenesServer_27
   2655                  }
   2656                  else
   2657                  {
   2658                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_28:
   \   00039E   75..8B       MOV     ?V0,#-0x75
   2659                  }
   2660                }
   2661          
   2662                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_27:
   \   0003A1   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0003A4   6003         JZ      $+5
   \   0003A6   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   0003A9   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0003AC   6003         JZ      $+5
   \   0003AE   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2663                {
   2664                  // Addressed to this device (not to a group) - send a response back
   2665                  zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2666                                                      status, scene.groupID,
   2667                                                      scene.ID, true, pInMsg->hdr.transSeqNum );
   \   0003B1                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   0003B1   12....       LCALL   ?Subroutine14 & 0xFFFF
   2668                }
   \                     ??CrossCallReturnLabel_161:
   \   0003B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003B7   75..01       MOV     ?V1,#0x1
   \   0003BA   78..         MOV     R0,#?V1
   \   0003BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003BF   7409         MOV     A,#0x9
   \   0003C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C4   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   0003C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003CA   7408         MOV     A,#0x8
   \   0003CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CF   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003D2   AD..         MOV     R5,?V0
   \   0003D4   7C02         MOV     R4,#0x2
   \   0003D6   02....       LJMP    ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2669                stat = ZCL_STATUS_CMD_HAS_RSP;
   2670                break;
   2671          
   2672              case COMMAND_SCENE_REMOVE_ALL:
   2673                if ( scene.groupID == 0x0000 ||
   2674                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_4:
   \   0003D9   7405         MOV     A,#0x5
   \   0003DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DE   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0003E1   6012         JZ      ??zclGeneral_ProcessInScenesServer_29
   \   0003E3                ; Setup parameters for call to function aps_FindGroup
   \   0003E3   7405         MOV     A,#0x5
   \   0003E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E8   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0003EB   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0003EE   8B..         MOV     ?V1,R3
   \   0003F0   EA           MOV     A,R2
   \   0003F1   45..         ORL     A,?V1
   \   0003F3   6010         JZ      ??zclGeneral_ProcessInScenesServer_30
   2675                {
   2676                  zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
   \                     ??zclGeneral_ProcessInScenesServer_29:
   \   0003F5                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   0003F5   7405         MOV     A,#0x5
   \   0003F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0003FD   12....       LCALL   `??zclGeneral_RemoveAllScenes::?relay`; Banked call to: zclGeneral_RemoveAllScenes
   2677                  status = ZCL_STATUS_SUCCESS;
   \   000400   75..00       MOV     ?V0,#0x0
   \   000403   8003         SJMP    ??zclGeneral_ProcessInScenesServer_31
   2678                }
   2679                else
   2680                {
   2681                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_30:
   \   000405   75..85       MOV     ?V0,#-0x7b
   2682                }
   2683          
   2684                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_31:
   \   000408   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00040B   6003         JZ      $+5
   \   00040D   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   000410   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000413   6003         JZ      $+5
   \   000415   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2685                {
   2686                  // Addressed to this device (not to a group) - send a response back
   2687                  zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2688                                                         status, scene.groupID, true, pInMsg->hdr.transSeqNum );
   \   000418                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   000418   12....       LCALL   ?Subroutine14 & 0xFFFF
   2689                }
   \                     ??CrossCallReturnLabel_162:
   \   00041B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00041E   75..01       MOV     ?V1,#0x1
   \   000421   78..         MOV     R0,#?V1
   \   000423   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000426   75..00       MOV     ?V1,#0x0
   \   000429   78..         MOV     R0,#?V1
   \   00042B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00042E   7408         MOV     A,#0x8
   \   000430   12....       LCALL   ?XSTACK_DISP0_8
   \   000433   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000436   AD..         MOV     R5,?V0
   \   000438   7C03         MOV     R4,#0x3
   \   00043A   02....       LJMP    ??zclGeneral_ProcessInScenesServer_21 & 0xFFFF
   2690                stat = ZCL_STATUS_CMD_HAS_RSP;
   2691                break;
   2692          
   2693              case COMMAND_SCENE_STORE:
   2694                if ( scene.groupID == 0x0000 ||
   2695                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_5:
   \   00043D   7405         MOV     A,#0x5
   \   00043F   12....       LCALL   ?XSTACK_DISP0_8
   \   000442   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000445   6015         JZ      ??zclGeneral_ProcessInScenesServer_32
   \   000447                ; Setup parameters for call to function aps_FindGroup
   \   000447   7405         MOV     A,#0x5
   \   000449   12....       LCALL   ?XSTACK_DISP0_8
   \   00044C   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00044F   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000452   8B..         MOV     ?V1,R3
   \   000454   EA           MOV     A,R2
   \   000455   45..         ORL     A,?V1
   \   000457   7003         JNZ     $+5
   \   000459   02....       LJMP    ??zclGeneral_ProcessInScenesServer_33 & 0xFFFF
   2696                {
   2697                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2698                  // does and the corresponding Group exits
   2699                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_32:
   \   00045C                ; Setup parameters for call to function zclGeneral_FindScene
   \   00045C   7407         MOV     A,#0x7
   \   00045E   12....       LCALL   ?XSTACK_DISP0_8
   \   000461   E0           MOVX    A,@DPTR
   \   000462   FC           MOV     R4,A
   \   000463   7405         MOV     A,#0x5
   \   000465   12....       LCALL   ?XSTACK_DISP0_8
   \   000468   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00046B   12....       LCALL   `??zclGeneral_FindScene::?relay`; Banked call to: zclGeneral_FindScene
   \   00046E   8A..         MOV     ?V2,R2
   \   000470   8B..         MOV     ?V3,R3
   2700                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \   000472   EA           MOV     A,R2
   \   000473   45..         ORL     A,?V3
   \   000475   7009         JNZ     ??zclGeneral_ProcessInScenesServer_34
   \   000477                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000477   12....       LCALL   `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   00047A   E9           MOV     A,R1
   \   00047B   C3           CLR     C
   \   00047C   9410         SUBB    A,#0x10
   \   00047E   5079         JNC     ??zclGeneral_ProcessInScenesServer_35
   2701                  {
   2702                    uint8 sceneChanged = FALSE;
   \                     ??zclGeneral_ProcessInScenesServer_34:
   \   000480   75..00       MOV     ?V1,#0x0
   2703          
   2704                    status = ZCL_STATUS_SUCCESS;
   \   000483   75..00       MOV     ?V0,#0x0
   2705                    if ( pScene == NULL )
   \   000486   E5..         MOV     A,?V2
   \   000488   45..         ORL     A,?V3
   \   00048A   7009         JNZ     ??zclGeneral_ProcessInScenesServer_36
   2706                    {
   2707                      // Haven't been added yet
   2708                      pScene = &scene;
   \   00048C   7405         MOV     A,#0x5
   \   00048E   12....       LCALL   ?XSTACK_DISP100_8
   \   000491   88..         MOV     ?V2,R0
   \   000493   89..         MOV     ?V3,R1
   2709                    }
   2710          
   2711                    if ( pCBs->pfnSceneStoreReq )
   \                     ??zclGeneral_ProcessInScenesServer_36:
   \   000495   E5..         MOV     A,?V6
   \   000497   2412         ADD     A,#0x12
   \   000499   F582         MOV     DPL,A
   \   00049B   E4           CLR     A
   \   00049C   35..         ADDC    A,?V7
   \   00049E   F583         MOV     DPH,A
   \   0004A0   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0004A3   6027         JZ      ??zclGeneral_ProcessInScenesServer_37
   2712                    {
   2713                      zclSceneReq_t req;
   2714          
   2715                      req.srcAddr = &(pInMsg->msg->srcAddr);
   \   0004A5   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0004A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0004AB   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   2716                      req.scene = pScene;
   \                     ??CrossCallReturnLabel_211:
   \   0004AE   7403         MOV     A,#0x3
   \   0004B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0004B3   E5..         MOV     A,?V2
   \   0004B5   F0           MOVX    @DPTR,A
   \   0004B6   A3           INC     DPTR
   \   0004B7   E5..         MOV     A,?V3
   \   0004B9   F0           MOVX    @DPTR,A
   2717          
   2718                      // Get the latest Scene info
   2719                      if ( pCBs->pfnSceneStoreReq( &req ) )
   \   0004BA                ; Setup parameters for indirect call
   \   0004BA   7401         MOV     A,#0x1
   \   0004BC   12....       LCALL   ?XSTACK_DISP101_8
   \   0004BF   8882         MOV     DPL,R0
   \   0004C1   8983         MOV     DPH,R1
   \   0004C3   12....       LCALL   ?CALL_IND
   \   0004C6   E9           MOV     A,R1
   \   0004C7   6003         JZ      ??zclGeneral_ProcessInScenesServer_37
   2720                      {
   2721                        sceneChanged = TRUE;
   \   0004C9   75..01       MOV     ?V1,#0x1
   2722                      }
   2723                    }
   2724          
   2725                    if ( pScene == &scene )
   \                     ??zclGeneral_ProcessInScenesServer_37:
   \   0004CC   7405         MOV     A,#0x5
   \   0004CE   12....       LCALL   ?XSTACK_DISP100_8
   \   0004D1   88..         MOV     ?V4,R0
   \   0004D3   89..         MOV     ?V5,R1
   \   0004D5   E5..         MOV     A,?V2
   \   0004D7   65..         XRL     A,?V4
   \   0004D9   7004         JNZ     ??zclGeneral_ProcessInScenesServer_38
   \   0004DB   E5..         MOV     A,?V3
   \   0004DD   65..         XRL     A,?V5
   \                     ??zclGeneral_ProcessInScenesServer_38:
   \   0004DF   700D         JNZ     ??zclGeneral_ProcessInScenesServer_39
   2726                    {
   2727                      // The Scene doesn't exist so add it
   2728                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \   0004E1                ; Setup parameters for call to function zclGeneral_AddScene
   \   0004E1   7405         MOV     A,#0x5
   \   0004E3   12....       LCALL   ?XSTACK_DISP101_8
   \   0004E6   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   2729                    }
   \                     ??CrossCallReturnLabel_242:
   \   0004E9   12....       LCALL   `??zclGeneral_AddScene::?relay`; Banked call to: zclGeneral_AddScene
   \   0004EC   8013         SJMP    ??zclGeneral_ProcessInScenesServer_40
   2730                    else if ( sceneChanged )
   \                     ??zclGeneral_ProcessInScenesServer_39:
   \   0004EE   E5..         MOV     A,?V1
   \   0004F0   A2E0         MOV     C,0xE0 /* A   */.0
   \   0004F2   500D         JNC     ??zclGeneral_ProcessInScenesServer_40
   2731                    {
   2732                      // The Scene already exists so update only NV
   2733                      zclGeneral_ScenesSave();
   \   0004F4                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   0004F4   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   2734                    }
   2735                  }
   \   0004F7   8008         SJMP    ??zclGeneral_ProcessInScenesServer_40
   2736                  else
   2737                  {
   2738                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_35:
   \   0004F9   75..89       MOV     ?V0,#-0x77
   \   0004FC   8003         SJMP    ??zclGeneral_ProcessInScenesServer_40
   2739                  }
   2740                }
   2741                else
   2742                {
   2743                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_33:
   \   0004FE   75..85       MOV     ?V0,#-0x7b
   2744                }
   2745          
   2746                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_40:
   \   000501   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000504   6003         JZ      $+5
   \   000506   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   \   000509   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   00050C   6003         JZ      $+5
   \   00050E   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2747                {
   2748                  // Addressed to this device (not to a group) - send a response back
   2749                  zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2750                                                     status, scene.groupID, scene.ID,
   2751                                                     true, pInMsg->hdr.transSeqNum );
   \   000511                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   000511   12....       LCALL   ?Subroutine14 & 0xFFFF
   2752                }
   \                     ??CrossCallReturnLabel_163:
   \   000514   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000517   75..01       MOV     ?V1,#0x1
   \   00051A   78..         MOV     R0,#?V1
   \   00051C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00051F   7409         MOV     A,#0x9
   \   000521   12....       LCALL   ?XSTACK_DISP0_8
   \   000524   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000527   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00052A   7408         MOV     A,#0x8
   \   00052C   12....       LCALL   ?XSTACK_DISP0_8
   \   00052F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000532   AD..         MOV     R5,?V0
   \   000534   7C04         MOV     R4,#0x4
   \                     ??zclGeneral_ProcessInScenesServer_21:
   \   000536   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000539   12....       LCALL   `??zclGeneral_SendSceneResponse::?relay`; Banked call to: zclGeneral_SendSceneResponse
   \   00053C   7405         MOV     A,#0x5
   \   00053E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000541   02....       LJMP    ??zclGeneral_ProcessInScenesServer_20 & 0xFFFF
   2753                stat = ZCL_STATUS_CMD_HAS_RSP;
   2754                break;
   2755          
   2756              case COMMAND_SCENE_RECALL:
   2757                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_6:
   \   000544                ; Setup parameters for call to function zclGeneral_FindScene
   \   000544   7405         MOV     A,#0x5
   \   000546   12....       LCALL   ?XSTACK_DISP0_8
   \   000549   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00054C   12....       LCALL   `??zclGeneral_FindScene::?relay`; Banked call to: zclGeneral_FindScene
   \   00054F   8A..         MOV     ?V2,R2
   \   000551   8B..         MOV     ?V3,R3
   2758                if ( pScene && pCBs->pfnSceneRecallReq )
   \   000553   EA           MOV     A,R2
   \   000554   45..         ORL     A,?V3
   \   000556   7003         JNZ     $+5
   \   000558   02....       LJMP    ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   \   00055B   E5..         MOV     A,?V6
   \   00055D   2414         ADD     A,#0x14
   \   00055F   F582         MOV     DPL,A
   \   000561   E4           CLR     A
   \   000562   35..         ADDC    A,?V7
   \   000564   F583         MOV     DPH,A
   \   000566   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000569   7003         JNZ     $+5
   \   00056B   02....       LJMP    ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   2759                {
   2760                  zclSceneReq_t req;
   2761          
   2762                  req.srcAddr = &(pInMsg->msg->srcAddr);
   \   00056E   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000571   12....       LCALL   ?XSTACK_DISP0_8
   \   000574   12....       LCALL   ??Subroutine86_0 & 0xFFFF
   2763                  req.scene = pScene;
   \                     ??CrossCallReturnLabel_212:
   \   000577   7403         MOV     A,#0x3
   \   000579   12....       LCALL   ?XSTACK_DISP0_8
   \   00057C   E5..         MOV     A,?V2
   \   00057E   F0           MOVX    @DPTR,A
   \   00057F   A3           INC     DPTR
   \   000580   E5..         MOV     A,?V3
   \   000582   F0           MOVX    @DPTR,A
   2764          
   2765                  pCBs->pfnSceneRecallReq( &req );
   \   000583                ; Setup parameters for indirect call
   \   000583   7401         MOV     A,#0x1
   \   000585   12....       LCALL   ?XSTACK_DISP101_8
   \   000588   8882         MOV     DPL,R0
   \   00058A   8983         MOV     DPH,R1
   \   00058C   12....       LCALL   ?CALL_IND
   \   00058F   02....       LJMP    ??zclGeneral_ProcessInScenesServer_41 & 0xFFFF
   2766                }
   2767                // No response
   2768                break;
   2769          
   2770              case COMMAND_SCENE_GET_MEMBERSHIP:
   2771                // Find all the Scenes corresponding to the Group ID
   2772                if ( scene.groupID == 0x0000 ||
   2773                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_7:
   \   000592   7405         MOV     A,#0x5
   \   000594   12....       LCALL   ?XSTACK_DISP0_8
   \   000597   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00059A   6012         JZ      ??zclGeneral_ProcessInScenesServer_42
   \   00059C                ; Setup parameters for call to function aps_FindGroup
   \   00059C   7405         MOV     A,#0x5
   \   00059E   12....       LCALL   ?XSTACK_DISP0_8
   \   0005A1   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0005A4   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   0005A7   8B..         MOV     ?V1,R3
   \   0005A9   EA           MOV     A,R2
   \   0005AA   45..         ORL     A,?V1
   \   0005AC   6047         JZ      ??zclGeneral_ProcessInScenesServer_43
   2774                {
   2775                  // Allocate space for the scene list
   2776                  sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
   \                     ??zclGeneral_ProcessInScenesServer_42:
   \   0005AE                ; Setup parameters for call to function osal_mem_alloc
   \   0005AE   7A10         MOV     R2,#0x10
   \   0005B0   7B00         MOV     R3,#0x0
   \   0005B2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0005B5   8A..         MOV     ?V2,R2
   \   0005B7   8B..         MOV     ?V3,R3
   2777                  if ( sceneList != NULL )
   \   0005B9   EA           MOV     A,R2
   \   0005BA   45..         ORL     A,?V3
   \   0005BC   6032         JZ      ??zclGeneral_ProcessInScenesServer_44
   2778                  {
   2779                    sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2780                                                                 scene.groupID, sceneList );
   \   0005BE                ; Setup parameters for call to function zclGeneral_FindAllScenesForGroup
   \   0005BE   AC..         MOV     R4,?V2
   \   0005C0   AD..         MOV     R5,?V3
   \   0005C2   7405         MOV     A,#0x5
   \   0005C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0005C7   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0005CA   12....       LCALL   `??zclGeneral_FindAllScenesForGroup::?relay`; Banked call to: zclGeneral_FindAllScenesForGroup
   \   0005CD   E9           MOV     A,R1
   \   0005CE   F5..         MOV     ?V5,A
   2781                    status = ZCL_STATUS_SUCCESS;
   \   0005D0   75..00       MOV     ?V0,#0x0
   2782                    if ( ! UNICAST_MSG( pInMsg->msg ) )
   \   0005D3   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   0005D6   2415         ADD     A,#0x15
   \   0005D8   F582         MOV     DPL,A
   \   0005DA   E4           CLR     A
   \   0005DB   39           ADDC    A,R1
   \   0005DC   F583         MOV     DPH,A
   \   0005DE   E0           MOVX    A,@DPTR
   \   0005DF   7009         JNZ     ??zclGeneral_ProcessInScenesServer_45
   \   0005E1   8882         MOV     DPL,R0
   \   0005E3   8983         MOV     DPH,R1
   \   0005E5   12....       LCALL   ??Subroutine82_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0005E8   600E         JZ      ??zclGeneral_ProcessInScenesServer_46
   2783                    {
   2784                      // Addressed to the Group - ONLY send a response if an entry within the
   2785                      // Scene Table corresponds to the Group ID
   2786                      if ( sceneCnt == 0 )
   \                     ??zclGeneral_ProcessInScenesServer_45:
   \   0005EA   E5..         MOV     A,?V5
   \   0005EC   700A         JNZ     ??zclGeneral_ProcessInScenesServer_46
   \   0005EE   8050         SJMP    ??zclGeneral_ProcessInScenesServer_47
   2787                      {
   2788                        sendRsp = FALSE;
   2789                      }
   2790                    }
   2791                  }
   2792                  else
   2793                  {
   2794                    // Couldn't allocate space for the scene list!
   2795                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInScenesServer_44:
   \   0005F0   75..89       MOV     ?V0,#-0x77
   \   0005F3   8003         SJMP    ??zclGeneral_ProcessInScenesServer_46
   2796                  }
   2797                }
   2798                else
   2799                {
   2800                  // The Group is not in the Group Table - send a response back
   2801                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_43:
   \   0005F5   75..85       MOV     ?V0,#-0x7b
   2802                }
   2803          
   2804          #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
   2805                if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
   2806          #else
   2807                if ( sendRsp )
   2808          #endif //ZCL_LIGHT_LINK_ENHANCE
   2809                {
   2810                  zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2811                                              status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
   2812                                              scene.groupID, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInScenesServer_46:
   \   0005F8                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   0005F8   12....       LCALL   `??zclGeneral_CountAllScenes::?relay`; Banked call to: zclGeneral_CountAllScenes
   \   0005FB   E9           MOV     A,R1
   \   0005FC   F9           MOV     R1,A
   \   0005FD   8E82         MOV     DPL,R6
   \   0005FF   8F83         MOV     DPH,R7
   \   000601   12....       LCALL   ??Subroutine88_0 & 0xFFFF
   2813                }
   \                     ??CrossCallReturnLabel_227:
   \   000604                ; Setup parameters for call to function zclGeneral_SendSceneGetMembershipResponse
   \   000604   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000607   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00060A   75..01       MOV     ?V1,#0x1
   \   00060D   78..         MOV     R0,#?V1
   \   00060F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000612   7407         MOV     A,#0x7
   \   000614   12....       LCALL   ?XSTACK_DISP0_8
   \   000617   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00061A   78..         MOV     R0,#?V2
   \   00061C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00061F   E5..         MOV     A,?V5
   \   000621   F5..         MOV     ?V1,A
   \   000623   78..         MOV     R0,#?V1
   \   000625   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000628   7410         MOV     A,#0x10
   \   00062A   C3           CLR     C
   \   00062B   99           SUBB    A,R1
   \   00062C   FD           MOV     R5,A
   \   00062D   AC..         MOV     R4,?V0
   \   00062F   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000632   12....       LCALL   `??zclGeneral_SendSceneGetMembershipResponse::?r`; Banked call to: zclGeneral_SendSceneGetMembershipResponse
   \   000635   7407         MOV     A,#0x7
   \   000637   12....       LCALL   ?DEALLOC_XSTACK8
   2814          
   2815                if ( sceneList != NULL )
   \   00063A   E5..         MOV     A,?V2
   \   00063C   45..         ORL     A,?V3
   \   00063E   6007         JZ      ??zclGeneral_ProcessInScenesServer_20
   2816                  zcl_mem_free( sceneList );
   \                     ??zclGeneral_ProcessInScenesServer_47:
   \   000640                ; Setup parameters for call to function osal_mem_free
   \   000640   AA..         MOV     R2,?V2
   \   000642   AB..         MOV     R3,?V3
   \   000644   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2817          
   2818                stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInScenesServer_20:
   \   000647   75..FF       MOV     ?V4,#-0x1
   2819                break;
   \   00064A   8003         SJMP    ??zclGeneral_ProcessInScenesServer_41
   2820          
   2821          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2822              case COMMAND_SCENE_COPY:
   2823                {
   2824                  uint8 mode;
   2825                  uint16 groupIDFrom, groupIDTo;
   2826                  uint8 sceneIDFrom, sceneIDTo;
   2827          
   2828                  pData = pInMsg->pData; // different payload format
   2829          
   2830                  mode = *pData++;
   2831                  groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
   2832                  pData += 2;
   2833                  sceneIDFrom = *pData++; // from scene ID
   2834                  groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
   2835                  pData += 2;
   2836                  if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
   2837                  {
   2838                    sceneIDTo = *pData++; // to scene ID
   2839                  }
   2840          
   2841                  // Make sure the groups exist
   2842                  if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
   2843                       ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
   2844                  {
   2845                    // Allocate space for the scene list
   2846                    sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
   2847                    if ( sceneList == NULL )
   2848                    {
   2849                      status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
   2850                    }
   2851                    else
   2852                    {
   2853                      status = ZCL_STATUS_SUCCESS;
   2854                      if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
   2855                      {
   2856                        sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2857                                                                     groupIDFrom, sceneList );
   2858                      }
   2859                      else // Copy single scene
   2860                      {
   2861                        // Make sure the scene exists
   2862                        pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
   2863                        if ( pScene != NULL )
   2864                        {
   2865                          sceneList[0] = sceneIDFrom;
   2866                          sceneCnt = 1;
   2867                        }
   2868                        else
   2869                        {
   2870                          status = ZCL_STATUS_INVALID_FIELD; // Scene not found
   2871                        }
   2872                      }
   2873                    }
   2874          
   2875                    if ( status == ZCL_STATUS_SUCCESS )
   2876                    {
   2877                      uint8 numScenesToAdd = 0;
   2878                      uint8 i;
   2879                      for ( i = 0; i < sceneCnt; i++ )
   2880                      {
   2881                        if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
   2882                        {
   2883                          numScenesToAdd++;
   2884                        }
   2885                      }
   2886                      if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
   2887                      {
   2888                        // Copy the scenes
   2889                        for ( i = 0; i < sceneCnt; i++ )
   2890                        {
   2891                          // Ignore scene ID from and scene ID to fields
   2892                          pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
   2893                          if ( pScene != NULL )
   2894                          {
   2895                            zclGeneral_Scene_t *pToScene;
   2896                            scene = *pScene;
   2897                            scene.groupID = groupIDTo;
   2898                            scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
   2899          
   2900                            pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2901                            if( pToScene != NULL )
   2902                            {
   2903                              zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2904                            }
   2905                            // Add the scene
   2906                            zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   2907                          }
   2908                        }
   2909                      }
   2910                      else
   2911                      {
   2912                        status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   2913                      }
   2914                    }
   2915                  }
   2916                  else
   2917                  {
   2918                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   2919                  }
   2920          
   2921                  if ( UNICAST_MSG( pInMsg->msg ) )
   2922                  {
   2923                    if ( pScene == NULL )
   2924                    {
   2925                      pScene = &scene;
   2926                    }
   2927                    // Addressed to this device (not to a group) - send a response back
   2928                    zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2929                                                      status, pScene->groupID, pScene->ID,
   2930                                                      true, pInMsg->hdr.transSeqNum );
   2931                  }
   2932          
   2933                  if ( sceneList != NULL )
   2934                  {
   2935                    zcl_mem_free( sceneList );
   2936                  }
   2937                }
   2938          
   2939                stat = ZCL_STATUS_CMD_HAS_RSP;
   2940                break;
   2941          #endif // ZCL_LIGHT_LINK_ENHANCE
   2942          
   2943              default:
   2944                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesServer_8:
   \   00064C   75..01       MOV     ?V4,#0x1
   2945              break;
   2946            }
   2947          
   2948            return ( stat );
   \                     ??zclGeneral_ProcessInScenesServer_41:
   \   00064F   A9..         MOV     R1,?V4
   \   000651   743C         MOV     A,#0x3c
   \   000653                REQUIRE ?Subroutine3
   \   000653                ; // Fall through to label ?Subroutine3
   2949          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2406         ADD     A,#0x6
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   FB           MOV     R3,A
   \   00000D   7401         MOV     A,#0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   EE           MOV     A,R6
   \   000004   2415         ADD     A,#0x15
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   3F           ADDC    A,R7
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006                REQUIRE ??Subroutine90_0
   \   000006                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine91_0
   \   000004                ; // Fall through to label ??Subroutine91_0
   2950          
   2951          /*********************************************************************
   2952           * @fn      zclGeneral_ProcessInScenesClient
   2953           *
   2954           * @brief   Process in the received Scenes Command.
   2955           *
   2956           * @param   pInMsg - pointer to the incoming message
   2957           *
   2958           * @return  ZStatus_t
   2959           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for indirect call
   \   000005                ; Setup parameters for indirect call
   \   000005   AA..         MOV     R2,?XSP + 0
   \   000007   AB..         MOV     R3,?XSP + 1
   \   000009   85..82       MOV     DPL,?V2
   \   00000C   85..83       MOV     DPH,?V3
   \   00000F                REQUIRE ??Subroutine84_0
   \   00000F                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2960          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesClient:
   2961                                                             zclGeneral_AppCallbacks_t *pCBs )
   2962          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 65
   \   000005   74BF         MOV     A,#-0x41
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V8,R2
   \   00000C   8B..         MOV     ?V9,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   2963            zclGeneral_Scene_t scene;
   2964            uint8 *pData = pInMsg->pData;
   \   000012   12....       LCALL   ?Subroutine35 & 0xFFFF
   2965            uint8 nameLen;
   2966            zclSceneRsp_t rsp;
   2967            uint8 i;
   2968            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_229:
   \   000015   75..00       MOV     ?V10,#0x0
   2969          
   2970            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   000018                ; Setup parameters for call to function osal_memset
   \   000018   7C37         MOV     R4,#0x37
   \   00001A   7D00         MOV     R5,#0x0
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   740A         MOV     A,#0xa
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2971            zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C0A         MOV     R4,#0xa
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   AA..         MOV     R2,?XSP + 0
   \   00002E   AB..         MOV     R3,?XSP + 1
   \   000030   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2972          
   2973            // Get the status field first
   2974            rsp.status = *pData++;
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   7403         MOV     A,#0x3
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   12....       LCALL   ?Subroutine49 & 0xFFFF
   2975          
   2976            if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
   \                     ??CrossCallReturnLabel_90:
   \   000044   E5..         MOV     A,?V8
   \   000046   2407         ADD     A,#0x7
   \   000048   F5..         MOV     ?V0,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V9
   \   00004D   F5..         MOV     ?V1,A
   \   00004F   85..82       MOV     DPL,?V0
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6406         XRL     A,#0x6
   \   000057   7014         JNZ     ??zclGeneral_ProcessInScenesClient_0
   2977            {
   2978              rsp.capacity = *pData++;
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   7407         MOV     A,#0x7
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine66 & 0xFFFF
   2979            }
   \                     ??CrossCallReturnLabel_131:
   \   00006A   0E           INC     R6
   \   00006B   AF83         MOV     R7,DPH
   2980          
   2981            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesClient_0:
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000074   740A         MOV     A,#0xa
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   12....       LCALL   ?Subroutine52 & 0xFFFF
   2982            pData += 2;   // Move past group ID
   \                     ??CrossCallReturnLabel_106:
   \   00007C   EE           MOV     A,R6
   \   00007D   2402         ADD     A,#0x2
   \   00007F   FE           MOV     R6,A
   \   000080   5001         JNC     ??zclGeneral_ProcessInScenesClient_1
   \   000082   0F           INC     R7
   2983          
   2984            switch ( pInMsg->hdr.commandID )
   \                     ??zclGeneral_ProcessInScenesClient_1:
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   A3           INC     DPTR
   \   000088   A882         MOV     R0,DPL
   \   00008A   A983         MOV     R1,DPH
   \   00008C   E5..         MOV     A,?V2
   \   00008E   2416         ADD     A,#0x16
   \   000090   F5..         MOV     ?V2,A
   \   000092   5002         JNC     ??zclGeneral_ProcessInScenesClient_2
   \   000094   05..         INC     ?V3
   \                     ??zclGeneral_ProcessInScenesClient_2:
   \   000096   85..82       MOV     DPL,?V0
   \   000099   85..83       MOV     DPH,?V1
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   607B         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   00009F   14           DEC     A
   \   0000A0   6013         JZ      ??zclGeneral_ProcessInScenesClient_4
   \   0000A2   14           DEC     A
   \   0000A3   6075         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   0000A5   14           DEC     A
   \   0000A6   6072         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   0000A8   14           DEC     A
   \   0000A9   606F         JZ      ??zclGeneral_ProcessInScenesClient_3
   \   0000AB   24FE         ADD     A,#-0x2
   \   0000AD   7003         JNZ     $+5
   \   0000AF   02....       LJMP    ??zclGeneral_ProcessInScenesClient_5 & 0xFFFF
   \   0000B2   02....       LJMP    ??zclGeneral_ProcessInScenesClient_6 & 0xFFFF
   2985            {
   2986              case COMMAND_SCENE_VIEW_RSP:
   2987                // Parse the rest of the incoming message
   2988                scene.ID = *pData++; // Not applicable to Remove All Response command
   \                     ??zclGeneral_ProcessInScenesClient_4:
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   C0E0         PUSH    A
   \   0000BC   740C         MOV     A,#0xc
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   D0E0         POP     A
   \   0000C3   12....       LCALL   ?Subroutine50 & 0xFFFF
   2989                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_93:
   \   0000C6   12....       LCALL   ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   0000C9   740D         MOV     A,#0xd
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E8           MOV     A,R0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E9           MOV     A,R1
   \   0000D2   12....       LCALL   ?Subroutine47 & 0xFFFF
   2990                pData += 2;
   2991                nameLen = *pData++; // Name length
   \                     ??CrossCallReturnLabel_86:
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F5..         MOV     ?V7,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   2403         ADD     A,#0x3
   \   0000DB   FE           MOV     R6,A
   \   0000DC   5001         JNC     ??zclGeneral_ProcessInScenesClient_7
   \   0000DE   0F           INC     R7
   2992                if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \                     ??zclGeneral_ProcessInScenesClient_7:
   \   0000DF   E5..         MOV     A,?V7
   \   0000E1   C3           CLR     C
   \   0000E2   9410         SUBB    A,#0x10
   \   0000E4   4003         JC      ??zclGeneral_ProcessInScenesClient_8
   2993                  nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   0000E6   75..0F       MOV     ?V7,#0xf
   2994          
   2995                scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesClient_8:
   \   0000E9   7411         MOV     A,#0x11
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   E5..         MOV     A,?V7
   \   0000F0   F0           MOVX    @DPTR,A
   2996                zcl_memcpy( &(scene.name[1]), pData, nameLen );
   \   0000F1                ; Setup parameters for call to function osal_memcpy
   \   0000F1   8E..         MOV     ?V4,R6
   \   0000F3   8F..         MOV     ?V5,R7
   \   0000F5   75..00       MOV     ?V6,#0x0
   \   0000F8   78..         MOV     R0,#?V4
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FD   AC..         MOV     R4,?V7
   \   0000FF   7D00         MOV     R5,#0x0
   \   000101   7415         MOV     A,#0x15
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   AA82         MOV     R2,DPL
   \   000108   AB83         MOV     R3,DPH
   \   00010A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010D   7403         MOV     A,#0x3
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   2997          
   2998                pData += nameLen; // move past name, use original length
   \   000112   A8..         MOV     R0,?V7
   \   000114   EE           MOV     A,R6
   \   000115   28           ADD     A,R0
   \   000116   FE           MOV     R6,A
   \   000117   E4           CLR     A
   \   000118   3F           ADDC    A,R7
   \   000119   FF           MOV     R7,A
   2999          
   3000                //*** Do something with the extension field(s)
   3001          
   3002                // Fall through to callback - break is left off intentionally
   3003          
   3004              case COMMAND_SCENE_ADD_RSP:
   3005              case COMMAND_SCENE_REMOVE_RSP:
   3006              case COMMAND_SCENE_REMOVE_ALL_RSP:
   3007              case COMMAND_SCENE_STORE_RSP:
   3008                if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_3:
   \   00011A   85..82       MOV     DPL,?V2
   \   00011D   85..83       MOV     DPH,?V3
   \   000120   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000123   7003         JNZ     $+5
   \   000125   02....       LJMP    ??zclGeneral_ProcessInScenesClient_9 & 0xFFFF
   3009                {
   3010                  if ( pInMsg->hdr.commandID != COMMAND_SCENE_REMOVE_ALL_RSP )
   \   000128   85..82       MOV     DPL,?V0
   \   00012B   85..83       MOV     DPH,?V1
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   6403         XRL     A,#0x3
   \   000131   600F         JZ      ??zclGeneral_ProcessInScenesClient_10
   3011                  {
   3012                    scene.ID = *pData++;
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   E0           MOVX    A,@DPTR
   \   000138   C0E0         PUSH    A
   \   00013A   740C         MOV     A,#0xc
   \   00013C   12....       LCALL   ?XSTACK_DISP0_8
   \   00013F   D0E0         POP     A
   \   000141   F0           MOVX    @DPTR,A
   3013                  }
   3014                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??zclGeneral_ProcessInScenesClient_10:
   \   000142   12....       LCALL   ?Subroutine17 & 0xFFFF
   3015                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_26:
   \   000145   C0E0         PUSH    A
   \   000147   7402         MOV     A,#0x2
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   D0E0         POP     A
   \   00014E   F0           MOVX    @DPTR,A
   3016                  rsp.scene = &scene;
   \   00014F   740A         MOV     A,#0xa
   \   000151   12....       LCALL   ?XSTACK_DISP100_8
   \   000154   7408         MOV     A,#0x8
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   12....       LCALL   ?Subroutine20 & 0xFFFF
   3017          
   3018                  pCBs->pfnSceneRsp( &rsp );
   3019                }
   \                     ??CrossCallReturnLabel_201:
   \   00015C   12....       LCALL   ?CALL_IND
   \   00015F   02....       LJMP    ??zclGeneral_ProcessInScenesClient_9 & 0xFFFF
   3020                break;
   3021          
   3022              case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
   3023                {
   3024                  uint8 *sceneList = NULL;
   \                     ??zclGeneral_ProcessInScenesClient_5:
   \   000162   75..00       MOV     ?V4,#0x0
   \   000165   75..00       MOV     ?V5,#0x0
   3025          
   3026                  if ( rsp.status == ZCL_STATUS_SUCCESS )
   \   000168   7403         MOV     A,#0x3
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   7048         JNZ     ??zclGeneral_ProcessInScenesClient_11
   3027                  {
   3028                    uint8 sceneCnt = *pData++;
   \   000170   8E82         MOV     DPL,R6
   \   000172   8F83         MOV     DPH,R7
   \   000174   E0           MOVX    A,@DPTR
   \   000175   F5..         MOV     ?V6,A
   \   000177   E8           MOV     A,R0
   \   000178   FE           MOV     R6,A
   \   000179   E9           MOV     A,R1
   \   00017A   FF           MOV     R7,A
   3029          
   3030                    if ( sceneCnt > 0 )
   \   00017B   E5..         MOV     A,?V6
   \   00017D   6039         JZ      ??zclGeneral_ProcessInScenesClient_11
   3031                    {
   3032                      // Allocate space for the scene list
   3033                      sceneList = zcl_mem_alloc( sceneCnt );
   \   00017F                ; Setup parameters for call to function osal_mem_alloc
   \   00017F   FA           MOV     R2,A
   \   000180   7B00         MOV     R3,#0x0
   \   000182   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000185   8A..         MOV     ?V4,R2
   \   000187   8B..         MOV     ?V5,R3
   3034                      if ( sceneList != NULL )
   \   000189   EA           MOV     A,R2
   \   00018A   45..         ORL     A,?V5
   \   00018C   602A         JZ      ??zclGeneral_ProcessInScenesClient_11
   3035                      {
   3036                        rsp.sceneCnt = sceneCnt;
   \   00018E   7404         MOV     A,#0x4
   \   000190   12....       LCALL   ?XSTACK_DISP0_8
   \   000193   E5..         MOV     A,?V6
   \   000195   F0           MOVX    @DPTR,A
   3037                        for ( i = 0; i < sceneCnt; i++ )
   \   000196   7A00         MOV     R2,#0x0
   \   000198   8018         SJMP    ??zclGeneral_ProcessInScenesClient_12
   3038                          sceneList[i] = *pData++;
   \                     ??zclGeneral_ProcessInScenesClient_13:
   \   00019A   8E82         MOV     DPL,R6
   \   00019C   8F83         MOV     DPH,R7
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   C0E0         PUSH    A
   \   0001A1   EA           MOV     A,R2
   \   0001A2   F8           MOV     R0,A
   \   0001A3   E5..         MOV     A,?V4
   \   0001A5   28           ADD     A,R0
   \   0001A6   F582         MOV     DPL,A
   \   0001A8   E4           CLR     A
   \   0001A9   3B           ADDC    A,R3
   \   0001AA   F583         MOV     DPH,A
   \   0001AC   D0E0         POP     A
   \   0001AE   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0001B1   0A           INC     R2
   \                     ??zclGeneral_ProcessInScenesClient_12:
   \   0001B2   EA           MOV     A,R2
   \   0001B3   C3           CLR     C
   \   0001B4   95..         SUBB    A,?V6
   \   0001B6   40E2         JC      ??zclGeneral_ProcessInScenesClient_13
   3039                      }
   3040                    }
   3041                  }
   3042          
   3043                  if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_11:
   \   0001B8   85..82       MOV     DPL,?V2
   \   0001BB   85..83       MOV     DPH,?V3
   \   0001BE   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0001C1   6029         JZ      ??zclGeneral_ProcessInScenesClient_14
   3044                  {
   3045                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0001C3   12....       LCALL   ?Subroutine17 & 0xFFFF
   3046                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_27:
   \   0001C6   C0E0         PUSH    A
   \   0001C8   7402         MOV     A,#0x2
   \   0001CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CD   D0E0         POP     A
   \   0001CF   F0           MOVX    @DPTR,A
   3047                    rsp.sceneList = sceneList;
   \   0001D0   7405         MOV     A,#0x5
   \   0001D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D5   E5..         MOV     A,?V4
   \   0001D7   F0           MOVX    @DPTR,A
   \   0001D8   A3           INC     DPTR
   \   0001D9   E5..         MOV     A,?V5
   \   0001DB   F0           MOVX    @DPTR,A
   3048                    rsp.scene = &scene;
   \   0001DC   740A         MOV     A,#0xa
   \   0001DE   12....       LCALL   ?XSTACK_DISP100_8
   \   0001E1   7408         MOV     A,#0x8
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   12....       LCALL   ?Subroutine20 & 0xFFFF
   3049          
   3050                    pCBs->pfnSceneRsp( &rsp);
   3051                  }
   \                     ??CrossCallReturnLabel_202:
   \   0001E9   12....       LCALL   ?CALL_IND
   3052          
   3053                  if ( sceneList != NULL )
   \                     ??zclGeneral_ProcessInScenesClient_14:
   \   0001EC   E5..         MOV     A,?V4
   \   0001EE   45..         ORL     A,?V5
   \   0001F0   600C         JZ      ??zclGeneral_ProcessInScenesClient_9
   3054                  {
   3055                    zcl_mem_free( sceneList );
   \   0001F2                ; Setup parameters for call to function osal_mem_free
   \   0001F2   AA..         MOV     R2,?V4
   \   0001F4   AB..         MOV     R3,?V5
   \   0001F6   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001F9   8003         SJMP    ??zclGeneral_ProcessInScenesClient_9
   3056                  }
   3057                }
   3058                break;
   3059          
   3060              default:
   3061                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesClient_6:
   \   0001FB   75..01       MOV     ?V10,#0x1
   3062                break;
   3063            }
   3064          
   3065            return ( stat );
   \                     ??zclGeneral_ProcessInScenesClient_9:
   \   0001FE   A9..         MOV     R1,?V10
   \   000200   7441         MOV     A,#0x41
   \   000202   02....       LJMP    ?Subroutine3 & 0xFFFF
   3066          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV     DPL,?V8
   \   000003   85..83       MOV     DPH,?V9
   \   000006   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000009   85..82       MOV     DPL,?V0
   \   00000C   85..83       MOV     DPH,?V1
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET
   3067          #endif // ZCL_SCENES
   3068          
   3069          #ifdef ZCL_ON_OFF
   3070          /*********************************************************************
   3071           * @fn      zclGeneral_ProcessInCmdOnOff
   3072           *
   3073           * @brief   Process in the received On/Off Command.
   3074           *
   3075           * @param   pInMsg - pointer to the incoming message
   3076           *
   3077           * @return  ZStatus_t
   3078           */
   3079          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
   3080                                                      zclGeneral_AppCallbacks_t *pCBs )
   3081          {
   3082            ZStatus_t stat = ZSuccess;
   3083          
   3084            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3085            {
   3086              switch ( pInMsg->hdr.commandID )
   3087              {
   3088                case COMMAND_OFF:
   3089                  //HAL_TURN_OFF_LED1(); //update 9/12/2016
   3090                  //break;
   3091                case COMMAND_ON:
   3092                  //HAL_TURN_ON_LED1();  //update 9/12/2016
   3093                  //break;
   3094                case COMMAND_TOGGLE:
   3095                  if ( pCBs->pfnOnOff )
   3096                  {
   3097                    pCBs->pfnOnOff( pInMsg->hdr.commandID );
   3098                  }
   3099                  break;
   3100          
   3101          #ifdef ZCL_LIGHT_LINK_ENHANCE
   3102                case COMMAND_OFF_WITH_EFFECT:
   3103                  if ( pCBs->pfnOnOff_OffWithEffect )
   3104                  {
   3105                    zclOffWithEffect_t cmd;
   3106          
   3107                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3108                    cmd.effectId = pInMsg->pData[0];
   3109                    cmd.effectVariant = pInMsg->pData[1];
   3110          
   3111                    pCBs->pfnOnOff_OffWithEffect( &cmd );
   3112                  }
   3113                  break;
   3114          
   3115                case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
   3116                  if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
   3117                  {
   3118                    pCBs->pfnOnOff_OnWithRecallGlobalScene();
   3119                  }
   3120                  break;
   3121          
   3122                case COMMAND_ON_WITH_TIMED_OFF:
   3123                  if ( pCBs->pfnOnOff_OnWithTimedOff )
   3124                  {
   3125                    zclOnWithTimedOff_t cmd;
   3126          
   3127                    cmd.onOffCtrl.byte = pInMsg->pData[0];
   3128                    cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   3129                    cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   3130                    pCBs->pfnOnOff_OnWithTimedOff( &cmd );
   3131                  }
   3132                  break;
   3133          #endif // ZCL_LIGHT_LINK_ENHANCE
   3134          
   3135                default:
   3136                  stat = ZFailure;
   3137                  break;
   3138              }
   3139            }
   3140            // no Client command
   3141          
   3142            return ( stat );
   3143          }
   3144          #endif // ZCL_ON_OFF
   3145          
   3146          #ifdef ZCL_LEVEL_CTRL
   3147          /*********************************************************************
   3148           * @fn      zclGeneral_ProcessInLevelControl
   3149           *
   3150           * @brief   Process in the received Level Control Command.
   3151           *
   3152           * @param   pInMsg - pointer to the incoming message
   3153           *
   3154           * @return  ZStatus_t
   3155           */
   3156          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
   3157                                                             zclGeneral_AppCallbacks_t *pCBs )
   3158          {
   3159            uint8 withOnOff = FALSE;
   3160            ZStatus_t stat = ZSuccess;
   3161          
   3162            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3163            {
   3164              switch ( pInMsg->hdr.commandID )
   3165              {
   3166                case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
   3167                  withOnOff = TRUE;
   3168                  // fall through
   3169                case COMMAND_LEVEL_MOVE_TO_LEVEL:
   3170                  if ( pCBs->pfnLevelControlMoveToLevel )
   3171                  {
   3172                    zclLCMoveToLevel_t cmd;
   3173          
   3174                    cmd.level = pInMsg->pData[0];
   3175          
   3176                    if ( ( cmd.level >= ATTR_LEVEL_MIN_LEVEL ) &&
   3177                         ( cmd.level <= ATTR_LEVEL_MAX_LEVEL ) )
   3178                    {
   3179                      cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   3180                      cmd.withOnOff = withOnOff;
   3181          
   3182                      pCBs->pfnLevelControlMoveToLevel( &cmd );
   3183                    }
   3184                    else
   3185                    {
   3186                      // level range requested is invalid
   3187                      stat = ZCL_STATUS_INVALID_VALUE;
   3188                    }
   3189                  }
   3190                  break;
   3191          
   3192                case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
   3193                  withOnOff = TRUE;
   3194                  // fall through
   3195                case COMMAND_LEVEL_MOVE:
   3196                  if ( pCBs->pfnLevelControlMove )
   3197                  {
   3198                    zclLCMove_t cmd;
   3199          
   3200                    cmd.moveMode = pInMsg->pData[0];
   3201                    cmd.rate = pInMsg->pData[1];
   3202                    cmd.withOnOff = withOnOff;
   3203          
   3204                    pCBs->pfnLevelControlMove( &cmd );
   3205                  }
   3206                  break;
   3207          
   3208                case COMMAND_LEVEL_STEP_WITH_ON_OFF:
   3209                  withOnOff = TRUE;
   3210                  // fall through
   3211                case COMMAND_LEVEL_STEP:
   3212                  if ( pCBs->pfnLevelControlStep )
   3213                  {
   3214                    zclLCStep_t cmd;
   3215          
   3216                    cmd.stepMode = pInMsg->pData[0];
   3217                    cmd.amount =  pInMsg->pData[1];
   3218                    cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   3219                    cmd.withOnOff = withOnOff;
   3220          
   3221                    pCBs->pfnLevelControlStep( &cmd );
   3222                  }
   3223                  break;
   3224          
   3225                case COMMAND_LEVEL_STOP:
   3226                case COMMAND_LEVEL_STOP_WITH_ON_OFF:
   3227                  // Both Stop commands are identical
   3228                  if ( pCBs->pfnLevelControlStop )
   3229                  {
   3230                    pCBs->pfnLevelControlStop();
   3231                  }
   3232                  break;
   3233          
   3234                default:
   3235                  stat = ZFailure;
   3236                  break;
   3237              }
   3238            }
   3239            // no Client command
   3240          
   3241            return ( stat );
   3242          }
   3243          #endif // ZCL_LEVEL_CTRL
   3244          
   3245          #ifdef ZCL_ALARMS
   3246          /*********************************************************************
   3247           * @fn      zclGeneral_AddAlarm
   3248           *
   3249           * @brief   Add an alarm for a cluster
   3250           *
   3251           * @param   endpoint -
   3252           * @param   alarm - new alarm item
   3253           *
   3254           * @return  ZStatus_t
   3255           */
   3256          ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
   3257          {
   3258            zclGenAlarmItem_t *pNewItem;
   3259            zclGenAlarmItem_t *pLoop;
   3260          
   3261            // Fill in the new profile list
   3262            pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
   3263            if ( pNewItem == NULL )
   3264              return ( ZMemError );
   3265          
   3266            // Fill in the plugin record.
   3267            pNewItem->next = (zclGenAlarmItem_t *)NULL;
   3268            pNewItem->endpoint =  endpoint;
   3269            zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
   3270          
   3271            // Find spot in list
   3272            if (  zclGenAlarmTable == NULL )
   3273            {
   3274              zclGenAlarmTable = pNewItem;
   3275            }
   3276            else
   3277            {
   3278              // Look for end of list
   3279              pLoop = zclGenAlarmTable;
   3280              while ( pLoop->next != NULL )
   3281                pLoop = pLoop->next;
   3282          
   3283              // Put new item at end of list
   3284              pLoop->next = pNewItem;
   3285            }
   3286          
   3287            return ( ZSuccess );
   3288          }
   3289          
   3290          /*********************************************************************
   3291           * @fn      zclGeneral_FindAlarm
   3292           *
   3293           * @brief   Find an alarm with alarmCode and clusterID
   3294           *
   3295           * @param   endpoint -
   3296           * @param   groupID - what group the scene belongs to
   3297           * @param   sceneID - ID to look for scene
   3298           *
   3299           * @return  a pointer to the alarm information, NULL if not found
   3300           */
   3301          zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3302          {
   3303            zclGenAlarmItem_t *pLoop;
   3304          
   3305            // Look for the alarm
   3306            pLoop = zclGenAlarmTable;
   3307            while ( pLoop )
   3308            {
   3309              if ( pLoop->endpoint == endpoint &&
   3310                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3311              {
   3312                return ( &(pLoop->alarm) );
   3313              }
   3314              pLoop = pLoop->next;
   3315            }
   3316          
   3317            return ( (zclGeneral_Alarm_t *)NULL );
   3318          }
   3319          
   3320          /*********************************************************************
   3321           * @fn      zclGeneral_FindEarliestAlarm
   3322           *
   3323           * @brief   Find an alarm with the earliest timestamp
   3324           *
   3325           * @param   endpoint -
   3326           *
   3327           * @return  a pointer to the alarm information, NULL if not found
   3328           */
   3329          zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
   3330          {
   3331            zclGenAlarmItem_t *pLoop;
   3332            zclGenAlarmItem_t earliestAlarm;
   3333            zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
   3334          
   3335            pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
   3336          
   3337            // Look for alarm with earliest time
   3338            pLoop = zclGenAlarmTable;
   3339            while ( pLoop )
   3340            {
   3341              if ( pLoop->endpoint == endpoint &&
   3342                   pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
   3343              {
   3344                pEarliestAlarm = pLoop;
   3345              }
   3346              pLoop = pLoop->next;
   3347            }
   3348          
   3349            if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
   3350              return ( &(pEarliestAlarm->alarm) );
   3351          
   3352            // No alarm
   3353            return ( (zclGeneral_Alarm_t *)NULL );
   3354          }
   3355          
   3356          /*********************************************************************
   3357           * @fn      zclGeneral_ResetAlarm
   3358           *
   3359           * @brief   Remove an alarm with alarmCode and clusterID
   3360           *
   3361           * @param   endpoint -
   3362           * @param   alarmCode -
   3363           * @param   clusterID -
   3364           *
   3365           * @return  TRUE if removed, FALSE if not found
   3366           */
   3367          void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3368          {
   3369            zclGenAlarmItem_t *pLoop;
   3370            zclGenAlarmItem_t *pPrev;
   3371          
   3372            // Look for end of list
   3373            pLoop = zclGenAlarmTable;
   3374            pPrev = NULL;
   3375            while ( pLoop )
   3376            {
   3377              if ( pLoop->endpoint == endpoint &&
   3378                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3379              {
   3380                if ( pPrev == NULL )
   3381                  zclGenAlarmTable = pLoop->next;
   3382                else
   3383                  pPrev->next = pLoop->next;
   3384          
   3385                // Free the memory
   3386                zcl_mem_free( pLoop );
   3387          
   3388                // Notify the Application so that if the alarm condition still active then
   3389                // a new notification will be generated, and a new alarm record will be
   3390                // added to the alarm log
   3391                // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
   3392                return;
   3393              }
   3394              pPrev = pLoop;
   3395              pLoop = pLoop->next;
   3396            }
   3397          }
   3398          
   3399          /*********************************************************************
   3400           * @fn      zclGeneral_ResetAllAlarms
   3401           *
   3402           * @brief   Remove all alarms with endpoint
   3403           *
   3404           * @param   endpoint -
   3405           * @param   notifyApp -
   3406           *
   3407           * @return  none
   3408           */
   3409          void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
   3410          {
   3411            zclGenAlarmItem_t *pLoop;
   3412            zclGenAlarmItem_t *pPrev;
   3413            zclGenAlarmItem_t *pNext;
   3414          
   3415            // Look for end of list
   3416            pLoop = zclGenAlarmTable;
   3417            pPrev = NULL;
   3418            while ( pLoop )
   3419            {
   3420              if (  pLoop->endpoint == endpoint )
   3421              {
   3422                if ( pPrev == NULL )
   3423                  zclGenAlarmTable = pLoop->next;
   3424                else
   3425                  pPrev->next = pLoop->next;
   3426          
   3427                pNext = pLoop->next;
   3428          
   3429                // Free the memory
   3430                zcl_mem_free( pLoop );
   3431          
   3432                pLoop = pNext;
   3433              }
   3434              else
   3435              {
   3436                pPrev = pLoop;
   3437                pLoop = pLoop->next;
   3438              }
   3439            }
   3440          
   3441            if ( notifyApp )
   3442            {
   3443              // Notify the Application so that if any alarm conditions still active then
   3444              // a new notification will be generated, and a new alarm record will be
   3445              // added to the alarm log
   3446              // zclGeneral_NotifyResetAll(); // callback function?
   3447            }
   3448          }
   3449          
   3450          /*********************************************************************
   3451           * @fn      zclGeneral_ProcessInAlarmsServer
   3452           *
   3453           * @brief   Process in the received Alarms Command.
   3454           *
   3455           * @param   pInMsg - pointer to the incoming message
   3456           *
   3457           * @return  ZStatus_t
   3458           */
   3459          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
   3460                                                             zclGeneral_AppCallbacks_t *pCBs )
   3461          {
   3462            zclAlarm_t alarm;
   3463            zclGeneral_Alarm_t *pAlarm;
   3464            uint8 *pData = pInMsg->pData;
   3465            ZStatus_t stat = ZSuccess;
   3466          
   3467            switch ( pInMsg->hdr.commandID )
   3468            {
   3469              case COMMAND_ALARMS_RESET:
   3470                if ( pCBs->pfnAlarm )
   3471                {
   3472                  alarm.cmdID = pInMsg->hdr.commandID;
   3473                  alarm.alarmCode = pData[0];
   3474                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3475          
   3476                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3477                }
   3478                else
   3479                {
   3480                  stat = ZCL_STATUS_FAILURE;
   3481                }
   3482                break;
   3483          
   3484              case COMMAND_ALARMS_RESET_ALL:
   3485                if ( pCBs->pfnAlarm )
   3486                {
   3487                  alarm.cmdID = pInMsg->hdr.commandID;
   3488          
   3489                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3490                }
   3491                else
   3492                {
   3493                  stat = ZCL_STATUS_FAILURE;
   3494                }
   3495                break;
   3496          
   3497              case COMMAND_ALARMS_GET:
   3498                if ( pCBs->pfnAlarm )
   3499                {
   3500                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3501                  alarm.cmdID = pInMsg->hdr.commandID;
   3502          
   3503                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3504          
   3505                  pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
   3506                  if ( pAlarm )
   3507                  {
   3508                    // Send a response back
   3509                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3510                                                     ZCL_STATUS_SUCCESS, pAlarm->code,
   3511                                                     pAlarm->clusterID, pAlarm->timeStamp,
   3512                                                     true, pInMsg->hdr.transSeqNum );
   3513                    // Remove the entry from the Alarm table
   3514                    zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
   3515                  }
   3516                  else
   3517                  {
   3518                    // Send a response back
   3519                    zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3520                                                     ZCL_STATUS_NOT_FOUND, 0, 0, 0,
   3521                                                     true, pInMsg->hdr.transSeqNum );
   3522                  }
   3523                  stat = ZCL_STATUS_CMD_HAS_RSP;
   3524                }
   3525                else
   3526                {
   3527                  stat = ZCL_STATUS_FAILURE;
   3528                }
   3529                break;
   3530          
   3531              case COMMAND_ALARMS_RESET_LOG:
   3532                if ( pCBs->pfnAlarm )
   3533                {
   3534                  alarm.cmdID = pInMsg->hdr.commandID;
   3535          
   3536                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3537          
   3538                  zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
   3539                }
   3540                else
   3541                {
   3542                  stat = ZCL_STATUS_FAILURE;
   3543                }
   3544                break;
   3545          
   3546          #ifdef SE_UK_EXT
   3547              case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
   3548                if ( pCBs->pfnPublishEventLog )
   3549                {
   3550                  zclPublishEventLog_t eventLog;
   3551          
   3552                  eventLog.logID = *pData++;
   3553                  eventLog.cmdIndex = *pData++;
   3554                  eventLog.totalCmds = *pData++;
   3555          
   3556                  // First try to find out number of Sub Log Payloads
   3557                  eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
   3558                  if ( eventLog.numSubLogs > 0 )
   3559                  {
   3560                    // Try to alloc space for Log Payload
   3561                    eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
   3562                                                                             eventLog.numSubLogs );
   3563                    if ( eventLog.pLogs != NULL )
   3564                    {
   3565                      // Copy Log Payload
   3566                      for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
   3567                      {
   3568                        eventLog.pLogs[i].eventId = *pData++;
   3569                        eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
   3570                        pData += 4;
   3571                      }
   3572                    }
   3573                    else
   3574                    {
   3575                      stat = ZCL_STATUS_SOFTWARE_FAILURE;
   3576                    }
   3577                  }
   3578                  else
   3579                  {
   3580                    eventLog.pLogs = NULL;
   3581                  }
   3582          
   3583                  if ( stat == ZSuccess )
   3584                  {
   3585                    pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
   3586                  }
   3587          
   3588                  if ( eventLog.pLogs != NULL )
   3589                  {
   3590                    zcl_mem_free( eventLog.pLogs );
   3591                  }
   3592                }
   3593                break;
   3594          #endif // SE_UK_EXT
   3595          
   3596              default:
   3597                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3598                break;
   3599            }
   3600          
   3601            return ( stat );
   3602          }
   3603          
   3604          /*********************************************************************
   3605           * @fn      zclGeneral_ProcessInAlarmsClient
   3606           *
   3607           * @brief   Process in the received Alarms Command.
   3608           *
   3609           * @param   pInMsg - pointer to the incoming message
   3610           *
   3611           * @return  ZStatus_t
   3612           */
   3613          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
   3614                                                             zclGeneral_AppCallbacks_t *pCBs )
   3615          {
   3616            uint8 *pData = pInMsg->pData;
   3617            zclAlarm_t alarm;
   3618            ZStatus_t stat = ZSuccess;
   3619          
   3620            zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
   3621          
   3622            switch ( pInMsg->hdr.commandID )
   3623            {
   3624              case COMMAND_ALARMS_ALARM:
   3625                if ( pCBs->pfnAlarm )
   3626                {
   3627                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3628                  alarm.cmdID = pInMsg->hdr.commandID;
   3629                  alarm.alarmCode = pData[0];
   3630                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3631          
   3632                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3633                }
   3634                else
   3635                {
   3636                  stat = ZCL_STATUS_FAILURE;
   3637                }
   3638                break;
   3639          
   3640              case COMMAND_ALARMS_GET_RSP:
   3641                if ( pCBs->pfnAlarm )
   3642                {
   3643                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3644                  alarm.cmdID = pInMsg->hdr.commandID;
   3645                  alarm.alarmCode = *pData++;
   3646                  alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
   3647          
   3648                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3649                }
   3650                else
   3651                {
   3652                  stat = ZCL_STATUS_FAILURE;
   3653                }
   3654                break;
   3655          
   3656          #ifdef SE_UK_EXT
   3657              case COMMAND_ALARMS_GET_EVENT_LOG:
   3658                if ( pCBs->pfnGetEventLog )
   3659                {
   3660                  zclGetEventLog_t eventLog;
   3661          
   3662                  eventLog.logID = *pData++;
   3663                  eventLog.startTime = zcl_build_uint32( pData, 4 );
   3664                  pData += 4;
   3665                  eventLog.endTime = zcl_build_uint32( pData, 4 );
   3666                  pData += 4;
   3667                  eventLog.numEvents = *pData;
   3668          
   3669                  pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3670                                        &eventLog, pInMsg->hdr.transSeqNum );
   3671                }
   3672                break;
   3673          #endif // SE_UK_EXT
   3674          
   3675              default:
   3676                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3677                break;
   3678            }
   3679          
   3680            return ( stat );
   3681          }
   3682          #endif // ZCL_ALARMS
   3683          
   3684          #ifdef ZCL_LOCATION
   3685          /*********************************************************************
   3686           * @fn      zclGeneral_ProcessInLocationServer
   3687           *
   3688           * @brief   Process in the received Location Command.
   3689           *
   3690           * @param   pInMsg - pointer to the incoming message
   3691           *
   3692           * @return  ZStatus_t
   3693           */
   3694          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
   3695                                                               zclGeneral_AppCallbacks_t *pCBs )
   3696          {
   3697            uint8 *pData = pInMsg->pData;
   3698            zclLocation_t cmd;
   3699            ZStatus_t stat = ZSuccess;
   3700          
   3701            zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
   3702          
   3703            switch ( pInMsg->hdr.commandID )
   3704            {
   3705              case COMMAND_LOCATION_SET_ABSOLUTE:
   3706                cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3707                pData += 2;
   3708                cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3709                pData += 2;
   3710                cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3711                pData += 2;
   3712                cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3713                pData += 2;
   3714                cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3715          
   3716                if ( pCBs->pfnLocation )
   3717                {
   3718                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3719                  cmd.cmdID = pInMsg->hdr.commandID;
   3720          
   3721                  // Update the absolute location info
   3722                  pCBs->pfnLocation( &cmd );
   3723                }
   3724                break;
   3725          
   3726              case COMMAND_LOCATION_SET_DEV_CFG:
   3727                cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
   3728                pData += 2;
   3729                cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3730                pData += 2;
   3731                cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3732                pData += 2;
   3733                cmd.un.devCfg.numMeasurements = *pData++;
   3734                cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3735          
   3736                if ( pCBs->pfnLocation )
   3737                {
   3738                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3739                  cmd.cmdID = pInMsg->hdr.commandID;
   3740          
   3741                  // Update the device configuration info
   3742                  pCBs->pfnLocation( &cmd );
   3743                }
   3744                break;
   3745          
   3746              case COMMAND_LOCATION_GET_DEV_CFG:
   3747                cmd.un.ieeeAddr = pData;
   3748          
   3749                if ( pCBs->pfnLocation )
   3750                {
   3751                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3752                  cmd.cmdID = pInMsg->hdr.commandID;
   3753                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3754          
   3755                  // Retreive the Device Configuration
   3756                  pCBs->pfnLocation( &cmd );
   3757                }
   3758                stat = ZCL_STATUS_CMD_HAS_RSP;
   3759                break;
   3760          
   3761              case COMMAND_LOCATION_GET_DATA:
   3762                cmd.un.loc.bitmap.locByte = *pData++;
   3763                cmd.un.loc.numResponses = *pData++;
   3764          
   3765                if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
   3766                  zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
   3767          
   3768                if ( pCBs->pfnLocation )
   3769                {
   3770                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3771                  cmd.cmdID = pInMsg->hdr.commandID;
   3772                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3773          
   3774                  // Retreive the Location Data
   3775                  pCBs->pfnLocation( &cmd );
   3776                }
   3777                stat = ZCL_STATUS_CMD_HAS_RSP;
   3778                break;
   3779          
   3780              default:
   3781                stat = ZFailure;
   3782                break;
   3783            }
   3784          
   3785            return ( stat );
   3786          }
   3787          
   3788          /*********************************************************************
   3789           * @fn      zclGeneral_ProcessInLocationDataRsp
   3790           *
   3791           * @brief   Process in the received Location Command.
   3792           *
   3793           * @param   pInMsg - pointer to the incoming message
   3794           *
   3795           * @return  ZStatus_t
   3796           */
   3797          static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
   3798                                                           zclGeneral_AppCallbacks_t *pCBs )
   3799          {
   3800            uint8 *pData = pInMsg->pData;
   3801            zclLocationRsp_t rsp;
   3802          
   3803            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3804          
   3805            if ( pCBs->pfnLocationRsp )
   3806            {
   3807              if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
   3808                rsp.un.loc.status = *pData++;
   3809          
   3810              if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
   3811                   rsp.un.loc.status == ZCL_STATUS_SUCCESS )
   3812              {
   3813                rsp.un.loc.data.type = *pData++;
   3814                rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3815                pData += 2;
   3816                rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3817                pData += 2;
   3818          
   3819                if ( locationType2D( rsp.un.loc.data.type ) == 0 )
   3820                {
   3821                  rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3822                  pData += 2;
   3823                }
   3824          
   3825                if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3826                {
   3827                  rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3828                  pData += 2;
   3829                  rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3830                  pData += 2;
   3831                }
   3832          
   3833                if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
   3834                {
   3835                  if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3836                    rsp.un.loc.data.calcLoc.locationMethod = *pData++;
   3837          
   3838                  rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
   3839                  rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
   3840                }
   3841              }
   3842          
   3843              rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3844              rsp.cmdID = pInMsg->hdr.commandID;
   3845          
   3846              // Notify the Application
   3847              pCBs->pfnLocationRsp( &rsp );
   3848            }
   3849          }
   3850          
   3851          /*********************************************************************
   3852           * @fn      zclGeneral_ProcessInLocationClient
   3853           *
   3854           * @brief   Process in the received Location Command.
   3855           *
   3856           * @param   pInMsg - pointer to the incoming message
   3857           *
   3858           * @return  ZStatus_t
   3859           */
   3860          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
   3861                                                               zclGeneral_AppCallbacks_t *pCBs )
   3862          {
   3863            uint8 *pData = pInMsg->pData;
   3864            zclLocationRsp_t rsp;
   3865            ZStatus_t stat = ZSuccess;
   3866          
   3867            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3868          
   3869            switch ( pInMsg->hdr.commandID )
   3870            {
   3871              case COMMAND_LOCATION_DEV_CFG_RSP:
   3872                if ( pCBs->pfnLocationRsp )
   3873                {
   3874                  rsp.un.devCfg.status = *pData++;
   3875                  if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
   3876                  {
   3877                    rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
   3878                    pData += 2;
   3879                    rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3880                    pData += 2;
   3881                    rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3882                    pData += 2;
   3883                    rsp.un.devCfg.data.numMeasurements = *pData++;
   3884                    rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3885          
   3886                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3887                    rsp.cmdID = pInMsg->hdr.commandID;
   3888          
   3889                    // Notify the Application
   3890                    pCBs->pfnLocationRsp( &rsp );
   3891                  }
   3892                }
   3893                break;
   3894          
   3895              case COMMAND_LOCATION_DATA_RSP:
   3896              case COMMAND_LOCATION_DATA_NOTIF:
   3897              case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
   3898                zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
   3899                break;
   3900          
   3901              case COMMAND_LOCATION_RSSI_PING:
   3902                if ( pCBs->pfnLocationRsp )
   3903                {
   3904                  rsp.un.locationType = *pData;
   3905          
   3906                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3907                  rsp.cmdID = pInMsg->hdr.commandID;
   3908          
   3909                  // Notify the Application
   3910                  pCBs->pfnLocationRsp( &rsp );
   3911                }
   3912                break;
   3913          
   3914              default:
   3915                stat = ZFailure;
   3916                break;
   3917            }
   3918          
   3919            return ( stat );
   3920          }
   3921          #endif // ZCL_LOCATION
   3922          
   3923          #ifdef ZCL_SCENES
   3924          #if !defined ( ZCL_STANDALONE )
   3925          /*********************************************************************
   3926           * @fn      zclGeneral_ScenesInitNV
   3927           *
   3928           * @brief   Initialize the NV Scene Table Items
   3929           *
   3930           * @param   none
   3931           *
   3932           * @return  number of scenes
   3933           */
   3934          static uint8 zclGeneral_ScenesInitNV( void )
   3935          {
   3936            uint8  status;
   3937            uint16 size;
   3938          
   3939            size = (uint16)((sizeof ( nvGenScenesHdr_t ))
   3940                            + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
   3941          
   3942            status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
   3943          
   3944            if ( status != ZSUCCESS )
   3945            {
   3946              zclGeneral_ScenesSetDefaultNV();
   3947            }
   3948          
   3949            return status;
   3950          }
   3951          #endif // ZCL_STANDALONE
   3952          
   3953          #if !defined ( ZCL_STANDALONE )
   3954          /*********************************************************************
   3955           * @fn          zclGeneral_ScenesSetDefaultNV
   3956           *
   3957           * @brief       Write the defaults to NV
   3958           *
   3959           * @param       none
   3960           *
   3961           * @return      none
   3962           */
   3963          static void zclGeneral_ScenesSetDefaultNV( void )
   3964          {
   3965            nvGenScenesHdr_t hdr;
   3966          
   3967            // Initialize the header
   3968            hdr.numRecs = 0;
   3969          
   3970            // Save off the header
   3971            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   3972          }
   3973          #endif // ZCL_STANDALONE
   3974          
   3975          #if !defined ( ZCL_STANDALONE )
   3976          /*********************************************************************
   3977           * @fn          zclGeneral_ScenesWriteNV
   3978           *
   3979           * @brief       Save the Scene Table in NV
   3980           *
   3981           * @param       none
   3982           *
   3983           * @return      none
   3984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3985          static void zclGeneral_ScenesWriteNV( void )
   \                     zclGeneral_ScenesWriteNV:
   3986          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV     A,#-0x3a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3987            nvGenScenesHdr_t hdr;
   3988            zclGenSceneItem_t *pLoop;
   3989            zclGenSceneNVItem_t item;
   3990          
   3991            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
   3992          
   3993            // Look for end of list
   3994            pLoop = zclGenSceneTable;
   \   000014   90....       MOV     DPTR,#zclGenSceneTable
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   8079         SJMP    ??zclGeneral_ScenesWriteNV_0
   3995            while ( pLoop )
   3996            {
   3997              // Build the record
   3998              item.endpoint = pLoop->endpoint;
   \                     ??zclGeneral_ScenesWriteNV_1:
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C0E0         PUSH    A
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   D0E0         POP     A
   \   00002D   12....       LCALL   ?Subroutine47 & 0xFFFF
   3999              zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
   \                     ??CrossCallReturnLabel_87:
   \   000030   A3           INC     DPTR
   \   000031   A982         MOV     R1,DPL
   \   000033   AA83         MOV     R2,DPH
   \   000035   89..         MOV     ?V0,R1
   \   000037   8A..         MOV     ?V1,R2
   \   000039   75..00       MOV     ?V2,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000041   7C37         MOV     R4,#0x37
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7406         MOV     A,#0x6
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   AA82         MOV     R2,DPL
   \   00004C   AB83         MOV     R3,DPH
   \   00004E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000051   7403         MOV     A,#0x3
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   4000          
   4001              // Save the record to NV
   4002              zcl_nv_write( ZCD_NV_SCENE_TABLE,
   4003                      (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
   4004                              sizeof ( zclGenSceneNVItem_t ), &item );
   \   000056                ; Setup parameters for call to function osal_nv_write
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?XSTACK_DISP100_8
   \   00005B   88..         MOV     ?V0,R0
   \   00005D   89..         MOV     ?V1,R1
   \   00005F   78..         MOV     R0,#?V0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   75..38       MOV     ?V0,#0x38
   \   000067   75..00       MOV     ?V1,#0x0
   \   00006A   78..         MOV     R0,#?V0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000077   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00007A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   4005          
   4006              hdr.numRecs++;
   \   000082   85..82       MOV     DPL,?XSP + 0
   \   000085   85..83       MOV     DPH,?XSP + 1
   \   000088   E0           MOVX    A,@DPTR
   \   000089   2401         ADD     A,#0x1
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   3400         ADDC    A,#0x0
   \   000090   F0           MOVX    @DPTR,A
   4007          
   4008              pLoop = pLoop->next;
   \   000091   12....       LCALL   ?Subroutine38 & 0xFFFF
   4009            }
   \                     ??CrossCallReturnLabel_262:
   \   000094   FE           MOV     R6,A
   \   000095   E9           MOV     A,R1
   \                     ??zclGeneral_ScenesWriteNV_0:
   \   000096   FF           MOV     R7,A
   \   000097   EE           MOV     A,R6
   \   000098   4F           ORL     A,R7
   \   000099   7082         JNZ     ??zclGeneral_ScenesWriteNV_1
   4010          
   4011            // Save off the header
   4012            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   \   00009B                ; Setup parameters for call to function osal_nv_write
   \   00009B   A8..         MOV     R0,?XSP + 0
   \   00009D   A9..         MOV     R1,?XSP + 1
   \   00009F   88..         MOV     ?V0,R0
   \   0000A1   89..         MOV     ?V1,R1
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   75..02       MOV     ?V0,#0x2
   \   0000AB   75..00       MOV     ?V1,#0x0
   \   0000AE   78..         MOV     R0,#?V0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   7C00         MOV     R4,#0x0
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   7A91         MOV     R2,#-0x6f
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000BE   7404         MOV     A,#0x4
   \   0000C0   12....       LCALL   ?DEALLOC_XSTACK8
   4013          }
   \   0000C3   743A         MOV     A,#0x3a
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C8   7F03         MOV     R7,#0x3
   \   0000CA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   75F038       MOV     B,#0x38
   \   000003   A4           MUL     AB
   \   000004   F8           MOV     R0,A
   \   000005   AAF0         MOV     R2,B
   \   000007   75F038       MOV     B,#0x38
   \   00000A   E9           MOV     A,R1
   \   00000B   A4           MUL     AB
   \   00000C   2A           ADD     A,R2
   \   00000D   F9           MOV     R1,A
   \   00000E   E8           MOV     A,R0
   \   00000F   2402         ADD     A,#0x2
   \   000011   FC           MOV     R4,A
   \   000012   E4           CLR     A
   \   000013   39           ADDC    A,R1
   \   000014   FD           MOV     R5,A
   \   000015   7A91         MOV     R2,#-0x6f
   \   000017   7B00         MOV     R3,#0x0
   \   000019   22           RET
   4014          #endif // ZCL_STANDALONE
   4015          
   4016          #if !defined ( ZCL_STANDALONE )
   4017          /*********************************************************************
   4018           * @fn          zclGeneral_ScenesRestoreFromNV
   4019           *
   4020           * @brief       Restore the Scene table from NV
   4021           *
   4022           * @param       none
   4023           *
   4024           * @return      Number of entries restored
   4025           */
   4026          static uint16 zclGeneral_ScenesRestoreFromNV( void )
   4027          {
   4028            uint16 x;
   4029            nvGenScenesHdr_t hdr;
   4030          
   4031            zclGenSceneNVItem_t item;
   4032            uint16 numAdded = 0;
   4033          
   4034            if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
   4035            {
   4036              // Read in the device list
   4037              for ( x = 0; x < hdr.numRecs; x++ )
   4038              {
   4039                if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
   4040                          (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
   4041                                            sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
   4042                {
   4043                  // Add the scene
   4044                  if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
   4045                  {
   4046                    numAdded++;
   4047                  }
   4048                }
   4049              }
   4050            }
   4051          
   4052            return ( numAdded );
   4053          }
   4054          #endif // ZCL_STANDALONE
   4055          
   4056          #if !defined ( ZCL_STANDALONE )
   4057          /*********************************************************************
   4058           * @fn          zclGeneral_ScenesInit
   4059           *
   4060           * @brief       Initialize the scenes table
   4061           *
   4062           * @param       none
   4063           *
   4064           * @return      none
   4065           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4066          void zclGeneral_ScenesInit( void )
   \                     zclGeneral_ScenesInit:
   4067          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV     A,#-0x3a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   4068            // Initialize NV items
   4069            zclGeneral_ScenesInitNV();
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   F5..         MOV     ?V1,A
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C82         MOV     R4,#-0x7e
   \   000016   7D03         MOV     R5,#0x3
   \   000018   7A91         MOV     R2,#-0x6f
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   E9           MOV     A,R1
   \   000025   602A         JZ      ??zclGeneral_ScenesInit_0
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..02       MOV     ?V0,#0x2
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A91         MOV     R2,#-0x6f
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   4070          
   4071            // Restore the Scene table
   4072            zclGeneral_ScenesRestoreFromNV();
   \                     ??zclGeneral_ScenesInit_0:
   \   000051                ; Setup parameters for call to function osal_nv_read
   \   000051   A8..         MOV     R0,?XSP + 0
   \   000053   A9..         MOV     R1,?XSP + 1
   \   000055   88..         MOV     ?V0,R0
   \   000057   89..         MOV     ?V1,R1
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..02       MOV     ?V0,#0x2
   \   000061   75..00       MOV     ?V1,#0x0
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV     R4,#0x0
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   7A91         MOV     R2,#-0x6f
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   \   00007A   705A         JNZ     ??zclGeneral_ScenesInit_1
   \   00007C   7E00         MOV     R6,#0x0
   \   00007E   7F00         MOV     R7,#0x0
   \   000080   8044         SJMP    ??zclGeneral_ScenesInit_2
   \                     ??zclGeneral_ScenesInit_3:
   \   000082                ; Setup parameters for call to function osal_nv_read
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?XSTACK_DISP100_8
   \   000087   88..         MOV     ?V0,R0
   \   000089   89..         MOV     ?V1,R1
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   75..38       MOV     ?V0,#0x38
   \   000093   75..00       MOV     ?V1,#0x0
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   EE           MOV     A,R6
   \   00009C   F8           MOV     R0,A
   \   00009D   EF           MOV     A,R7
   \   00009E   F9           MOV     R1,A
   \   00009F   E8           MOV     A,R0
   \   0000A0   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000A3   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A6   7404         MOV     A,#0x4
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   E9           MOV     A,R1
   \   0000AC   7013         JNZ     ??zclGeneral_ScenesInit_4
   \   0000AE                ; Setup parameters for call to function zclGeneral_AddScene
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   AA82         MOV     R2,DPL
   \   0000B5   AB83         MOV     R3,DPH
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   12....       LCALL   `??zclGeneral_AddScene::?relay`; Banked call to: zclGeneral_AddScene
   \                     ??zclGeneral_ScenesInit_4:
   \   0000C1   0E           INC     R6
   \   0000C2   EE           MOV     A,R6
   \   0000C3   7001         JNZ     ??zclGeneral_ScenesInit_2
   \   0000C5   0F           INC     R7
   \                     ??zclGeneral_ScenesInit_2:
   \   0000C6   85..82       MOV     DPL,?XSP + 0
   \   0000C9   85..83       MOV     DPH,?XSP + 1
   \   0000CC   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0000CF   C3           CLR     C
   \   0000D0   EE           MOV     A,R6
   \   0000D1   98           SUBB    A,R0
   \   0000D2   EF           MOV     A,R7
   \   0000D3   99           SUBB    A,R1
   \   0000D4   40AC         JC      ??zclGeneral_ScenesInit_3
   4073          }
   \                     ??zclGeneral_ScenesInit_1:
   \   0000D6   743A         MOV     A,#0x3a
   \   0000D8   02....       LJMP    ??Subroutine79_0 & 0xFFFF
   4074          #endif // ZCL_STANDALONE
   4075          
   4076          #if !defined ( ZCL_STANDALONE )
   4077          /*********************************************************************
   4078           * @fn          zclGeneral_ScenesSave
   4079           *
   4080           * @brief       Save the scenes table
   4081           *
   4082           * @param       none
   4083           *
   4084           * @return      none
   4085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4086          void zclGeneral_ScenesSave( void )
   \                     zclGeneral_ScenesSave:
   4087          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   4088            // Update NV
   4089            zclGeneral_ScenesWriteNV();
   \   000004                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000004   12....       LCALL   `??zclGeneral_ScenesWriteNV::?relay`; Banked call to: zclGeneral_ScenesWriteNV
   4090          }
   \   000007   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_RegisterCmdCallbacks::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendIdentify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendIdentifyEZModeInvoke::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyEZModeInvoke

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendIdentifyUpdateCommState::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyUpdateCommState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendIdentifyQueryResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyQueryResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendGroupRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendAddGroupRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendAddGroupRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendGroupGetMembershipRequest::?re`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupGetMembershipRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendGroupResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendGroupViewResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupViewResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendAddSceneRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendAddSceneRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendSceneRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendSceneResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendSceneViewRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneViewRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_SendSceneGetMembershipResponse::?r`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneGetMembershipResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_HdlIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_HdlInSpecificCommands::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_HdlInSpecificCommands

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInIdentity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInIdentity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_AddGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_AddGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInGroupsServer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInGroupsServer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInGroupsClient::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInGroupsClient

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_AddScene::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_AddScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_FindScene::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_FindScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_FindAllScenesForGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_FindAllScenesForGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_RemoveScene::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RemoveScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_RemoveAllScenes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RemoveAllScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_CountScenes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_CountScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_CountAllScenes::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_CountAllScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ReadSceneCountCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ReadSceneCountCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInScenesServer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInScenesServer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ProcessInScenesClient::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInScenesClient

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ScenesWriteNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ScenesInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGeneral_ScenesSave::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesSave
   4091          #endif // ZCL_STANDALONE
   4092          
   4093          #endif // ZCL_SCENES
   4094          
   4095          /***************************************************************************
   4096          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     96   zclGeneral_AddGroup
        0     16   -> aps_AddGroup
        0     19   -> osal_memcpy
        0     20   -> zcl_ReadAttrData
      1    100   zclGeneral_AddScene
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
        0     15   -> zclGeneral_ScenesWriteNV
      2     82   zclGeneral_CountAllScenes
      2      0   zclGeneral_CountScenes
      1     92   zclGeneral_FindAllScenesForGroup
      0     91   zclGeneral_FindScene
      0     10   zclGeneral_HdlInSpecificCommands
        0     10   -> zclGeneral_ProcessInGroupsClient
        0     10   -> zclGeneral_ProcessInGroupsServer
        0     10   -> zclGeneral_ProcessInIdentity
        0     10   -> zclGeneral_ProcessInScenesClient
        0     10   -> zclGeneral_ProcessInScenesServer
      2      0   zclGeneral_HdlIncoming
        2      0   -> zclGeneral_HdlInSpecificCommands
      1     63   zclGeneral_ProcessInGroupsClient
        0     50   -> osal_mem_alloc
        0     50   -> osal_mem_free
        0     53   -> osal_memcpy
        0     50   -> osal_memset
      1     93   zclGeneral_ProcessInGroupsServer
        0     76   -> aps_CountAllGroups
        0     76   -> aps_FindAllGroupsForEndpoint
        0     76   -> aps_FindGroup
        0     76   -> aps_RemoveAllGroup
        0     76   -> aps_RemoveGroup
        0     76   -> osal_mem_alloc
        0     76   -> osal_mem_free
        0     76   -> osal_memset
        0     76   -> zclGeneral_AddGroup
        0     76   -> zclGeneral_RemoveAllScenes
        0     83   -> zclGeneral_SendGroupGetMembershipRequest
        0     80   -> zclGeneral_SendGroupResponse
        0     79   -> zclGeneral_SendGroupViewResponse
        0     80   -> zcl_ReadAttrData
        0     83   -> zcl_SendDefaultRspCmd
      0     32   zclGeneral_ProcessInIdentity
        0     20   -> zclGeneral_SendIdentifyQueryResponse
        0     22   -> zcl_ReadAttrData
      1    100   zclGeneral_ProcessInScenesClient
        0     87   -> osal_mem_alloc
        0     87   -> osal_mem_free
        0     90   -> osal_memcpy
        0     87   -> osal_memset
      1     99   zclGeneral_ProcessInScenesServer
        0     82   -> aps_FindGroup
        0     82   -> osal_mem_alloc
        0     82   -> osal_mem_free
        0     85   -> osal_memcpy
        0     82   -> osal_memset
        0     82   -> zclGeneral_AddScene
        0     82   -> zclGeneral_CountAllScenes
        0     82   -> zclGeneral_FindAllScenesForGroup
        0     82   -> zclGeneral_FindScene
        0     82   -> zclGeneral_RemoveAllScenes
        0     82   -> zclGeneral_RemoveScene
        0     82   -> zclGeneral_ScenesWriteNV
        0     89   -> zclGeneral_SendSceneGetMembershipResponse
        0     87   -> zclGeneral_SendSceneResponse
        0     86   -> zclGeneral_SendSceneViewRsp
        0     86   -> zcl_ReadAttrData
      1     14   zclGeneral_ReadSceneCountCB
        0     10   -> zclGeneral_CountAllScenes
      1     14   zclGeneral_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     12   -> zclGeneral_ScenesInit
        0     14   -> zcl_registerPlugin
      0     95   zclGeneral_RemoveAllScenes
        0     13   -> osal_mem_free
        0     13   -> zclGeneral_ScenesWriteNV
      0     91   zclGeneral_RemoveScene
        0      9   -> osal_mem_free
        0      9   -> zclGeneral_ScenesWriteNV
      0     84   zclGeneral_ScenesInit
        0     70   -> osal_nv_item_init
        0     72   -> osal_nv_read
        0     72   -> osal_nv_write
        0     68   -> zclGeneral_AddScene
      2      0   zclGeneral_ScenesSave
        2      0   -> zclGeneral_ScenesWriteNV
      1    155   zclGeneral_ScenesWriteNV
        0     72   -> osal_memcpy
        0     73   -> osal_nv_write
      1     36   zclGeneral_SendAddGroupRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     23   -> osal_memcpy
        0     31   -> zcl_SendCommand
      1     40   zclGeneral_SendAddSceneRequest
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     37   -> zcl_SendCommand
      1    114   zclGeneral_SendGroupGetMembershipRequest
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     28   zclGeneral_SendGroupRequest
        0     25   -> zcl_SendCommand
      1    106   zclGeneral_SendGroupResponse
        0     26   -> zcl_SendCommand
      1    112   zclGeneral_SendGroupViewResponse
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     25   -> osal_memcpy
        0     33   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentify
        0     23   -> zcl_SendCommand
      1     25   zclGeneral_SendIdentifyEZModeInvoke
        0     24   -> zcl_SendCommand
      1     43   zclGeneral_SendIdentifyQueryResponse
        0     23   -> zcl_SendCommand
      1     27   zclGeneral_SendIdentifyUpdateCommState
        0     25   -> zcl_SendCommand
      1    118   zclGeneral_SendSceneGetMembershipResponse
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     29   -> zcl_SendCommand
      1     30   zclGeneral_SendSceneRequest
        0     26   -> zcl_SendCommand
      1    114   zclGeneral_SendSceneResponse
        0     27   -> zcl_SendCommand
      1    123   zclGeneral_SendSceneViewRsp
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     29   -> osal_memcpy
        0     37   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ??Subroutine71_0
      12  ??Subroutine72_0
       3  ??Subroutine73_0
       5  ??Subroutine74_0
       6  ??Subroutine75_0
      12  ??Subroutine76_0
       6  ??Subroutine77_0
       7  ??Subroutine78_0
       3  ??Subroutine79_0
       5  ??Subroutine80_0
       6  ??Subroutine81_0
       2  ??Subroutine82_0
       5  ??Subroutine83_0
       9  ??Subroutine84_0
       5  ??Subroutine85_0
       6  ??Subroutine86_0
       6  ??Subroutine87_0
       4  ??Subroutine88_0
       4  ??Subroutine89_0
       7  ??Subroutine90_0
       4  ??Subroutine91_0
      14  ?Subroutine0
      29  ?Subroutine1
       8  ?Subroutine10
       2  ?Subroutine11
       4  ?Subroutine12
      14  ?Subroutine13
       6  ?Subroutine14
       8  ?Subroutine15
      17  ?Subroutine16
      17  ?Subroutine17
       6  ?Subroutine18
       9  ?Subroutine19
       5  ?Subroutine2
      15  ?Subroutine20
       1  ?Subroutine21
      16  ?Subroutine22
       8  ?Subroutine23
      13  ?Subroutine24
       4  ?Subroutine25
      14  ?Subroutine26
      13  ?Subroutine27
       7  ?Subroutine28
       5  ?Subroutine29
       3  ?Subroutine3
       6  ?Subroutine30
       6  ?Subroutine31
       6  ?Subroutine32
      10  ?Subroutine33
       9  ?Subroutine34
      12  ?Subroutine35
      16  ?Subroutine36
       8  ?Subroutine37
       4  ?Subroutine38
       3  ?Subroutine39
      12  ?Subroutine4
       5  ?Subroutine40
       5  ?Subroutine41
       1  ?Subroutine42
       1  ?Subroutine43
      15  ?Subroutine44
       6  ?Subroutine45
       8  ?Subroutine46
       5  ?Subroutine47
      12  ?Subroutine48
       8  ?Subroutine49
       7  ?Subroutine5
      10  ?Subroutine50
      10  ?Subroutine51
       6  ?Subroutine52
      26  ?Subroutine53
      12  ?Subroutine54
       4  ?Subroutine55
       3  ?Subroutine56
       4  ?Subroutine57
       9  ?Subroutine58
       7  ?Subroutine59
       5  ?Subroutine6
      20  ?Subroutine60
      11  ?Subroutine61
       6  ?Subroutine62
       9  ?Subroutine63
       7  ?Subroutine64
       5  ?Subroutine65
       7  ?Subroutine66
      12  ?Subroutine67
      16  ?Subroutine68
       4  ?Subroutine69
       5  ?Subroutine7
      11  ?Subroutine70
      13  ?Subroutine8
       5  ?Subroutine9
       2  zclGenCBs
       1  zclGenPluginRegisted
       2  zclGenSceneTable
     165  zclGeneral_AddGroup
       6  zclGeneral_AddGroup::?relay
     125  zclGeneral_AddScene
       6  zclGeneral_AddScene::?relay
      25  zclGeneral_CountAllScenes
       6  zclGeneral_CountAllScenes::?relay
      35  zclGeneral_CountScenes
       6  zclGeneral_CountScenes::?relay
      78  zclGeneral_FindAllScenesForGroup
       6  zclGeneral_FindAllScenesForGroup::?relay
      73  zclGeneral_FindScene
       6  zclGeneral_FindScene::?relay
     242  zclGeneral_HdlInSpecificCommands
       6  zclGeneral_HdlInSpecificCommands::?relay
      29  zclGeneral_HdlIncoming
       6  zclGeneral_HdlIncoming::?relay
     490  zclGeneral_ProcessInGroupsClient
       6  zclGeneral_ProcessInGroupsClient::?relay
     777  zclGeneral_ProcessInGroupsServer
       6  zclGeneral_ProcessInGroupsServer::?relay
     264  zclGeneral_ProcessInIdentity
       6  zclGeneral_ProcessInIdentity::?relay
     517  zclGeneral_ProcessInScenesClient
       6  zclGeneral_ProcessInScenesClient::?relay
    1619  zclGeneral_ProcessInScenesServer
       6  zclGeneral_ProcessInScenesServer::?relay
      60  zclGeneral_ReadSceneCountCB
       6  zclGeneral_ReadSceneCountCB::?relay
     147  zclGeneral_RegisterCmdCallbacks
       6  zclGeneral_RegisterCmdCallbacks::?relay
     114  zclGeneral_RemoveAllScenes
       6  zclGeneral_RemoveAllScenes::?relay
     117  zclGeneral_RemoveScene
       6  zclGeneral_RemoveScene::?relay
     219  zclGeneral_ScenesInit
       6  zclGeneral_ScenesInit::?relay
      10  zclGeneral_ScenesSave
       6  zclGeneral_ScenesSave::?relay
     205  zclGeneral_ScenesWriteNV
       6  zclGeneral_ScenesWriteNV::?relay
     217  zclGeneral_SendAddGroupRequest
       6  zclGeneral_SendAddGroupRequest::?relay
     305  zclGeneral_SendAddSceneRequest
       6  zclGeneral_SendAddSceneRequest::?relay
     254  zclGeneral_SendGroupGetMembershipRequest
       6  zclGeneral_SendGroupGetMembershipRequest::?relay
     104  zclGeneral_SendGroupRequest
       6  zclGeneral_SendGroupRequest::?relay
     115  zclGeneral_SendGroupResponse
       6  zclGeneral_SendGroupResponse::?relay
     264  zclGeneral_SendGroupViewResponse
       6  zclGeneral_SendGroupViewResponse::?relay
      86  zclGeneral_SendIdentify
       6  zclGeneral_SendIdentify::?relay
     106  zclGeneral_SendIdentifyEZModeInvoke
       6  zclGeneral_SendIdentifyEZModeInvoke::?relay
      83  zclGeneral_SendIdentifyQueryResponse
       6  zclGeneral_SendIdentifyQueryResponse::?relay
     103  zclGeneral_SendIdentifyUpdateCommState
       6  zclGeneral_SendIdentifyUpdateCommState::?relay
     244  zclGeneral_SendSceneGetMembershipResponse
       6  zclGeneral_SendSceneGetMembershipResponse::?relay
     129  zclGeneral_SendSceneRequest
       6  zclGeneral_SendSceneRequest::?relay
     160  zclGeneral_SendSceneResponse
       6  zclGeneral_SendSceneResponse::?relay
     392  zclGeneral_SendSceneViewRsp
       6  zclGeneral_SendSceneViewRsp::?relay

 
 8 632 bytes in segment BANKED_CODE
   204 bytes in segment BANK_RELAYS
     5 bytes in segment XDATA_Z
 
   204 bytes of CODE     memory
 8 632 bytes of HUGECODE memory
     5 bytes of XDATA    memory

Errors: none
Warnings: none
